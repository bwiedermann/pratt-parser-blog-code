(function() {
  var f = window.__fuse = window.__fuse || {};
  var modules = f.modules = f.modules || {}; f.dt = function (x) { return x && x.__esModule ? x : { "default": x }; };

f.modules = modules;
  f.bundle = function(collection, fn) {
    for (var num in collection) {
      modules[num] = collection[num];
    }
    fn ? fn() : void 0;
  };
  f.c = {};
  f.r = function(id) {
    var cached = f.c[id];
    if (cached) return cached.m.exports;
    var module = modules[id];
    if (!module) {
      
      throw new Error('Module ' + id + ' was not found');
    }
    cached = f.c[id] = {};
    cached.exports = {};
    cached.m = { exports: cached.exports };
    module(f.r, cached.exports, cached.m);
    return cached.m.exports;
  }; 
})();
__fuse.bundle({

// src/styles.css @10
10: function(__fusereq, exports, module){
__fusereq(11)("src/styles.css","main h1 {\n  color: darkslategray;\n}\n\n#miniCL {\n  margin-top: 50px;\n  margin-bottom: 50px;\n}\n\n#analysis {\n  margin-top: 50px;\n  padding: 50px;\n}\n\n#icons {\n  display: none;\n}\n\n/** Bootstrap overrides **/\n.nav-pills .nav-link.active, .nav-pills .show > .nav-link {\n  background-color: #bbb;\n}\n\n/** From Desmos's styles **/\n\n.instructions {\n  color: #bbb;\n}\n\n.title {\n  font-family: \"HelveticaNeue-Light\", \"Helvetica Neue Light\", \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif;\n  font-weight: 300;\n  font-size: 20.8px;\n  text-transform: uppercase;\n}\n\n.instructions .pillow-icon-sparkline {\n  font-size: 150%;\n  position: relative;\n  top: 3px;\n  margin: 0 2px;\n}\n\n")
},

// src/desmos_icons.css @12
12: function(__fusereq, exports, module){
__fusereq(11)("src/desmos_icons.css","@font-face {\n  font-family: 'desmos-icons';\n  src: url(\"data:application/x-font-ttf;charset=utf-8;base64,\") format('truetype');\n  font-weight: normal;\n  font-style: normal;\n  font-display: block;\n}\n\n.pillow-icon-clock, .pillow-icon-thumbs-up, .pillow-icon-eraser, .pillow-icon-ferris, .pillow-icon-points, .pillow-icon-sparkline, .pillow-icon-sparktext, .pillow-icon-bumper, .pillow-icon-zipper, .pillow-icon-roller, .pillow-icon-erlenmeyer, .pillow-icon-evaporating, .pillow-icon-tumbler, .pillow-icon-student-glass, .pillow-icon-cupboard, .pillow-icon-caret-up, .pillow-icon-caret-right, .pillow-icon-caret-left, .pillow-icon-caret-down, .pillow-icon-text, .pillow-icon-facebook, .pillow-icon-thumbs-down, .pillow-icon-people, .pillow-icon-guess, .pillow-icon-star, .pillow-icon-zoom, .pillow-icon-drag-corner, .pillow-icon-email, .pillow-icon-info, .pillow-icon-feedback, .pillow-icon-person, .pillow-icon-clipboard, .pillow-icon-target, .pillow-icon-back-arrow, .pillow-icon-check, .pillow-icon-error, .pillow-icon-chevron-left, .pillow-icon-chevron-right, .pillow-icon-show, .pillow-icon-hide, .pillow-icon-pause, .pillow-icon-play, .pillow-icon-plus, .pillow-icon-minus, .pillow-icon-remove, .pillow-icon-redo, .pillow-icon-undo, .pillow-icon-question-sign, .pillow-icon-twitter, .pillow-icon-settings, .pillow-icon-pencil, .pillow-icon-chevron-up, .pillow-icon-chevron-down, .pillow-icon-hamburger, .pillow-icon-line, .pillow-icon-paperclip, .pillow-icon-chef, .pillow-icon-nurse, .pillow-icon-runner, .pillow-icon-reset, .pillow-icon-star-outline, .pillow-icon-lock, .pillow-icon-duplicate, .pillow-icon-image, .pillow-icon-wifi, .pillow-icon-desmos-d, .pillow-icon-new-expression, .pillow-icon-overlay, .pillow-icon-copy-previous, .pillow-icon-anonymize, .pillow-icon-lightbulb, .pillow-icon-sketch, .pillow-icon-bookmark, .pillow-icon-marbleslides, .pillow-icon-labs, .pillow-icon-cardsort, .pillow-icon-share, .pillow-icon-teacher, .pillow-icon-add-media, .pillow-icon-multiple-choice, .pillow-icon-table, .pillow-icon-mobile, .pillow-icon-tablet, .pillow-icon-laptop, .pillow-icon-print, .pillow-icon-book, .pillow-icon-title, .pillow-icon-translation, .pillow-icon-rotation, .pillow-icon-reflection, .pillow-icon-transformation, .pillow-icon-dilation, .pillow-icon-link, .pillow-icon-dot-dot-dot, .pillow-icon-camera, .pillow-icon-open, .pillow-icon-fullscreen-open, .pillow-icon-fullscreen-close, .pillow-icon-geometry, .pillow-icon-paper, .pillow-icon-wrench, .pillow-icon-bw, .pillow-icon-rotate, .pillow-icon-reorder, .pillow-icon-scientific, .pillow-icon-sign-out, .pillow-icon-calculator, .pillow-icon-code, .pillow-icon-checkboxes, .pillow-icon-a-z, .pillow-icon-shuffle,  .pillow-icon-sort-time, .pillow-icon-feedback-bubble, .pillow-icon-sqrt, .pillow-icon-add-teacher, .pillow-icon-world, .pillow-icon-keyboard, .pillow-icon-sink, .pillow-icon-source, .pillow-icon-action-button, .pillow-icon-graph, .pillow-icon-app-graphing, .pillow-icon-audio, .pillow-icon-question, .pillow-icon-wave, .pillow-icon-check-again, .pillow-icon-bullets, .pillow-icon-interpolate, .pillow-icon-stop {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'desmos-icons' !important;\n  speak: never;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.pillow-icon-stop:before {\n  content: \"\\e97e\";\n}\n.pillow-icon-interpolate:before {\n  content: \"\\e97d\";\n}\n.pillow-icon-bullets:before {\n  content: \"\\e97b\";\n}\n.pillow-icon-check-again:before {\n  content: \"\\e979\";\n}\n.pillow-icon-wave:before {\n  content: \"\\e97c\";\n}\n.pillow-icon-question:before {\n  content: \"\\e97a\";\n}\n.pillow-icon-audio:before {\n  content: \"\\e978\";\n}\n.pillow-icon-app-graphing:before {\n  content: \"\\e976\";\n}\n.pillow-icon-graph:before {\n  content: \"\\e977\";\n}\n.pillow-icon-sink:before {\n  content: \"\\e972\";\n}\n.pillow-icon-source:before {\n  content: \"\\e975\";\n}\n.pillow-icon-keyboard:before {\n  content: \"\\e971\";\n}\n.pillow-icon-action-button:before {\n  content: \"\\e90d\";\n}\n.pillow-icon-cardsort:before {\n  content: \"\\e974\";\n}\n.pillow-icon-world:before {\n  content: \"\\e96e\";\n}\n.pillow-icon-add-teacher:before {\n  content: \"\\e96b\";\n}\n.pillow-icon-sqrt:before {\n  content: \"\\e96a\";\n}\n.pillow-icon-feedback-bubble:before {\n  content: \"\\e967\";\n}\n.pillow-icon-a-z:before {\n  content: \"\\e968\";\n}\n.pillow-icon-sort-time:before {\n  content: \"\\e969\";\n}\n.pillow-icon-shuffle:before {\n  content: \"\\e966\";\n}\n.pillow-icon-checkboxes:before {\n  content: \"\\e965\";\n}\n.pillow-icon-code:before {\n  content: \"\\e964\";\n}\n.pillow-icon-calculator:before {\n  content: \"\\e963\";\n}\n.pillow-icon-sign-out:before {\n  content: \"\\e962\";\n}\n.pillow-icon-scientific:before {\n  content: \"\\e961\";\n}\n.pillow-icon-reorder:before {\n  content: \"\\e960\";\n}\n.pillow-icon-rotate:before {\n  content: \"\\e90f\";\n}\n.pillow-icon-bw:before {\n  content: \"\\e924\";\n}\n.pillow-icon-paper:before {\n  content: \"\\e926\";\n}\n.pillow-icon-geometry:before {\n  content: \"\\e927\";\n}\n.pillow-icon-fullscreen-open:before {\n  content: \"\\e938\";\n}\n.pillow-icon-fullscreen-close:before {\n  content: \"\\e957\";\n}\n.pillow-icon-open:before {\n  content: \"\\e95b\";\n}\n.pillow-icon-camera:before {\n  content: \"\\e95c\";\n}\n.pillow-icon-dot-dot-dot:before {\n  content: \"\\e95d\";\n}\n.pillow-icon-desmos:before {\n  content: \"\\e95e\";\n}\n.pillow-icon-wrench:before {\n  content: \"\\e95f\";\n}\n.pillow-icon-link:before {\n  content: \"\\e95a\";\n}\n.pillow-icon-dilation:before {\n  content: \"\\e901\";\n}\n.pillow-icon-rotation:before {\n  content: \"\\e959\";\n}\n.pillow-icon-table:before {\n  content: \"\\e94c\";\n}\n.pillow-icon-transformation:before {\n  content: \"\\e958\";\n}\n.pillow-icon-reflection:before {\n  content: \"\\e900\";\n}\n.pillow-icon-translation:before {\n  content: \"\\e902\";\n}\n.pillow-icon-title:before {\n  content: \"\\e903\";\n}\n.pillow-icon-book:before {\n  content: \"\\e904\";\n}\n.pillow-icon-print:before {\n  content: \"\\e905\";\n}\n.pillow-icon-tablet:before {\n  content: \"\\e906\";\n}\n.pillow-icon-laptop:before {\n  content: \"\\e907\";\n}\n.pillow-icon-mobile:before {\n  content: \"\\e908\";\n}\n.pillow-icon-multiple-choice:before {\n  content: \"\\e909\";\n}\n.pillow-icon-add-media:before {\n  content: \"\\e90a\";\n}\n.pillow-icon-teacher:before {\n  content: \"\\e90b\";\n}\n.pillow-icon-marbleslides:before {\n  content: \"\\e90c\";\n}\n.pillow-icon-labs:before {\n  content: \"\\e90e\";\n}\n.pillow-icon-bookmark:before {\n  content: \"\\e910\";\n}\n.pillow-icon-email:before {\n  content: \"\\e911\";\n}\n.pillow-icon-sketch:before {\n  content: \"\\e912\";\n}\n.pillow-icon-lightbulb:before {\n  content: \"\\e913\";\n}\n.pillow-icon-cupboard:before {\n  content: \"\\e914\";\n}\n.pillow-icon-anonymize:before {\n  content: \"\\e915\";\n}\n.pillow-icon-copy-previous:before {\n  content: \"\\e916\";\n}\n.pillow-icon-overlay:before {\n  content: \"\\e917\";\n}\n.pillow-icon-desmos-d:before {\n  content: \"\\e918\";\n}\n.pillow-icon-wifi:before {\n  content: \"\\e919\";\n}\n.pillow-icon-duplicate:before {\n  content: \"\\e91a\";\n}\n.pillow-icon-lock:before {\n  content: \"\\e91b\";\n}\n.pillow-icon-star:before {\n  content: \"\\e91c\";\n}\n.pillow-icon-star-outline:before {\n  content: \"\\e91d\";\n}\n.pillow-icon-reset:before {\n  content: \"\\e91e\";\n}\n.pillow-icon-nurse:before {\n  content: \"\\e91f\";\n}\n.pillow-icon-chef:before {\n  content: \"\\e920\";\n}\n.pillow-icon-runner:before {\n  content: \"\\e921\";\n}\n.pillow-icon-thumbs-down:before {\n  content: \"\\e922\";\n}\n.pillow-icon-thumbs-up:before {\n  content: \"\\e923\";\n}\n.pillow-icon-clock:before {\n  content: \"\\e925\";\n}\n.pillow-icon-paperclip:before {\n  content: \"\\e928\";\n}\n.pillow-icon-line:before {\n  content: \"\\e929\";\n}\n.pillow-icon-hamburger:before {\n  content: \"\\e92a\";\n}\n.pillow-icon-chevron-down:before {\n  content: \"\\e92b\";\n}\n.pillow-icon-chevron-up:before {\n  content: \"\\e92c\";\n}\n.pillow-icon-pencil:before {\n  content: \"\\e92d\";\n}\n.pillow-icon-settings:before {\n  content: \"\\e92e\";\n}\n.pillow-icon-twitter:before {\n  content: \"\\e92f\";\n}\n.pillow-icon-question-sign:before {\n  content: \"\\e930\";\n}\n.pillow-icon-undo:before {\n  content: \"\\e931\";\n}\n.pillow-icon-redo:before {\n  content: \"\\e932\";\n}\n.pillow-icon-remove:before {\n  content: \"\\e933\";\n}\n.pillow-icon-minus:before {\n  content: \"\\e934\";\n}\n.pillow-icon-plus:before {\n  content: \"\\e935\";\n}\n.pillow-icon-play:before {\n  content: \"\\e936\";\n}\n.pillow-icon-pause:before {\n  content: \"\\e937\";\n}\n.pillow-icon-hide:before {\n  content: \"\\e939\";\n}\n.pillow-icon-show:before {\n  content: \"\\e93a\";\n}\n.pillow-icon-chevron-right:before {\n  content: \"\\e93b\";\n}\n.pillow-icon-chevron-left:before {\n  content: \"\\e93c\";\n}\n.pillow-icon-error:before {\n  content: \"\\e93d\";\n}\n.pillow-icon-check:before {\n  content: \"\\e93e\";\n}\n.pillow-icon-back-arrow:before {\n  content: \"\\e93f\";\n}\n.pillow-icon-target:before {\n  content: \"\\e940\";\n}\n.pillow-icon-clipboard:before {\n  content: \"\\e941\";\n}\n.pillow-icon-person:before {\n  content: \"\\e942\";\n}\n.pillow-icon-feedback:before {\n  content: \"\\e943\";\n}\n.pillow-icon-info:before {\n  content: \"\\e944\";\n}\n.pillow-icon-drag-corner:before {\n  content: \"\\e945\";\n}\n.pillow-icon-zoom:before {\n  content: \"\\e946\";\n}\n.pillow-icon-guess:before {\n  content: \"\\e947\";\n}\n.pillow-icon-people:before {\n  content: \"\\e948\";\n}\n.pillow-icon-facebook:before {\n  content: \"\\e949\";\n}\n.pillow-icon-image:before {\n  content: \"\\e94a\";\n}\n.pillow-icon-new-expression:before {\n  content: \"\\e94b\";\n}\n.pillow-icon-share:before {\n  content: \"\\e94d\";\n}\n.pillow-icon-text:before {\n  content: \"\\e94e\";\n}\n.pillow-icon-caret-down:before {\n  content: \"\\e94f\";\n}\n.pillow-icon-caret-left:before {\n  content: \"\\e950\";\n}\n.pillow-icon-caret-right:before {\n  content: \"\\e951\";\n}\n.pillow-icon-caret-up:before {\n  content: \"\\e952\";\n}\n.pillow-icon-student-glass:before {\n  content: \"\\e953\";\n}\n.pillow-icon-tumbler:before {\n  content: \"\\e954\";\n}\n.pillow-icon-evaporating:before {\n  content: \"\\e955\";\n}\n.pillow-icon-erlenmeyer:before {\n  content: \"\\e956\";\n}\n.pillow-icon-sparktext:before {\n  content: \"\\e96c\";\n}\n.pillow-icon-sparkline:before {\n  content: \"\\e96d\";\n}\n.pillow-icon-points:before {\n  content: \"\\e96f\";\n}\n.pillow-icon-ferris:before {\n  content: \"\\e970\";\n}\n.pillow-icon-eraser:before {\n  content: \"\\e973\";\n}\n")
},

// src/position.ts @44
44: function(__fusereq, exports, module){
function token2pos(token) {
  return {
    first_line: token.line,
    last_line: token.line,
    first_column: token.first_column,
    last_column: token.last_column
  };
}
exports.token2pos = token2pos;
function join(start, end) {
  return {
    first_line: start.first_line,
    last_line: end.last_line,
    first_column: start.first_column,
    last_column: end.last_column
  };
}
exports.join = join;
function pos2string(pos) {
  return pos.first_line.toString() + "." + pos.first_column.toString() + "." + pos.last_line.toString() + "." + pos.last_column.toString();
}
exports.pos2string = pos2string;
class ParseError {
  constructor(message, position) {
    this.message = message;
    this.position = position;
  }
}
exports.ParseError = ParseError;

},

// src/findBase.ts @45
45: function(__fusereq, exports, module){
function findBases(node, dependsMap) {
  return baseMap[node.nodeType].findBase(node, dependsMap);
}
exports.findBases = findBases;
class BaseNumber {
  findBase(node) {
    return [];
  }
}
class BaseBoolean {
  findBase(node) {
    return [];
  }
}
class BaseBinary {
  findBase(node, dependsMap) {
    let baseList = [];
    let leftList = findBases(node.left, dependsMap);
    baseList = baseList.concat(leftList);
    let rightList = findBases(node.right, dependsMap);
    baseList = baseList.concat(rightList);
    return baseList;
  }
}
class BaseFunction {
  findBase(node, dependsMap) {
    let baseList = [];
    if (builtins[node.name].status == 'Variable') {
      for (let i = 0; i < node.args.length; i++) {
        baseList = baseList.concat(findBases(node.args[i], dependsMap));
      }
    } else if (builtins[node.name].status == 'Maybe-Undefined') {
      baseList.push(node.nodeId);
    }
    return baseList;
  }
}
class BaseChoose {
  findBase(node, dependsMap) {
    let baseList = [];
    let consBases = findBases(node.case.consequent, dependsMap);
    baseList = baseList.concat(consBases);
    let otherBases = findBases(node.otherwise, dependsMap);
    baseList = baseList.concat(otherBases);
    return baseList;
  }
}
class BaseVariableAssignment {
  findBase(node) {
    return [];
  }
}
class BaseIdentifier {
  findBase(node, dependsMap) {
    return dependsMap[node.assignmentId];
  }
}
const baseMap = {
  'Number': new BaseNumber(),
  'Boolean': new BaseBoolean(),
  'BinaryOperation': new BaseBinary(),
  'Function': new BaseFunction(),
  'Choose': new BaseChoose(),
  'VariableAssignment': new BaseVariableAssignment(),
  'Identifier': new BaseIdentifier()
};
const builtins = {
  "IsDefined": {
    inputType: 'any',
    resultType: 'boolean',
    status: "Definitely"
  },
  "Inverse": {
    inputType: 'number',
    resultType: 'number',
    status: "Variable"
  },
  "InputN": {
    inputType: 'number',
    resultType: 'number',
    status: "Maybe-Undefined"
  },
  "Sink": {
    inputType: 'any',
    resultType: 'any',
    status: "Variable"
  },
  "ParseOrderedPair": {
    inputType: 'number',
    resultType: 'pair',
    status: "Maybe-Undefined"
  },
  "X": {
    inputType: 'pair',
    resultType: 'number',
    status: "Variable"
  },
  "Y": {
    inputType: 'pair',
    resultType: 'number',
    status: "Variable"
  },
  "Not": {
    inputType: 'boolean',
    resultType: 'boolean',
    status: "Definitely"
  },
  "InputB": {
    inputType: 'boolean',
    resultType: 'boolean',
    status: "Maybe-Undefined"
  }
};

},

// src/parselet.ts @42
42: function(__fusereq, exports, module){
var _1_, _2_;
exports.__esModule = true;
var position_1 = __fusereq(44);
var findBase_1 = __fusereq(45);
class NumberParselet {
  parse(_parser, _tokens, token, varMap, registeredNodes, dependsMap) {
    const position = position_1.token2pos(token);
    const id = position_1.pos2string(position);
    let newNode = {
      nodeType: 'Number',
      value: parseFloat(token.text),
      outputType: {
        status: 'Definitely',
        valueType: 'number',
        asserts: []
      },
      pos: position,
      nodeId: id
    };
    registeredNodes[id] = newNode;
    return newNode;
  }
}
exports.NumberParselet = NumberParselet;
class BooleanParselet {
  constructor(value) {
    this.value = value;
  }
  parse(_parser, _tokens, token, varMap, registeredNodes, dependsMap) {
    const position = position_1.token2pos(token);
    const id = position_1.pos2string(position);
    let newNode = {
      nodeType: 'Boolean',
      value: this.value,
      outputType: {
        status: 'Definitely',
        valueType: 'boolean',
        asserts: []
      },
      pos: position,
      nodeId: id
    };
    registeredNodes[id] = newNode;
    return newNode;
  }
}
exports.BooleanParselet = BooleanParselet;
class ParenParselet {
  parse(parser, tokens, _token, varMap, registeredNodes, dependsMap) {
    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);
    tokens.expectToken(')');
    return exp;
  }
}
exports.ParenParselet = ParenParselet;
class ConsequentParselet {
  constructor(tokenType, associativity) {
    this.tokenType = tokenType;
    this.associativity = associativity;
  }
}
exports.ConsequentParselet = ConsequentParselet;
class BinaryOperatorParselet extends ConsequentParselet {
  constructor(tokenType, associativity) {
    super(tokenType, associativity);
    this.tokenType = tokenType;
  }
  parse(parser, tokens, left, token, varMap, registeredNodes, dependsMap) {
    const bindingPower = parser.bindingPower(token);
    const right = parser.parse(tokens, this.associativity == 'left' ? bindingPower : bindingPower - 1, varMap, registeredNodes, dependsMap);
    const position = position_1.join(left.pos, position_1.token2pos(tokens.last()));
    const id = position_1.pos2string(position);
    let newNode = {
      nodeType: 'BinaryOperation',
      operator: this.tokenType,
      left,
      right,
      outputType: undefined,
      pos: position,
      nodeId: id
    };
    registeredNodes[id] = newNode;
    return newNode;
  }
}
exports.BinaryOperatorParselet = BinaryOperatorParselet;
class FunctionParselet {
  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {
    const position = position_1.token2pos(token);
    const id = position_1.pos2string(position);
    tokens.expectToken('(');
    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);
    let args = [arg1];
    if (token.text == "ParseOrderedPair") {
      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);
      args.push(arg2);
    }
    tokens.expectToken(')');
    let newNode = {
      nodeType: 'Function',
      name: token.text,
      args: args,
      outputType: {
        status: 'Maybe-Undefined',
        valueType: undefined,
        asserts: []
      },
      pos: position,
      nodeId: id
    };
    registeredNodes[id] = newNode;
    return newNode;
  }
}
exports.FunctionParselet = FunctionParselet;
class ChooseParselet {
  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {
    const position = position_1.token2pos(token);
    const id = position_1.pos2string(position);
    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);
    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);
    tokens.expectToken('CHOOSE2');
    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);
    let newNode = {
      nodeType: 'Choose',
      case: {
        predicate: predicate,
        consequent: consequent
      },
      otherwise: otherwise,
      outputType: {
        status: 'Maybe-Undefined',
        valueType: undefined,
        asserts: []
      },
      pos: position,
      nodeId: id
    };
    registeredNodes[id] = newNode;
    return newNode;
  }
}
exports.ChooseParselet = ChooseParselet;
class VariableAssignmentParselet {
  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {
    const position = position_1.token2pos(token);
    const id = position_1.pos2string(position);
    tokens.expectToken('=');
    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);
    varMap[token.text] = id;
    let newNode = {
      nodeType: 'VariableAssignment',
      name: token.text,
      assignment: assignment,
      outputType: {
        status: "Maybe-Undefined",
        valueType: (_2_ = (_1_ = assignment) === null || _1_ === void 0 ? void 0 : _1_.outputType) === null || _2_ === void 0 ? void 0 : _2_.valueType,
        asserts: []
      },
      pos: position,
      nodeId: id
    };
    registeredNodes[id] = newNode;
    dependsMap[id] = findBase_1.findBases(assignment, dependsMap);
    return newNode;
  }
}
exports.VariableAssignmentParselet = VariableAssignmentParselet;
class IdentifierParselet {
  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {
    const position = position_1.token2pos(token);
    const id = position_1.pos2string(position);
    const assignmentId = varMap[token.text];
    if (!assignmentId) {
      const varParselet = new VariableAssignmentParselet();
      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);
    } else {
      let newNode = {
        nodeType: 'Identifier',
        name: token.text,
        assignmentId: assignmentId,
        outputType: {
          status: "Maybe-Undefined",
          valueType: undefined,
          asserts: []
        },
        pos: position,
        nodeId: id
      };
      registeredNodes[id] = newNode;
      return newNode;
    }
  }
}
exports.IdentifierParselet = IdentifierParselet;

},

// src/lexer.ts @24
24: function(__fusereq, exports, module){
exports.__esModule = true;
var stream_parser_1 = __fusereq(7);
function getTokens(text) {
  const tokens = [];
  const state = {
    line: 1,
    stack: ['default']
  };
  for (const line of text.split('\n')) {
    const stream = new stream_parser_1.StringStream();
    stream.string = line;
    while (!stream.eol()) {
      const token = getToken(stream, state);
      const emitToken = makeEmit(stream, state);
      const fullToken = emitToken(token);
      if (token != undefined) {
        tokens.push(fullToken);
      }
      if (stream.start == stream.pos) {
        throw new Error(`getToken failed to advance stream at position ${stream.pos} in string ${stream.string}`);
      }
      stream.start = stream.pos;
    }
    state.line += 1;
  }
  return tokens;
}
exports.getTokens = getTokens;
function getToken(stream, state) {
  switch (state.stack[state.stack.length - 1]) {
    default:
      return getDefaultToken(stream, state);
  }
}
exports.getToken = getToken;
function makeEmit(stream, state) {
  return function emitToken(type) {
    return {
      type,
      first_column: stream.start,
      last_column: stream.pos,
      line: state.line,
      text: stream.current()
    };
  };
}
function getDefaultToken(stream, state) {
  if (stream.eatSpace()) {
    return undefined;
  }
  if (stream.match(/\+/)) {
    return '+';
  }
  if (stream.match(/\-/)) {
    return '-';
  }
  if (stream.match(/\*/)) {
    return '*';
  }
  if (stream.match(/\//)) {
    return '/';
  }
  if (stream.match(/\|/)) {
    return '|';
  }
  if (stream.match(/\&/)) {
    return '&';
  }
  if (stream.match(/\(/)) {
    return '(';
  }
  if (stream.match(/\)/)) {
    return ')';
  }
  if (stream.match(/\=/)) {
    return '=';
  }
  if (stream.match(/-?[0-9]+(\.[0-9]+)?/)) {
    return 'NUMBER';
  }
  if (stream.match(/True/)) {
    return 'TRUE';
  }
  if (stream.match(/False/)) {
    return 'FALSE';
  }
  if (stream.match(/#/)) {
    if (!stream.match(/\n/)) {
      stream.match(/.*/);
    }
    return 'COMMENT';
  }
  if (stream.match(/WHEN/)) {
    return 'CHOOSE1';
  }
  if (stream.match(/OTHERWISE/)) {
    return 'CHOOSE2';
  }
  if (stream.match(/[A-Z]([a-z|A-Z])*/)) {
    return 'FUNCTION';
  }
  if (stream.match(/[a-z]([a-z|A-Z])*/)) {
    return 'IDENTIFIER';
  }
  stream.next();
  return 'ERROR';
}
exports.getDefaultToken = getDefaultToken;

},

// src/tokenstream.ts @43
43: function(__fusereq, exports, module){
exports.__esModule = true;
var lexer_1 = __fusereq(24);
var position_1 = __fusereq(44);
class TokenStream {
  constructor(text) {
    this.pos = 0;
    this.tokens = lexer_1.getTokens(text).filter(t => t.type != 'COMMENT');
  }
  consume() {
    const token = this.tokens[this.pos];
    if (token) {
      this.pos += 1;
    }
    return token;
  }
  peek() {
    return this.tokens[this.pos];
  }
  last() {
    return this.tokens[this.pos - 1];
  }
  expectToken(expectedType) {
    const actual = this.consume();
    if (!actual) {
      throw new position_1.ParseError(`Expected "${expectedType}" token but found none.`, position_1.token2pos(this.last()));
    }
    if (actual.type != expectedType) {
      throw new position_1.ParseError(`Expected "${expectedType}" token type but found "${actual.type}".`, position_1.token2pos(actual));
    }
    return actual;
  }
}
exports.TokenStream = TokenStream;

},

// src/parser.ts @23
23: function(__fusereq, exports, module){
exports.__esModule = true;
var parselet_1 = __fusereq(42);
var tokenstream_1 = __fusereq(43);
var position_1 = __fusereq(44);
function parse(text, varMap, registeredNodes, dependsMap) {
  const nodes = [];
  const tokens = new tokenstream_1.TokenStream(text);
  const parser = new Parser();
  while (tokens.peek()) {
    try {
      nodes.push(parser.parse(tokens, 0, varMap, registeredNodes, dependsMap));
    } catch (e) {
      return {
        nodes,
        errors: [e]
      };
    }
  }
  return {
    nodes,
    errors: []
  };
}
exports.parse = parse;
class AbstractParser {
  constructor() {
    this.bindingPowers = {};
    const bindingClasses = this.bindingClasses();
    for (let i = 0; i < bindingClasses.length; i++) {
      for (const tokenType of bindingClasses[i]) {
        this.bindingPowers[tokenType] = 10 * i + 9;
      }
    }
    for (const tokenType of Object.keys(this.consequentMap)) {
      if (this.bindingPowers[tokenType] == undefined) {
        throw new Error(`Token ${tokenType} defined in consequentMap has no associated binding power.
          Make sure it is also listed in bindingClasses.`);
      }
    }
  }
  bindingPower(token) {
    if (this.bindingPowers[token.type] != undefined) {
      return this.bindingPowers[token.type];
    } else {
      throw new position_1.ParseError(`Unexpected token type ${token.type}.`, position_1.token2pos(token));
    }
  }
  parse(tokens, currentBindingPower, varMap, registeredNodes, dependsMap) {
    const token = tokens.consume();
    if (!token) {
      throw new position_1.ParseError(`Unexpected end of tokens.`, position_1.token2pos(tokens.last()));
    }
    const initialParselet = this.initialMap()[token.type];
    if (!initialParselet) {
      throw new position_1.ParseError(`Unexpected token type ${token.type}`, position_1.token2pos(token));
    }
    let left = initialParselet.parse(this, tokens, token, varMap, registeredNodes, dependsMap);
    while (true) {
      const next = tokens.peek();
      if (!next) {
        break;
      }
      const consequentParselet = this.consequentMap()[next.type];
      if (!consequentParselet) {
        break;
      }
      if (currentBindingPower >= this.bindingPower(next)) {
        break;
      }
      tokens.consume();
      left = consequentParselet.parse(this, tokens, left, next, varMap, registeredNodes, dependsMap);
    }
    return left;
  }
}
exports.AbstractParser = AbstractParser;
class Parser extends AbstractParser {
  initialMap() {
    return {
      NUMBER: new parselet_1.NumberParselet(),
      TRUE: new parselet_1.BooleanParselet(true),
      FALSE: new parselet_1.BooleanParselet(false),
      '(': new parselet_1.ParenParselet(),
      FUNCTION: new parselet_1.FunctionParselet(),
      CHOOSE1: new parselet_1.ChooseParselet(),
      IDENTIFIER: new parselet_1.IdentifierParselet()
    };
  }
  consequentMap() {
    return {
      '+': new parselet_1.BinaryOperatorParselet('+', 'left'),
      '-': new parselet_1.BinaryOperatorParselet('-', 'left'),
      '*': new parselet_1.BinaryOperatorParselet('*', 'left'),
      '/': new parselet_1.BinaryOperatorParselet('/', 'left'),
      '|': new parselet_1.BinaryOperatorParselet('|', 'right'),
      '&': new parselet_1.BinaryOperatorParselet('&', 'right')
    };
  }
  bindingClasses() {
    const classes = [['+', '-'], ['*', '/'], ['|', '&']];
    return classes;
  }
}
exports.Parser = Parser;

},

// src/parseResults.ts @8
8: function(__fusereq, exports, module){
exports.__esModule = true;
var state_1 = __fusereq(15);
var parser_1 = __fusereq(23);
exports.parseResults = state_1.StateField.define({
  create() {
    return emptyParseResults;
  },
  update(value, tr) {
    return tr.docChanged ? parseProgram(tr) : value;
  }
});
function parseProgram(tr) {
  const contents = tr.state.doc.toString();
  let varMap = {};
  let registeredNodes = {};
  let dependsMap = {};
  const ast = parser_1.parse(contents, varMap, registeredNodes, dependsMap);
  return {
    nodes: ast.nodes,
    parseErrors: ast.errors,
    varMap: varMap,
    registeredNodes: registeredNodes,
    dependsMap: dependsMap
  };
}
const emptyParseResults = {
  nodes: [],
  parseErrors: [],
  varMap: {},
  registeredNodes: {},
  dependsMap: {}
};

},

// src/typechecker.ts @25
25: function(__fusereq, exports, module){
var _1_, _2_;
var _3_, _4_;
var _5_, _6_;
var _7_, _8_;
var _9_, _10_;
var _11_, _12_;
var _13_, _14_;
var _15_, _16_;
var _17_, _18_;
var _19_, _20_;
var _21_, _22_;
var _23_, _24_;
function typecheck(nodes, registeredNodes) {
  const errors = nodes.map(n => typecheckNode(n, registeredNodes));
  return [].concat(...errors);
}
exports.typecheck = typecheck;
function typecheckNode(node, registeredNodes) {
  return checkerMap[node.nodeType].check(node, registeredNodes);
}
class TypeError {
  constructor(message, position) {
    this.message = message;
    this.position = position;
  }
}
exports.TypeError = TypeError;
class CheckNumber {
  check(node) {
    return [];
  }
}
class CheckBoolean {
  check(node) {
    return [];
  }
}
class CheckBinary {
  check(node, registeredNodes) {
    const errors = typecheckNode(node.left, registeredNodes).concat(typecheckNode(node.right, registeredNodes));
    if (((_2_ = (_1_ = node.left) === null || _1_ === void 0 ? void 0 : _1_.outputType) === null || _2_ === void 0 ? void 0 : _2_.valueType) != ((_4_ = (_3_ = node.right) === null || _3_ === void 0 ? void 0 : _3_.outputType) === null || _4_ === void 0 ? void 0 : _4_.valueType)) {
      errors.push(new TypeError("incompatible types for binary operator", node.pos));
    } else if (((_6_ = (_5_ = node.right) === null || _5_ === void 0 ? void 0 : _5_.outputType) === null || _6_ === void 0 ? void 0 : _6_.valueType) == 'boolean' && (node.operator != "|" && node.operator != '&')) {
      errors.push(new TypeError("incompatible operation for boolean operands", node.pos));
    } else if (((_8_ = (_7_ = node.right) === null || _7_ === void 0 ? void 0 : _7_.outputType) === null || _8_ === void 0 ? void 0 : _8_.valueType) == 'number' && (node.operator == "|" || node.operator == '&')) {
      errors.push(new TypeError("incompatible operation for number operands", node.pos));
    }
    node.outputType.valueType = (_10_ = (_9_ = node.left) === null || _9_ === void 0 ? void 0 : _9_.outputType) === null || _10_ === void 0 ? void 0 : _10_.valueType;
    return errors;
  }
}
class CheckFunction {
  check(node, registeredNodes) {
    let errors = [];
    const arg1Errors = typecheckNode(node.args[0], registeredNodes);
    errors = errors.concat(arg1Errors);
    if (node.args.length > 1) {
      const arg2Errors = typecheckNode(node.args[1], registeredNodes);
      errors = errors.concat(arg2Errors);
      if (((_12_ = (_11_ = node.args[0]) === null || _11_ === void 0 ? void 0 : _11_.outputType) === null || _12_ === void 0 ? void 0 : _12_.valueType) != ((_14_ = (_13_ = node.args[1]) === null || _13_ === void 0 ? void 0 : _13_.outputType) === null || _14_ === void 0 ? void 0 : _14_.valueType)) {
        errors.push(new TypeError("arguments must have same type", node.args[0].pos));
      }
    }
    const functionName = node.name;
    const argType = builtins[functionName].inputType;
    if (argType) {
      if (argType != 'any' && ((_16_ = (_15_ = node.args[0]) === null || _15_ === void 0 ? void 0 : _15_.outputType) === null || _16_ === void 0 ? void 0 : _16_.valueType) != argType) {
        errors.push(new TypeError("incompatible argument type for " + functionName, node.pos));
      }
    } else {
      errors.push(new TypeError("unknown function", node.pos));
    }
    return errors;
  }
}
class CheckChoose {
  check(node, registeredNodes) {
    let errors = [];
    const predicate = node.case.predicate;
    const consequent = node.case.consequent;
    const otherwise = node.otherwise;
    const predErrors = typecheckNode(predicate, registeredNodes);
    const consErrors = typecheckNode(consequent, registeredNodes);
    const otherErrors = typecheckNode(otherwise, registeredNodes);
    errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);
    if (((_18_ = (_17_ = consequent) === null || _17_ === void 0 ? void 0 : _17_.outputType) === null || _18_ === void 0 ? void 0 : _18_.valueType) != ((_20_ = (_19_ = otherwise) === null || _19_ === void 0 ? void 0 : _19_.outputType) === null || _20_ === void 0 ? void 0 : _20_.valueType)) {
      errors.push(new TypeError("Return types are not the same for both cases", consequent.pos));
      errors.push(new TypeError("Return types are not the same for both cases", otherwise.pos));
    }
    if (predicate.outputType.valueType != 'boolean') {
      errors.push(new TypeError("Predicate must return a boolean", predicate.pos));
    }
    node.outputType.valueType = (_22_ = (_21_ = consequent) === null || _21_ === void 0 ? void 0 : _21_.outputType) === null || _22_ === void 0 ? void 0 : _22_.valueType;
    return errors;
  }
}
class CheckVariable {
  check(node, registeredNodes) {
    let errors = [];
    const assignmentErrors = typecheckNode(node.assignment, registeredNodes);
    errors = errors.concat(assignmentErrors);
    node.outputType.valueType = (_24_ = (_23_ = node.assignment) === null || _23_ === void 0 ? void 0 : _23_.outputType) === null || _24_ === void 0 ? void 0 : _24_.valueType;
    return errors;
  }
}
class CheckIdentifier {
  check(node, registeredNodes) {
    let errors = [];
    let valueNode = registeredNodes[node.assignmentId].assignment;
    if (valueNode == undefined) {
      errors.push(new TypeError("This variable doesn't have a value", node.pos));
    }
    node.outputType.valueType = valueNode.outputType.valueType;
    return errors;
  }
}
const builtins = {
  "IsDefined": {
    inputType: 'any',
    resultType: 'boolean',
    status: "Definitely"
  },
  "Inverse": {
    inputType: 'number',
    resultType: 'number',
    status: "Variable"
  },
  "InputN": {
    inputType: 'number',
    resultType: 'number',
    status: "Maybe-Undefined"
  },
  "Sink": {
    inputType: 'any',
    resultType: 'any',
    status: "Variable"
  },
  "ParseOrderedPair": {
    inputType: 'number',
    resultType: 'pair',
    status: "Maybe-Undefined"
  },
  "X": {
    inputType: 'pair',
    resultType: 'number',
    status: "Variable"
  },
  "Y": {
    inputType: 'pair',
    resultType: 'number',
    status: "Variable"
  },
  "Not": {
    inputType: 'boolean',
    resultType: 'boolean',
    status: "Definitely"
  },
  "InputB": {
    inputType: 'boolean',
    resultType: 'boolean',
    status: "Maybe-Undefined"
  }
};
const checkerMap = {
  'Number': new CheckNumber(),
  'Boolean': new CheckBoolean(),
  'BinaryOperation': new CheckBinary(),
  'Function': new CheckFunction(),
  'Choose': new CheckChoose(),
  'VariableAssignment': new CheckVariable(),
  'Identifier': new CheckIdentifier()
};

},

// src/mudChecker.ts @26
26: function(__fusereq, exports, module){
var _1_, _2_;
var _3_, _4_;
var _5_, _6_;
var _7_, _8_;
var _9_, _10_;
var _11_, _12_;
var _13_;
exports.__esModule = true;
var findBase_1 = __fusereq(45);
function mudCheck(nodes, registeredNodes, dependsMap) {
  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));
  return [].concat(...errors);
}
exports.mudCheck = mudCheck;
function mudCheckNode(node, nodes, registeredNodes, dependsMap) {
  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);
}
class TypeError {
  constructor(message, position) {
    this.message = message;
    this.position = position;
  }
}
exports.TypeError = TypeError;
class MudCheckNumber {
  mudCheck(node) {
    return [];
  }
}
class MudCheckBoolean {
  mudCheck(node) {
    return [];
  }
}
class MudCheckBinary {
  mudCheck(node, nodes, registeredNodes, dependsMap) {
    const errors = mudCheckNode(node.left, nodes, registeredNodes, dependsMap).concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));
    if (((_2_ = (_1_ = node.right) === null || _1_ === void 0 ? void 0 : _1_.outputType) === null || _2_ === void 0 ? void 0 : _2_.status) == 'Maybe-Undefined' || ((_4_ = (_3_ = node.left) === null || _3_ === void 0 ? void 0 : _3_.outputType) === null || _4_ === void 0 ? void 0 : _4_.status) == 'Maybe-Undefined') {
      node.outputType = {
        status: 'Maybe-Undefined',
        valueType: (_6_ = (_5_ = node.left) === null || _5_ === void 0 ? void 0 : _5_.outputType) === null || _6_ === void 0 ? void 0 : _6_.valueType
      };
    } else {
      node.outputType = {
        status: 'Definitely',
        valueType: (_8_ = (_7_ = node.left) === null || _7_ === void 0 ? void 0 : _7_.outputType) === null || _8_ === void 0 ? void 0 : _8_.valueType
      };
    }
    if (node.operator == '|') {
      let intersection = [];
      let leftAsserts = node.left.outputType.asserts;
      let rightAsserts = node.right.outputType.asserts;
      for (let i = 0; i < leftAsserts.length; i++) {
        if (rightAsserts.find(e => e == leftAsserts[i])) {
          intersection.push(leftAsserts[i]);
        }
      }
      node.outputType.asserts = intersection;
    } else {
      let leftAsserts = node.left.outputType.asserts;
      let rightAsserts = node.right.outputType.asserts;
      let allAsserts = leftAsserts.concat(rightAsserts);
      node.outputType.asserts = allAsserts;
    }
    return errors;
  }
}
class MudCheckFunction {
  mudCheck(node, nodes, registeredNodes, dependsMap) {
    let errors = [];
    if (node.name == 'IsDefined') {
      let bases = findBase_1.findBases(node.args[0], dependsMap);
      node.outputType.asserts = node.outputType.asserts.concat(bases);
    }
    const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);
    errors = errors.concat(arg1Errors);
    if (node.args.length > 1) {
      const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);
      errors = errors.concat(arg2Errors);
    }
    const functionName = node.name;
    const returnType = builtins[functionName].resultType;
    if (functionName == 'Sink') {
      if (((_10_ = (_9_ = node.args[0]) === null || _9_ === void 0 ? void 0 : _9_.outputType) === null || _10_ === void 0 ? void 0 : _10_.status) == 'Maybe-Undefined') {
        errors.push(new TypeError("User facing content could be undefined.", node.args[0].pos));
      }
    }
    if (builtins[functionName].status == "Variable") {
      node.outputType.status = (_12_ = (_11_ = node.args[0]) === null || _11_ === void 0 ? void 0 : _11_.outputType) === null || _12_ === void 0 ? void 0 : _12_.status;
    } else {
      node.outputType.status = builtins[functionName].status;
    }
    node.outputType.valueType = returnType;
    return errors;
  }
}
class MudCheckChoose {
  mudCheck(node, nodes, registeredNodes, dependsMap) {
    let errors = [];
    const predicate = node.case.predicate;
    const consequent = node.case.consequent;
    const otherwise = node.otherwise;
    const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);
    const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);
    const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);
    errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);
    node.outputType.valueType = consequent.outputType.valueType;
    let consDef = false;
    let otherDef = false;
    let localAsserts = [];
    if (otherwise.outputType.status == 'Definitely') {
      otherDef = true;
    }
    if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'BinaryOperation') {
      consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);
    }
    if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'Function') {
      if (predicate.name == 'IsDefined') {
        consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);
      }
    }
    if (((_13_ = consequent) === null || _13_ === void 0 ? void 0 : _13_.outputType.status) == 'Definitely') {
      consDef = true;
    }
    if (consDef && otherDef) {
      node.outputType.status = 'Definitely';
    }
    return errors;
  }
}
class MudCheckVariable {
  mudCheck(node, nodes, registeredNodes, dependsMap) {
    let errors = [];
    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);
    errors = errors.concat(assignmentErrors);
    node.outputType.status = node.assignment.outputType.status;
    node.outputType.valueType = node.assignment.outputType.valueType;
    return errors;
  }
}
class MudCheckIdentifier {
  mudCheck(node, nodes, registeredNodes, dependsMap) {
    let errors = [];
    let valueNode = registeredNodes[node.assignmentId].assignment;
    if (valueNode == undefined) {
      errors.push(new TypeError("This variable doesn't have a value", node.pos));
    } else {
      node.outputType.status = valueNode.outputType.status;
      node.outputType.valueType = valueNode.outputType.valueType;
    }
    return errors;
  }
}
const builtins = {
  "IsDefined": {
    inputType: 'any',
    resultType: 'boolean',
    status: "Definitely"
  },
  "Inverse": {
    inputType: 'number',
    resultType: 'number',
    status: "Variable"
  },
  "InputN": {
    inputType: 'number',
    resultType: 'number',
    status: "Maybe-Undefined"
  },
  "Sink": {
    inputType: 'any',
    resultType: 'any',
    status: "Variable"
  },
  "ParseOrderedPair": {
    inputType: 'number',
    resultType: 'pair',
    status: "Maybe-Undefined"
  },
  "X": {
    inputType: 'pair',
    resultType: 'number',
    status: "Variable"
  },
  "Y": {
    inputType: 'pair',
    resultType: 'number',
    status: "Variable"
  },
  "Not": {
    inputType: 'boolean',
    resultType: 'boolean',
    status: "Definitely"
  },
  "InputB": {
    inputType: 'boolean',
    resultType: 'boolean',
    status: "Maybe-Undefined"
  }
};
const mudCheckerMap = {
  'Number': new MudCheckNumber(),
  'Boolean': new MudCheckBoolean(),
  'BinaryOperation': new MudCheckBinary(),
  'Function': new MudCheckFunction(),
  'Choose': new MudCheckChoose(),
  'VariableAssignment': new MudCheckVariable(),
  'Identifier': new MudCheckIdentifier()
};
function handleCheck(consequent, dependsMap, asserts) {
  let consBases = findBase_1.findBases(consequent, dependsMap);
  let contained = true;
  for (let i = 0; i < consBases.length; i++) {
    if (!asserts.find(e => e == consBases[i])) {
      contained = false;
    }
  }
  return contained;
}

},

// src/miniCL.ts @6
6: function(__fusereq, exports, module){
exports.__esModule = true;
var lexer_1 = __fusereq(24);
var typechecker_1 = __fusereq(25);
var mudChecker_1 = __fusereq(26);
var parseResults_1 = __fusereq(8);
exports.miniCL = {
  startState: function () {
    return {
      line: 1,
      stack: ['default']
    };
  },
  token: function (stream, state) {
    if (stream.eatSpace()) return null;
    return token2tag(lexer_1.getDefaultToken(stream, state));
  }
};
exports.miniCLLinter = () => view => {
  const results = view.state.field(parseResults_1.parseResults);
  const mudErrors = mudChecker_1.mudCheck(results.nodes, results.registeredNodes, results.dependsMap);
  const typeErrors = typechecker_1.typecheck(results.nodes, results.registeredNodes);
  const parseDiagnostics = results.parseErrors.map(makeDiagnostic(view));
  const typeDiagnostics = typeErrors.map(makeDiagnostic(view));
  const mudDiagnostics = mudErrors.map(makeDiagnostic(view, 'warning'));
  return parseDiagnostics.concat(typeDiagnostics).concat(mudDiagnostics);
};
const makeDiagnostic = (view, severity = 'error') => error => {
  return {
    from: firstLine(view, error) + error.position.first_column,
    to: lastLine(view, error) + error.position.last_column,
    message: error.message,
    severity: severity
  };
};
function firstLine(view, error) {
  return view.state.doc.line(error.position.first_line).from;
}
function lastLine(view, error) {
  return view.state.doc.line(error.position.last_line).from;
}
function token2tag(token) {
  switch (token) {
    case 'NUMBER':
      return 'number';
    case 'TRUE':
      return 'boolean';
    case 'FALSE':
      return 'boolean';
    case '(':
    case ')':
      return 'bracket';
    case '+':
    case '-':
    case '*':
    case '/':
    case '|':
    case '&':
    case '=':
      return 'operator';
    case 'COMMENT':
      return 'comment';
    case 'CHOOSE1':
    case 'CHOOSE2':
      return 'choose';
    case 'FUNCTION':
      return 'function';
    case 'IDENTIFIER':
      return 'variable';
    case 'ERROR':
      return 'error';
    default:
      return undefined;
  }
}

},

// src/visualization.ts @38
38: function(__fusereq, exports, module){
var _1_;
exports.__esModule = true;
var d3_hierarchy_1 = __fusereq(46);
var d3_selection_1 = __fusereq(47);
var d3_shape_1 = __fusereq(48);
function visualize(nodes) {
  const margin = {
    top: 20,
    right: 90,
    bottom: 20,
    left: 90
  };
  const height = 300 - margin.top - margin.bottom;
  const width = 500 - margin.left - margin.right;
  d3_selection_1.select('#viz').selectAll('svg').remove();
  const viz = d3_selection_1.select('#viz').append('svg');
  viz.selectAll('*').remove();
  viz.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);
  const root = {
    nodeType: 'Program',
    children: nodes
  };
  const treemap = d3_hierarchy_1.tree().size([height, width]).separation(() => 1);
  const treelayout = d3_hierarchy_1.hierarchy(root, getChildren);
  const tree = treemap(treelayout);
  const g = viz.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`).attr("font-family", "sans-serif").attr("font-size", 12);
  const link = g.selectAll('path.link').data(tree.links());
  const linkEnter = link.enter().append('path', 'g');
  linkEnter.attr('class', 'link').attr('fill', 'none').attr("stroke-opacity", 0.4).attr('stroke', '#555').attr("stroke-width", 1.5).attr('d', connection);
  const node = g.selectAll('g.node').data(tree.descendants());
  const nodeEnter = node.enter().append('g');
  nodeEnter.attr('class', 'node').attr('transform', d => `translate(${d.y}, ${d.x})`);
  nodeEnter.append('circle').attr("fill", getFill).attr('r', '2.5').attr('stroke-width', 10);
  nodeEnter.append('text').attr("dy", "0.31em").attr("x", d => d.children ? -8 : 8).attr("text-anchor", d => d.children ? "end" : "start").attr('fill', d => isUndefined(d) ? '#fc6666' : 'black').style("fill-opacity", 1).call(getTextBox).datum(d => d.data).text(getText).clone(true).lower().attr("stroke", "white");
  nodeEnter.filter((d, i) => isUndefined(d)).call(yep).insert('rect', 'text').attr("x", function (d) {
    return d.bbox.x;
  }).attr("y", function (d) {
    return d.bbox.y;
  }).attr("width", function (d) {
    return d.bbox.width;
  }).attr("height", function (d) {
    return d.bbox.height;
  }).attr('fill', 'black');
}
exports.visualize = visualize;
function getTextBox(selection) {
  selection.each(function (d) {
    d.bbox = this.getBBox();
  });
}
function yep(selection) {}
const connection = d3_shape_1.linkHorizontal().x(d => d.y).y(d => d.x);
function getChildren(node) {
  var children = [];
  switch (node.nodeType) {
    case 'Program':
      children = node.children;
      break;
    case 'Function':
      children = node.args;
      break;
    case 'Choose':
      children = [node.case.predicate, node.case.consequent, node.otherwise];
      break;
    case 'BinaryOperation':
      children = [node.left, node.right];
      break;
    case 'VariableAssignment':
      children = [node.assignment];
      break;
    default:
      children = [];
  }
  return children;
}
function getText(node) {
  var text = "";
  switch (node.nodeType) {
    case 'Program':
      text = '';
      break;
    case 'Function':
      text = node.name;
      break;
    case 'Choose':
      text = "choose";
      break;
    case 'BinaryOperation':
      text = node.operator;
      break;
    case 'VariableAssignment':
      text = node.name;
      break;
    case 'Identifier':
      text = node.name;
      break;
    case 'Number':
      text = node.value.toString();
      break;
    case 'Boolean':
      text = node.value.toString();
      break;
    default:
      text = "";
  }
  return text;
}
function getFill(node) {
  if (isUndefined(node)) {
    return '#fc6666';
  }
  if (node.children) {
    return '#555';
  } else {
    return '#999';
  }
}
function isUndefined(d) {
  return ((_1_ = d.data.outputType) === null || _1_ === void 0 ? void 0 : _1_.status) === 'Maybe-Undefined';
}

},

// src/devTools.ts @9
9: function(__fusereq, exports, module){
exports.__esModule = true;
var lang_json_1 = __fusereq(37);
var fold_1 = __fusereq(28);
var visualization_1 = __fusereq(38);
var basic_setup_1 = __fusereq(4);
var lint_1 = __fusereq(5);
var parseResults_1 = __fusereq(8);
function updateDevTools(tr) {
  const results = tr.state.field(parseResults_1.parseResults);
  const astJSON = JSON.stringify(results.nodes, null, 2);
  replaceContents(astViewer, astJSON);
  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);
  replaceContents(dependsViewer, dependsJSON);
  visualization_1.visualize(results.nodes);
}
exports.updateDevTools = updateDevTools;
function newJSONViewerState() {
  return basic_setup_1.EditorState.create({
    extensions: [basic_setup_1.basicSetup, lang_json_1.json(), lint_1.linter(lang_json_1.jsonParseLinter()), basic_setup_1.EditorView.editable.of(false)]
  });
}
let astViewer = new basic_setup_1.EditorView({
  state: newJSONViewerState(),
  parent: document.querySelector("#ast-json")
});
let dependsViewer = new basic_setup_1.EditorView({
  state: newJSONViewerState(),
  parent: document.querySelector("#depends-json")
});
function replaceContents(editor, contents) {
  const update = editor.state.update({
    changes: {
      from: 0,
      to: editor.state.doc.length,
      insert: contents
    }
  });
  editor.update([update]);
  fold_1.foldAll(editor);
}

},

// src/index.ts @1
1: function(__fusereq, exports, module){
exports.__esModule = true;
var basic_setup_1 = __fusereq(4);
var lint_1 = __fusereq(5);
var miniCL_1 = __fusereq(6);
var stream_parser_1 = __fusereq(7);
var parseResults_1 = __fusereq(8);
var devTools_1 = __fusereq(9);
__fusereq(10);
__fusereq(12);
let miniCLEditor = new basic_setup_1.EditorView({
  state: basic_setup_1.EditorState.create({
    extensions: [basic_setup_1.basicSetup, stream_parser_1.StreamLanguage.define(miniCL_1.miniCL), parseResults_1.parseResults, lint_1.linter(miniCL_1.miniCLLinter())]
  }),
  dispatch: updateOutput,
  parent: document.querySelector("#miniCL-editor")
});
function updateOutput(tr) {
  miniCLEditor.update([tr]);
  devTools_1.updateDevTools(tr);
}

}
})
//# sourceMappingURL=app.js.map