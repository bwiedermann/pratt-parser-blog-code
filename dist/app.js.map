{"version":3,"sources":["src/index.ts","src/miniCL.ts","src/parseResults.ts","src/devTools.ts","src/parser.ts","src/lexer.ts","src/typechecker.ts","src/mudChecker.ts","src/visualization.ts","src/findBase.ts","src/parselet.ts","src/position.ts","src/tokenstream.ts"],"names":["miniCLEditor","basic_setup_1","state","create","extensions","stream_parser_1","define","miniCL_1","parseResults_1","lint_1","dispatch","updateOutput","parent","document","querySelector","tr","update","devTools_1","startState","line","stack","token","stream","eatSpace","token2tag","lexer_1","view","results","field","dependsMap","mudErrors","mudChecker_1","nodes","registeredNodes","typeErrors","typechecker_1","parseDiagnostics","parseErrors","map","makeDiagnostic","typeDiagnostics","mudDiagnostics","concat","severity","error","from","firstLine","position","first_column","to","lastLine","last_column","message","doc","first_line","last_line","undefined","state_1","emptyParseResults","value","docChanged","parseProgram","contents","toString","varMap","ast","parser_1","errors","astJSON","JSON","stringify","replaceContents","astViewer","dependsJSON","dependsViewer","visualization_1","lang_json_1","editable","of","newJSONViewerState","editor","changes","length","insert","fold_1","text","tokens","tokenstream_1","parser","Parser","peek","push","parse","e","constructor","bindingPowers","bindingClasses","i","tokenType","Object","keys","consequentMap","Error","bindingPower","type","position_1","currentBindingPower","consume","last","initialParselet","initialMap","left","next","consequentParselet","AbstractParser","NUMBER","NumberParselet","TRUE","BooleanParselet","FALSE","ParenParselet","FUNCTION","FunctionParselet","CHOOSE1","ChooseParselet","IDENTIFIER","IdentifierParselet","BinaryOperatorParselet","classes","split","string","eol","getToken","emitToken","makeEmit","fullToken","start","pos","getDefaultToken","current","match","n","typecheckNode","node","checkerMap","nodeType","check","right","outputType","valueType","TypeError","operator","arg1Errors","args","arg2Errors","functionName","name","argType","exports","inputType","resultType","predicate","case","consequent","otherwise","predErrors","consErrors","otherErrors","assignmentErrors","assignment","valueNode","assignmentId","status","constType","CheckNumber","CheckBoolean","CheckBinary","CheckFunction","CheckChoose","CheckVariable","CheckIdentifier","mudCheckNode","mudCheckerMap","mudCheck","intersection","leftAsserts","asserts","rightAsserts","find","allAsserts","bases","findBase_1","result","evaluate","consDef","otherDef","handleCheck","nodeId","MudCheckNumber","MudCheckBoolean","MudCheckBinary","MudCheckFunction","MudCheckChoose","MudCheckVariable","MudCheckIdentifier","contained","consAsserts","consConsContained","consOtherContained","consBases","margin","top","bottom","height","width","select","selectAll","remove","viz","append","attr","root","children","treemap","tree","size","separation","treelayout","hierarchy","getChildren","g","link","data","links","linkEnter","enter","connection","descendants","nodeEnter","d","y","x","getFill","isUndefined","style","call","getTextBox","datum","getText","clone","lower","filter","yep","bbox","selection","each","getBBox","linkHorizontal","baseMap","findBase","baseList","leftList","findBases","rightList","otherBases","BaseNumber","BaseBoolean","BaseBinary","BaseFunction","BaseChoose","BaseVariableAssignment","BaseIdentifier","_parser","_tokens","id","newNode","parseFloat","_token","exp","expectToken","associativity","ConsequentParselet","arg1","arg2","varParselet","VariableAssignmentParselet","end","t","expectedType","actual"],"mappings":"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","file":"","sourcesContent":["import {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {Transaction} from \"@codemirror/state\"\nimport {linter} from \"@codemirror/lint\"\nimport {miniCL, miniCLLinter} from \"./miniCL\"\nimport {StreamLanguage} from \"@codemirror/stream-parser\"\nimport {parseResults} from \"./parseResults\"\nimport {updateDevTools} from \"./devTools\"\nimport \"./styles.css\"\nimport \"./desmos_icons.css\"\n\n// Create the CodeMirror miniCL editor and add it to the document.\nlet miniCLEditor = new EditorView({\n  state: EditorState.create({\n    extensions: [\n      basicSetup,                     // https://codemirror.net/6/docs/ref/#basic-setup\n      StreamLanguage.define(miniCL),  // syntax coloring for miniCL\n      parseResults,                   // field that holds the results of parsing\n      linter(miniCLLinter())          // error-checking for miniCL\n    ],\n  }),\n  dispatch: updateOutput,\n  parent: document.querySelector(\"#miniCL-editor\")\n})\n\n// When the content changes, update the editor and the dev tools\nfunction updateOutput(tr: Transaction) {\n  miniCLEditor.update([tr]);\n  updateDevTools(tr);\n}\n","import {StreamParser, StringStream} from \"@codemirror/stream-parser\"\nimport {Diagnostic} from \"@codemirror/lint\"\nimport {EditorView} from \"@codemirror/view\"\nimport {State, getDefaultToken} from './lexer'\nimport {ParseError} from './position'\nimport {typecheck} from './typechecker';\nimport {mudCheck} from './mudChecker';\nimport {parseResults} from './parseResults';\n\n/**\n * The extension for our language\n */\nexport const miniCL: StreamParser<State> = {\n  startState: function (): State {\n    return {line: 1, stack: ['default']};\n  },\n  token: function (stream: StringStream, state: State): string | undefined {\n    if (stream.eatSpace()) return null;\n    return token2tag(getDefaultToken(stream, state));\n  }\n};\n\n/**\n * The linter for our language\n */\n export const miniCLLinter = () => (view: EditorView): Diagnostic[] => {\n\n  // Get the result types\n  const results = view.state.field(parseResults);\n\n  let dependsMap: {[key: string]: string[]} = {};\n  // Error checking\n  const mudErrors = mudCheck(results.nodes, results.registeredNodes, dependsMap);\n  const typeErrors = typecheck(results.nodes, results.registeredNodes);\n\n  // Create a diagnostic for each kind of error\n  const parseDiagnostics = results.parseErrors.map(makeDiagnostic(view));\n  const typeDiagnostics = typeErrors.map(makeDiagnostic(view));\n  const mudDiagnostics = mudErrors.map(makeDiagnostic(view, 'warning'));\n\n  return parseDiagnostics.concat(typeDiagnostics).concat(mudDiagnostics);\n}\n\n/**\n * Create a diagnostic from an error\n */\nconst makeDiagnostic = (view: EditorView, severity: 'error' | 'info' | 'warning' = 'error') => \n  (error): Diagnostic => {\n    return {\n      from: firstLine(view, error) + error.position.first_column,\n      to: lastLine(view, error) + error.position.last_column,\n      message: error.message,\n      severity: severity\n    }\n}\n\n/**\n * @returns the line number for the start of the error\n */\nfunction firstLine(view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.first_line).from;\n}\n\n/**\n * @returns the line number for the end of the error\n */\nfunction lastLine (view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.last_line).from;    \n}\n\n/**\n * Convert our bespoke parser Token type to a token type that is recognized by CodeMirror\n */\nfunction token2tag(token: string): string | undefined {\n  switch (token) {\n    case 'NUMBER':\n      return 'number';\n\n    case 'TRUE':\n      return 'boolean';\n\n    case 'FALSE':\n      return 'boolean';\n\n    case '(':\n    case ')':\n      return 'bracket';\n\n    case '+':\n    case '-':\n    case '*':\n    case '/':\n    case '|':\n    case '&':\n    case '=':\n      return 'operator';\n\n    case 'COMMENT':\n      return 'comment';\n\n    case 'CHOOSE1':\n    case 'CHOOSE2':\n      return 'choose';\n\n    case 'FUNCTION':\n      return 'function';\n\n    case 'IDENTIFIER':\n      return 'variable';\n\n    case 'ERROR':\n      return 'error';\n\n    default:\n      return undefined;\n  }\n}\n","import {StateField} from \"@codemirror/state\"\nimport {Transaction} from \"@codemirror/state\"\nimport * as AST from './ast';\nimport {parse} from './parser';\nimport {ParseError} from './position';\n\n/**\n * A State field that holds the results of parsing\n */\nexport const parseResults: StateField<ParseResults> = StateField.define({\n  create() { return emptyParseResults },\n  update(value, tr) { return tr.docChanged ? parseProgram(tr) : value }\n})\n\n/**\n * Parse the program created from a transaction, returning a ParseResults object\n */\nfunction parseProgram(tr: Transaction) : ParseResults {\n  const contents = tr.state.doc.toString()\n\n  let varMap: {[key: string]: string} = {}\n  let registeredNodes: {[key: string]: AST.Node} = {}\n  const ast = parse(contents, varMap, registeredNodes)\n\n  return {\n    nodes: ast.nodes,\n    parseErrors: ast.errors,\n    varMap: varMap,\n    registeredNodes: registeredNodes\n  }\n}\n\n/**\n * Type that describes the results of parsing\n */\nexport type ParseResults = {\n  nodes: AST.Node[];\n  parseErrors: ParseError[];\n  varMap: {[key: string]: string};\n  registeredNodes: {[key: string]: AST.Node};\n}\n\n/**\n * Can be used as the initial results of parsing\n */\nconst emptyParseResults: ParseResults = {\n  nodes: [],\n  parseErrors: [],\n  varMap: {},\n  registeredNodes: {}\n}\n","import {Transaction} from \"@codemirror/state\"\nimport {json, jsonParseLinter} from \"@codemirror/lang-json\"\nimport {foldAll} from \"@codemirror/fold\"\nimport { visualize } from \"./visualization\"\nimport {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {linter} from \"@codemirror/lint\"\nimport { parseResults } from \"./parseResults\"\n\n/**\n * Given a transaction, update the developer tools\n */\n export function updateDevTools(tr: Transaction) {\n  const results = tr.state.field(parseResults)\n\n  // Display JSON for AST\n  const astJSON = JSON.stringify(results.nodes, null, 2)\n  replaceContents(astViewer, astJSON);\n\n  // Display JSON for depends map\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\n  replaceContents(dependsViewer, dependsJSON);\n\n  // Draw the AST\n  visualize(results.nodes);\n}\n\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\nfunction newJSONViewerState(): EditorState {\n  return EditorState.create({\n    extensions: [\n      basicSetup,\n      json(),\n      linter(jsonParseLinter()),\n      EditorView.editable.of(false),\n    ],\n  })\n}\n\n// JSON viewer for AST\nlet astViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\"),\n});\n\n// JSON viewer for depends map\nlet dependsViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#depends-json\"),\n});\n\n/**\n * Replace the entire contents of an editor\n */\nfunction replaceContents(editor: EditorView, contents: string) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  foldAll(editor);  // By default, fold all levels\n}\n","import * as Parselet from './parselet';\nimport {Token, TokenType} from './lexer';\nimport {TokenStream} from './tokenstream';\nimport {ParseError, token2pos} from './position';\nimport * as AST from './ast';\n\nexport function parse(text: string,\n                      varMap: {[key: string]: string},\n                      registeredNodes: {[key: string]: AST.Node}): \n                      {nodes: AST.Node[]; errors: ParseError[]} {\n  const nodes: AST.Node[] = [];\n\n  const tokens = new TokenStream(text);\n  const parser = new Parser();\n  while (tokens.peek()) {\n    try {\n      nodes.push(parser.parse(tokens, 0, varMap, registeredNodes));\n    } catch (e) {\n      return {\n        nodes,\n        errors: [e],\n      };\n    }\n  }\n\n  return {nodes, errors: []};\n}\n\nexport abstract class AbstractParser {\n  public bindingPowers: {[tokenType in TokenType]: number};\n\n  protected abstract initialMap(): Partial<\n    {[K in TokenType]: Parselet.InitialParselet}\n  >;\n  protected abstract consequentMap(): Partial<\n    {[K in TokenType]: Parselet.ConsequentParselet}\n  >;\n  protected abstract bindingClasses(): TokenType[][];\n\n  constructor() {\n    this.bindingPowers = {} as any;\n\n    const bindingClasses = this.bindingClasses();\n    for (let i = 0; i < bindingClasses.length; i++) {\n      for (const tokenType of bindingClasses[i]) {\n        this.bindingPowers[tokenType] = 10 * i + 9;\n      }\n    }\n\n    for (const tokenType of Object.keys(this.consequentMap) as TokenType[]) {\n      if (this.bindingPowers[tokenType] == undefined) {\n        throw new Error(\n          `Token ${tokenType} defined in consequentMap has no associated binding power.\n          Make sure it is also listed in bindingClasses.`,\n        );\n      }\n    }\n  }\n\n  bindingPower(token: Token): number {\n    if (this.bindingPowers[token.type] != undefined) {\n      return this.bindingPowers[token.type];\n    } else {\n      throw new ParseError(\n        `Unexpected token type ${token.type}.`,\n        token2pos(token),\n      );\n    }\n  }\n\n  parse(tokens: TokenStream,\n        currentBindingPower: number,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node}): AST.Node {\n    const token = tokens.consume();\n    if (!token) {\n      throw new ParseError(\n        `Unexpected end of tokens.`,\n        token2pos(tokens.last()),\n      );\n    }\n\n    const initialParselet = this.initialMap()[token.type];\n\n    if (!initialParselet) {\n      throw new ParseError(\n        `Unexpected token type ${token.type}`,\n        token2pos(token),\n      );\n    }\n\n    let left = initialParselet.parse(this, tokens, token, varMap, registeredNodes);\n\n    while (true) {\n      const next = tokens.peek();\n      if (!next) {\n        break;\n      }\n\n      const consequentParselet = this.consequentMap()[next.type];\n\n      if (!consequentParselet) {\n        break;\n      }\n\n      if (currentBindingPower >= this.bindingPower(next)) {\n        break;\n      }\n\n      tokens.consume();\n      left = consequentParselet.parse(this, tokens, left, next, varMap, registeredNodes);\n    }\n\n    return left;\n  }\n}\n\nexport class Parser extends AbstractParser {\n  initialMap() {\n    return {\n      NUMBER: new Parselet.NumberParselet(),\n      TRUE: new Parselet.BooleanParselet(true),\n      FALSE: new Parselet.BooleanParselet(false),\n      '(': new Parselet.ParenParselet(),\n      FUNCTION: new Parselet.FunctionParselet(),\n      CHOOSE1: new Parselet.ChooseParselet(),\n      IDENTIFIER: new Parselet.IdentifierParselet()\n    };\n  }\n\n  consequentMap() {\n    return {\n      '+': new Parselet.BinaryOperatorParselet('+', 'left'),\n      '-': new Parselet.BinaryOperatorParselet('-', 'left'),\n      '*': new Parselet.BinaryOperatorParselet('*', 'left'),\n      '/': new Parselet.BinaryOperatorParselet('/', 'left'),\n      '|': new Parselet.BinaryOperatorParselet('|', 'right'),\n      '&': new Parselet.BinaryOperatorParselet('&', 'right')\n    };\n  }\n\n  bindingClasses() {\n    const classes: TokenType[][] = [['+', '-'], ['*', '/'], ['|', '&']];\n    return classes;\n  }\n}\n","import {StringStream} from \"@codemirror/stream-parser\"\n\nexport function getTokens(text: string): Token[] {\n  const tokens: Token[] = [];\n  const state: State = {line: 1, stack: ['default']};\n\n  for (const line of text.split('\\n')) {\n    const stream = new StringStream();\n    stream.string = line;\n    while (!stream.eol()) {\n      const token = getToken(stream, state);\n      const emitToken = makeEmit(stream, state);\n      const fullToken = emitToken(token as TokenType);\n      if (token != undefined) {\n        tokens.push(fullToken);\n      }\n\n      if (stream.start == stream.pos) {\n        throw new Error(\n          `getToken failed to advance stream at position ${\n            stream.pos\n          } in string ${stream.string}`,\n        );\n      }\n      stream.start = stream.pos;\n    }\n\n    state.line += 1;\n  }\n\n  return tokens;\n}\n\nexport function getToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  //Built for codeMirror streams API\n  //State is a stack of states\n  switch (state.stack[state.stack.length - 1]) {\n    default:\n      return getDefaultToken(stream, state);\n  }\n}\n\nfunction makeEmit(stream: StringStream, state: State) {\n  return function emitToken(type: TokenType): Token {\n    return {\n      type,\n      first_column: stream.start,\n      last_column: stream.pos,\n      line: state.line,\n      text: stream.current(),\n    };\n  };\n}\n\nexport function getDefaultToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  // const emitToken = makeEmit(stream, state);\n  if (stream.eatSpace()) {\n    // skip whitespace\n    return undefined;\n  }\n  \n  // parse both negative and positive numbers\n  if (stream.match(/-?[0-9]+(\\.[0-9]+)?/)) {\n    return 'NUMBER';\n  }\n\n  if (stream.match(/\\+/)) {\n    return '+';\n  }\n\n  // NOTE: when subtracting a positive number, make sure to use parentheses around it\n  // e.g. 1-(2) will work but 1-2 won't\n  if (stream.match(/\\-/)) {\n    return '-';\n  }\n\n  if (stream.match(/\\*/)) {\n    return '*';\n  }\n\n  if (stream.match(/\\//)) {\n    return '/';\n  }\n\n  if (stream.match(/\\|/)) {\n    return '|';\n  }\n\n  if (stream.match(/\\&/)) {\n    return '&';\n  }\n\n  if (stream.match(/\\(/)) {\n    return '(';\n  }\n\n  if (stream.match(/\\)/)) {\n    return ')';\n  }\n\n  if (stream.match(/\\=/)) {\n    return '=';\n  }\n\n  if (stream.match(/True/)) {\n    return 'TRUE';\n  }\n\n  if (stream.match(/False/)) {\n    return 'FALSE';\n  }\n\n  if (stream.match(/#/)) {\n    if (!stream.match(/\\n/)) {\n      // comment lasts till end of line\n      stream.match(/.*/); // if no eol encountered, comment lasts till end of file\n    }\n    return 'COMMENT';\n  }\n\n  // keyword WHEN begins a choose node\n  if (stream.match(/WHEN/)) {\n    return 'CHOOSE1';\n  }\n\n  // keyword OTHERWISE is used in a choose node\n  if (stream.match(/OTHERWISE/)) {\n    return 'CHOOSE2';\n  }\n\n  // functions start with a capital letter and do not contain numbers\n  if (stream.match(/[A-Z]([a-z|A-Z])*/)) {\n    return 'FUNCTION';\n  }\n\n  // The form of a valid identifier is: a lower-case alphabetic character,\n  // followed by zero or more alpha characters.\n  if (stream.match(/[a-z]([a-z|A-Z])*/)) {\n    return 'IDENTIFIER';\n  }\n  \n  stream.next();\n  return 'ERROR';\n}\n\nexport type BinaryOperationTokenType =\n  | '+'\n  | '-'\n  | '*'\n  | '/'\n  | '|' // this is an or\n  | '&' // this is an and\n\nexport type TokenType =\n  | BinaryOperationTokenType\n  | 'NUM'\n  | 'TRUE'\n  | 'FALSE'\n  | '('\n  | ')'\n  | 'COMMENT'\n  | 'ERROR'\n  | 'FUNCTION'\n  | 'IDENTIFIER'\n  | 'CHOOSE1'\n  | 'CHOOSE2'\n  | '='\n\nexport interface Token<T extends TokenType = TokenType> {\n  type: T;\n  text: string;\n  line: number;\n  first_column: number;\n  last_column: number;\n}\n\ntype Mode = 'default';\n\nexport interface State {\n  stack: Mode[];\n  line: number;\n}\n","import {Position} from './position';\nimport * as AST from './ast';\n\nexport function typecheck(nodes: AST.Node[], registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  const errors = nodes.map(n => typecheckNode(n, registeredNodes));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction typecheckNode(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  return checkerMap[node.nodeType].check(node, registeredNodes);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface TypeChecker {\n  check(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[];\n}\n\n// A number requires no type checking\nclass CheckNumber implements TypeChecker {\n  check(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\n// A boolean requires no type checking\nclass CheckBoolean implements TypeChecker {\n  check(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\nclass CheckBinary implements TypeChecker {\n  check(node: AST.BinaryOperationNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    const errors: TypeError[] = typecheckNode(node.left, registeredNodes).concat(typecheckNode(node.right, registeredNodes));\n    \n    // Check if left and right are the same type (both numbers or both booleans)\n    if (node.left?.outputType?.valueType != node.right?.outputType?.valueType) {\n      errors.push(new TypeError(\"incompatible types for binary operator\", node.pos));\n    }\n    // Check if incorrect combination of operator and operands\n    else if (node.right?.outputType?.valueType == 'boolean' && (node.operator != \"|\" && node.operator != '&')) {\n      errors.push(new TypeError(\"incompatible operation for boolean operands\", node.pos));\n    }\n    else if (node.right?.outputType?.valueType == 'number' && (node.operator == \"|\" || node.operator == '&')) {\n      errors.push(new TypeError(\"incompatible operation for number operands\", node.pos));\n    }\n\n    // Since we've already checked the left and right are the same type\n    // we can set the overall value type to the left\n    node.outputType.valueType = node.left?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckFunction implements TypeChecker {\n  check(node: AST.FunctionNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First typecheck the argument(s)\n    const arg1Errors = typecheckNode(node.args[0], registeredNodes);\n    errors = errors.concat(arg1Errors);\n    if (node.args.length > 1) {\n      const arg2Errors = typecheckNode(node.args[1], registeredNodes);\n      errors = errors.concat(arg2Errors);\n      // Both arguments must have the same type\n      if (node.args[0]?.outputType?.valueType != node.args[1]?.outputType?.valueType) {\n        errors.push(new TypeError(\"arguments must have same type\", node.args[0].pos));\n      }\n    }\n\n    const functionName = node.name\n    const argType = builtins[functionName].inputType;\n    // Refer to the builtins dictionary below\n    node.outputType.valueType = builtins[functionName].resultType;\n\n    // If this is a builtin function, check it has the correct argument types\n    // otherwise throw an error (we don't know what this function is)\n    if (argType) {\n      // Assume both arguments are the same type (see error produced above)\n      if (argType != 'any' && node.args[0]?.outputType?.valueType != argType) {\n        errors.push(new TypeError(\"incompatible argument type for \" + functionName, node.pos));\n      }\n      \n    } else {\n      errors.push(new TypeError(\"unknown function\", node.pos));\n    }    \n\n    return errors;\n  }\n}\n\nclass CheckChoose implements TypeChecker {\n  check(node: AST.ChooseNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n\n    // First typecheck the inner nodes\n    const predErrors = typecheckNode(predicate, registeredNodes);\n    const consErrors = typecheckNode(consequent, registeredNodes);\n    const otherErrors = typecheckNode(otherwise, registeredNodes);\n    errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n    // Check that the return types are the same for both consequent and otherwise\n    if (consequent?.outputType?.valueType != otherwise?.outputType?.valueType) {\n      errors.push(new TypeError(\"Return types are not the same for both cases\", consequent.pos));\n      errors.push(new TypeError(\"Return types are not the same for both cases\", otherwise.pos));\n    }\n\n    // Check that the predicate returns a boolean\n    if (predicate.outputType.valueType != 'boolean') {\n      errors.push(new TypeError(\"Predicate must return a boolean\", predicate.pos));\n    }\n\n    // Since we've already checked the consequent and otherwise statements are the same type\n    // we can set the overall value type to the consequent\n    node.outputType.valueType = consequent?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckVariable implements TypeChecker {\n  check(node: AST.VariableAssignmentNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First typecheck the assignment node\n    const assignmentErrors = typecheckNode(node.assignment, registeredNodes);\n    errors = errors.concat(assignmentErrors);\n\n    node.outputType.valueType = node.assignment?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckIdentifier implements TypeChecker {\n  check(node: AST.IdentifierNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Grab the node the identifier was previously assigned to\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    }\n\n    node.outputType.valueType = valueNode.outputType.valueType;\n\n    return errors;\n  }\n}\n\n// Dictionary of builtin functions that gives the necessary information for a given function name \nexport const builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string, constType: string} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\", constType: \"Constant\"},\n  \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\", constType: \"Non-Constant\"},\n  \"Sink\": {inputType: 'any', resultType: 'any', status: \"Variable\", constType: \"Constant\"},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Variable\", constType: \"Constant\"},\n  \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\", constType: \"Constant\"},\n  \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\", constType: \"Non-Constant\"},\n  \"Sqrt\": {inputType: 'number', resultType: 'number', status: \"Variable\", constType: \"Constant\"}\n}\n\nconst checkerMap: Partial<{[K in AST.NodeType]: TypeChecker}> = {\n  'Number' : new CheckNumber(),\n  'Boolean' : new CheckBoolean(),\n  'BinaryOperation' : new CheckBinary(),\n  'Function' : new CheckFunction(),\n  'Choose': new CheckChoose(),\n  'VariableAssignment': new CheckVariable(),\n  'Identifier': new CheckIdentifier()\n}","import {Position} from './position';\nimport * as AST from './ast';\nimport {findBases} from './findBase';\nimport {builtins} from './typechecker';\n\n/*\n  The function mudCheck manipulates the status of each node's outputType.\n  It produces type errors based on that status.\n  For example, it will produce a warning when the author tries to use \n  a maybe-undefined node in a Sink function, which is user-facing.\n  It also produces a warning when the author tries to compute a \n  definitely undefined operation (e.g. Inverse(0)).\n*/\n\nexport function mudCheck(nodes: AST.Node[], \n                        registeredNodes: {[key: string]: AST.Node},\n                        dependsMap: {[key: string]: string[]}): TypeError[] {\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction mudCheckNode(node: AST.Node, \n                    nodes: AST.Node[], \n                    registeredNodes: {[key: string]: AST.Node},\n                    dependsMap: {[key: string]: string[]}): TypeError[] {\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface MudChecker {\n  mudCheck(node: AST.Node, \n          nodes: AST.Node[], \n          registeredNodes: {[key: string]: AST.Node},\n          dependsMap: {[key: string]: string[]}): TypeError[];\n}\n\n// Numbers are always defined.\nclass MudCheckNumber implements MudChecker {\n  mudCheck(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\n// Booleans are always defined.\nclass MudCheckBoolean implements MudChecker {\n    mudCheck(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\n// Binary operations must take into account their operands' statuses when determining their own.\nclass MudCheckBinary implements MudChecker {\n    mudCheck(node: AST.BinaryOperationNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        \n        // recursively mud-check the left and right operands\n        const errors: TypeError[] = mudCheckNode(node.left, nodes, registeredNodes, dependsMap)\n        .concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));\n\n        // Update the output type of the node, based on the outputType of its operands\n        if (node.right?.outputType?.status == 'Def-Undefined' || node.left?.outputType?.status == 'Def-Undefined') {\n            node.outputType.status = 'Def-Undefined';\n        }\n        else if (node.right?.outputType?.status == 'Maybe-Undefined' || node.left?.outputType?.status == 'Maybe-Undefined') {\n            node.outputType.status = 'Maybe-Undefined';\n        } else {\n            node.outputType.status = 'Definitely'\n        }\n\n        // Each ORed binary operation will assert the intersection of its operands' assertions\n        if (node.operator == '|') {\n          let intersection = [];\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          for (let i = 0; i < leftAsserts.length; i++) {\n            if (rightAsserts.find(e => e == leftAsserts[i])) {\n              intersection.push(leftAsserts[i]);\n            }\n          }\n          node.outputType.asserts = intersection;\n        }\n        // Each ANDed binary operation will assert the union of its operands' assertions\n        else {\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          let allAsserts = leftAsserts.concat(rightAsserts);\n\n          node.outputType.asserts = allAsserts;\n        }\n\n        return errors;\n    }\n}\n\n// The status of a function is determined by its argument and/or its status as defined\n// in the builtins dictionary.\nclass MudCheckFunction implements MudChecker {\n    mudCheck(node: AST.FunctionNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        // First mud-check the argument(s)\n        const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);\n        errors = errors.concat(arg1Errors);\n        if (node.args.length > 1) {\n          const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);\n          errors = errors.concat(arg2Errors);\n        }\n\n        // IsDefined is the only function that asserts anything\n        // It asserts its argument\n        if (node.name == 'IsDefined') {\n          let bases = findBases(node.args[0], dependsMap);\n          node.outputType.asserts = node.outputType.asserts.concat(bases);\n        }\n\n        const functionName = node.name\n        \n        // If sink \"node\" takes in possibly undefined values, warn the author\n        if (functionName == 'Sink') {\n          // a sink has one argument\n          if (node.args[0]?.outputType?.status != 'Definitely') {\n              errors.push(new TypeError(\"User facing content could be undefined.\", node.args[0].pos));\n          }\n        }\n\n        // The contstant-ness of a function is whatever is defined in builtins\n        node.outputType.constType = builtins[node.name].constType;\n        \n        // If the function is variable, then its status depends on its argument's status\n        if (builtins[functionName].status == \"Variable\") {\n\n          // If the argument is constant, we can use it to evaluate the oepration\n          if (node.args[0].outputType.constType == 'Constant') {\n\n            const result = evaluate(node);\n\n            // If the result is undefined, warn the author\n            if (result) {\n              node.outputType.status = \"Definitely\";\n            } else {\n              node.outputType.status = \"Def-Undefined\";\n              errors.push(new TypeError(\"The result of this operation is undefined.\", node.pos));\n            }\n          } else {\n            node.outputType.status = node.args[0]?.outputType?.status;\n          }\n\n        }\n        else {\n          node.outputType.status = builtins[functionName].status;\n        }\n\n        return errors;\n    }\n}\n\n// The status of a choose node is determined by the status of the consequent\n// given what the predicate asserts and the status of the otherwise statement\nclass MudCheckChoose implements MudChecker {\n    mudCheck(node: AST.ChooseNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        const predicate = node.case.predicate;\n        const consequent = node.case.consequent;\n        const otherwise = node.otherwise;\n\n        // First typecheck the inner nodes\n        const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);\n        const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);\n        const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);\n        errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n        // DEFAULT status is maybe-undefined, hence default false values\n        let consDef = false;\n        let otherDef = false;\n\n        if (otherwise.outputType.status == 'Definitely') {\n          otherDef = true;\n        }\n\n        // Check the definitive status of the consequent using the predicates asserts\n        // NOTE: only binary operations and IsDefined functions have non-empty assert fields\n        consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n\n        if (consequent?.outputType.status == 'Definitely') {\n          consDef = true;\n        }\n\n        if (consDef && otherDef) {\n          node.outputType.status = 'Definitely';\n        }\n\n        return errors;\n    }\n}\n\n// The status of a variable assignment is determined by the status of its assignment\nclass MudCheckVariable implements MudChecker {\n    mudCheck(node: AST.VariableAssignmentNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First mud-check the assignment node\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);\n    errors = errors.concat(assignmentErrors);\n\n    // Set variable assignment node output type to the same as its assignment\n    node.outputType.status = node.assignment.outputType.status;\n\n    // Update the dependsMap to hold the bases of this new variable\n    dependsMap[node.nodeId] = findBases(node.assignment, dependsMap);\n\n    return errors;\n  }\n}\n\n// The status of an identifier is determined by the status of its assignment,\n// given in registered nodes\nclass MudCheckIdentifier implements MudChecker {\n    mudCheck(node: AST.IdentifierNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Grab the node the identifier was previously assigned to\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    } else {\n      // If we found the assignment node, set the output type of the identifier\n      node.outputType.status = valueNode.outputType.status;\n    }\n\n    return errors;\n  }\n}\n\n\nconst mudCheckerMap: Partial<{[K in AST.NodeType]: MudChecker}> = {\n  'Number' : new MudCheckNumber(),\n  'Boolean' : new MudCheckBoolean(),\n  'BinaryOperation' : new MudCheckBinary(),\n  'Function' : new MudCheckFunction(),\n  'Choose': new MudCheckChoose(),\n  'VariableAssignment': new MudCheckVariable(),\n  'Identifier': new MudCheckIdentifier()\n}\n\n// Given the consequent to a choose node, return true if the given list of asserts\n// includes all of the bases of that consequent\nfunction handleCheck(consequent: AST.Node,\n                    dependsMap: {[key: string]: string[]},\n                    asserts: string[]): boolean {\n  let contained = true;\n\n  // If the given consequent is a choose node, recursively check the its consequent and otherwise statements\n  if (consequent?.nodeType == 'Choose') {\n    // We need to check each statement's bases separately in order to exclude\n    // the next predicate's asserts in the next otherwise\n    // while including the current asserts in both\n    let consAsserts = consequent.case.predicate.outputType.asserts;\n    let consConsContained = handleCheck(consequent.case.consequent, dependsMap, asserts.concat(consAsserts));\n    let consOtherContained = handleCheck(consequent.otherwise, dependsMap, asserts);\n\n    // If either the next consequent or otherwise statements aren't covered by their asserts,\n    // the current consequent is also not covered\n    if (!(consConsContained && consOtherContained)) {\n      contained = false;\n    }\n\n  } else {\n    let consBases = findBases(consequent, dependsMap);\n\n    // Ensure that every base is in the given asserts list\n    for (let i = 0; i < consBases.length; i++) {\n      if (!asserts.find(e => e == consBases[i])) {\n        contained = false;\n      }\n    }\n  }\n\n  return contained;\n}\n\n// This funciton simulates running the body of a miniCL function (like Inverse(x))\nfunction evaluate(node: AST.FunctionNode): boolean {\n  // 0 is the only input to Inverse that makes it undefined\n  if (node.name == \"Inverse\") {\n    if (node.args[0].value == 0) {\n      return false;\n    }\n  }\n  // A negative number is the only input to Sqrt that makes it undefined\n  if (node.name == \"Sqrt\") {\n    if (node.args[0].value < 0) {\n      return false;\n    }\n  }\n  // No other functions can have inputs that make them definitely undefined\n  return true;\n}\n","import * as d3Hierarchy from 'd3-hierarchy';\nimport * as d3Select from 'd3-selection';\nimport * as d3shape from 'd3-shape';\nimport * as AST from './ast';\n\nexport function visualize(nodes: AST.Node[]): void {\n\n    // Placement and size of tree\n    const margin = {top: 20, right: 90, bottom: 20, left: 90};\n    const height = 300 - margin.top - margin.bottom;\n    const width  = 500 - margin.left - margin.right;\n  \n    // Make the svg\n    d3Select.select('#viz').selectAll('svg').remove();\n    const viz = d3Select.select('#viz').append('svg');\n  \n    // Remove existing visualizations\n    viz.selectAll('*').remove();\n  \n    // Add a new visualization\n    viz.attr('width', width + margin.left + margin.right)\n       .attr('height', height + margin.top + margin.bottom);\n\n    const root: Node = {nodeType: 'Program', children: nodes}\n\n    // Visualize all the statements\n    // for (var statement of nodes) {\n\n      // Create the tree and layout\n      const treemap = d3Hierarchy.tree()\n        .size([height, width])\n        .separation(() => 1);\n      const treelayout = d3Hierarchy.hierarchy(root, getChildren);\n      const tree = treemap(treelayout);\n  \n      // Add a new graph element for this statement\n      const g = viz.append('g')\n                  //  .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n                   .attr('transform', `translate(${margin.left}, ${margin.top})`)\n                   .attr(\"font-family\", \"sans-serif\")\n                   .attr(\"font-size\", 12)\n               \n      // Edge updates\n      const link = g.selectAll('path.link').data(tree.links());\n\n      // Edge entry\n      const linkEnter = link.enter().append('path', 'g');\n        \n      // general edge attributes\n      linkEnter.attr('class', 'link')\n               .attr('fill', 'none')\n               .attr(\"stroke-opacity\", 0.4)\n               .attr('stroke', '#555')\n               .attr(\"stroke-width\", 1.5)\n               .attr('d', connection);\n\n        \n      // Node updates\n      const node = g.selectAll('g.node').data(tree.descendants());\n\n      // Node entry\n      const nodeEnter = node.enter().append('g');\n\n      // general node attributes\n      nodeEnter.attr('class', 'node')\n               .attr('transform', d => `translate(${d.y}, ${d.x})`);\n\n      nodeEnter.append('circle')\n               .attr(\"fill\", getFill)\n               .attr('r', '2.5')\n               .attr('stroke-width', 10);\n\n      // add text\n      nodeEnter.append('text')\n                // .attr('dy', '-10px')\n                .attr(\"dy\", \"0.31em\")\n                .attr(\"x\", d => d.children ? -8 : 8)\n                .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n                .attr('fill', d => isUndefined(d) ? '#fc6666' : 'black')\n                .style(\"fill-opacity\", 1)\n                .call(getTextBox)\n                .datum(d => d.data)\n                .text(getText)\n          .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n    \n      // Highlight undefined -- not working\n      // Inspired in part by https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\n      nodeEnter.filter((d,i) => isUndefined(d))\n        .call(yep)\n        .insert('rect', 'text')\n        .attr(\"x\", function(d){return d.bbox.x})\n        .attr(\"y\", function(d){return d.bbox.y})\n        .attr(\"width\", function(d){return d.bbox.width})\n        .attr(\"height\", function(d){return d.bbox.height}) \n        .attr('fill', 'black')             \n    // }\n}\n\n// From https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\nfunction getTextBox(selection) {\n  selection.each(function(d){d.bbox = this.getBBox();})\n}\n\nfunction yep(selection) {\n  // console.log(selection.nodes().map((d)=>d.bbox));\n}\n\n\nconst connection = d3shape.linkHorizontal().x(d => d.y).y(d => d.x)\n\nfunction getChildren(node: AST.Node): AST.Node[] {\n  var children: AST.Node[] = [];\n  switch (node.nodeType) {\n    case 'Program':\n      children = node.children;\n      break;\n    case 'Function':\n      children = node.args;\n      break;\n    case 'Choose':\n      children = [node.case.predicate, node.case.consequent, node.otherwise];\n      break;\n    case 'BinaryOperation':\n      children = [node.left, node.right];\n      break;\n    case 'VariableAssignment':\n      children = [node.assignment];\n      break;\n    default:\n      children = [];\n    }\n\n  return children;\n}\n\nfunction getText(node) {\n  var text = \"\";\n  switch (node.nodeType) {\n    case 'Program':\n      text = '';\n      break;\n    case 'Function':\n      text = node.name;\n      break;\n    case 'Choose':\n      text = \"choose\";\n      break;\n    case 'BinaryOperation':\n      text = node.operator;\n      break;\n    case 'VariableAssignment':\n      text = node.name;\n      break;\n    case 'Identifier':\n      text = node.name;\n      break;\n    case 'Number':  \n      text = node.value.toString();\n      break;\n    case 'Boolean':\n      text = node.value.toString();\n      break;\n    default:\n      text = \"\";\n  }\n\n  return text;\n}\n\nfunction getFill(node): string {\n  if (isUndefined(node)) {\n    return '#fc6666'\n  }\n  if (node.children) {\n    return '#555'\n  } else {\n    return '#999'\n  }\n}\n\nfunction isUndefined(d) {\n  return d.data.outputType?.status === 'Maybe-Undefined'\n}","import * as AST from './ast';\nimport {builtins} from './typechecker';\n\n/*\n    The findBases function, given an AST node and the current dependsMap, determines\n    the \"bases\" of that node and returns them in a list of nodeIds.\n\n    Bases are nodes that introduce the possibility of being undefined.\n    For example, the InputN() function represents student input, and therefore\n    introduces the possibility to be undefined.\n*/\n\nexport function findBases(node: AST.Node, dependsMap: {[key: string]: string[]}): string[] {\n    return baseMap[node.nodeType].findBase(node, dependsMap); \n}\n\nexport interface BaseFinder {\n  findBase(node: AST.Node, dependsMap: {[key: string]: string[]}): string[];\n}\n\n// Numbers are constant, and therefore cannot have bases\nclass BaseNumber implements BaseFinder {\n  findBase(node: AST.NumberNode): string[] {\n    return []\n  }\n}\n\n// Booleans are constant, and therefore cannot have bases\nclass BaseBoolean implements BaseFinder {\n    findBase(node: AST.BooleanNode): string[] {\n        return []\n    }\n}\n\n// Binary operations could have bases on either side of their operator\nclass BaseBinary implements BaseFinder {\n    findBase(node: AST.BinaryOperationNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // recursively call findBases on left and right\n        let leftList = findBases(node.left, dependsMap);\n        baseList = baseList.concat(leftList);\n        let rightList = findBases(node.right, dependsMap)\n        // combine bases from left and right\n        baseList = baseList.concat(rightList);\n        return baseList;\n    }\n}\n\n// In this proof of concept, functions are the only bases\n// They can produce an undefined value (e.g. Inverse(0)) or are inherently non-constant (e.g. InputN)\n// Otherwise, the base of the function is determined by its argument(s)\n// This means that the base is the id of the function node itself\nclass BaseFunction implements BaseFinder {\n    findBase(node: AST.FunctionNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n\n        if (node.outputType.status == 'Def-Undefined') {\n            // e.g. with Inverse(0)\n            baseList.push(node.nodeId);\n        } else if (builtins[node.name].status == 'Variable') {\n            // recursively call findBases on argument(s)\n            for (let i = 0; i < node.args.length; i++) {\n                baseList = baseList.concat(findBases(node.args[i], dependsMap));\n            }\n        } else if (builtins[node.name].constType == 'Non-Constant') {\n            // e.g. with InputN(2)\n            baseList.push(node.nodeId);\n        }\n\n        return baseList;\n    }\n}\n\n// The bases of choose nodes are determined by the bases of their consequent and their otherwise\nclass BaseChoose implements BaseFinder {\n    findBase(node: AST.ChooseNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n \n        let consBases = findBases(node.case.consequent, dependsMap);\n        baseList = baseList.concat(consBases);\n\n        let otherBases = findBases(node.otherwise, dependsMap);\n        baseList = baseList.concat(otherBases);\n\n        return baseList;\n    }\n}\n\n// Variable assignments are constant, and therefore cannot have bases\nclass BaseVariableAssignment implements BaseFinder {\n    findBase(node: AST.VariableAssignmentNode): string[] {\n        return []\n    }\n}\n\n// The bases of an identifier are stored in the dependsMap, which has a reference\n// to its assignment.\nclass BaseIdentifier implements BaseFinder {\n    findBase(node: AST.IdentifierNode, dependsMap: {[key: string]: string[]}): string[] {\n        // follow the chain in the dependsMap\n        return dependsMap[node.assignmentId];\n    }\n}\n\nconst baseMap: Partial<{[K in AST.NodeType]: BaseFinder}> = {\n  'Number' : new BaseNumber(),\n  'Boolean' : new BaseBoolean(),\n  'BinaryOperation' : new BaseBinary(),\n  'Function' : new BaseFunction(),\n  'Choose': new BaseChoose(),\n  'VariableAssignment': new BaseVariableAssignment(),\n  'Identifier': new BaseIdentifier()\n}","import { TokenStream } from './tokenstream';\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\nimport * as AST from './ast';\nimport { AbstractParser } from './parser';\nimport {token2pos, join, pos2string} from './position';\n\n// All parselets add their nodeType to the AST\nexport interface InitialParselet {\n  parse(parser: AbstractParser,\n        tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node}): AST.Node;\n}\n\n\nexport class NumberParselet implements InitialParselet {\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream,\n        token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    let newNode = {\n      nodeType: 'Number' as 'Number',\n      value: parseFloat(token.text),\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'number' as 'number',\n                    asserts: [],\n                    constType: 'Constant' as 'Constant'},\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class BooleanParselet implements InitialParselet {\n  constructor(private value: boolean) {}\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    let newNode = {\n      nodeType: 'Boolean' as 'Boolean',\n      value: this.value,\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'boolean' as 'boolean',\n                    asserts: [],\n                    constType: 'Constant' as 'Constant'},\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ParenParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    _token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node}) {\n\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes);\n    tokens.expectToken(')');\n\n    return exp;\n  }\n}\n\nexport abstract class ConsequentParselet {\n  constructor(\n    readonly tokenType: TokenType,\n    readonly associativity: 'left' | 'right'\n  ) {}\n  abstract parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node}): AST.Node;\n}\n\nexport class BinaryOperatorParselet extends ConsequentParselet {\n  constructor(\n    public tokenType: BinaryOperationTokenType,\n    associativity: 'left' | 'right'\n  ) {\n    super(tokenType, associativity);\n  }\n\n  parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node}): AST.Node {\n    const bindingPower = parser.bindingPower(token);\n\n    const right = parser.parse(\n      tokens,\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\n      varMap,\n      registeredNodes\n    );\n    const position = join(left.pos, token2pos(tokens.last()));\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [],\n                    constType: undefined},\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n\n    return newNode;\n  }\n}\n\nexport class FunctionParselet implements InitialParselet {\n  \n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // All functions have at least one argument inside parens\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes);  // allow for one argument\n    let args = [arg1];\n    // ParseOrderedPair is the only function that takes two arguments\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes);  // allow for second argument\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: token.text,\n      args: args,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [],\n                    constType: undefined},\n      pos: position,\n      nodeId: id\n    };\n\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ChooseParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // Choose nodes include two nodes followed by the keyword \"OTHERWISE\" (CHOOSE2)\n    // which is followed by another node\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes);\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes);\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predicate, consequent: consequent },\n      otherwise: otherwise,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [],\n                    constType: undefined},\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class VariableAssignmentParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    \n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes);\n\n    // Save the variable and its assignment in the variable map\n    varMap[token.text] = id;\n\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                    valueType: assignment?.outputType?.valueType,\n                    asserts: [],\n                    constType: undefined},\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n\n    return newNode;\n  }\n}\n\nexport class IdentifierParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node}) {\n    \n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // Look up the node this identifier was assigned to\n    const assignmentId = varMap[token.text];\n\n    // An identifier must be previously assigned,\n    // otherwise we call the variable assignment parselet\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes);\n    }\n    else {\n      let newNode = {\n        nodeType: 'Identifier' as 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                      valueType: undefined,\n                      asserts: [],\n                      constType: undefined},\n        pos: position,\n        nodeId: id\n      };\n      registeredNodes[id] = newNode;\n      return newNode;\n    }\n  }\n}\n","import { Token } from './lexer';\n\nexport type Position = {\n  first_line: number;\n  first_column: number;\n  last_line: number;\n  last_column: number;\n};\n\nexport function token2pos(token: Token): Position {\n  return {\n    first_line: token.line,\n    last_line: token.line,\n    first_column: token.first_column,\n    last_column: token.last_column\n  }\n}\n\nexport function join(start: Position, end: Position) {\n  return {\n    first_line: start.first_line,\n    last_line: end.last_line,\n    first_column: start.first_column,\n    last_column: end.last_column\n  };\n}\n\n// Returns a string that uniquely identifies a node's position\nexport function pos2string(pos: Position): string {\n  return pos.first_line.toString() + \".\" +\n         pos.first_column.toString() + \".\" +\n         pos.last_line.toString() + \".\" +\n         pos.last_column.toString();\n}\n\n// note, extending Error in the browser is problematic\n// https://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\nexport class ParseError {\n  constructor(public message: string, public position: Position) {}\n}\n","import {Token, TokenType, getTokens} from './lexer';\nimport {ParseError, token2pos} from './position';\n\nexport class TokenStream {\n  tokens: Token[];\n  pos: number = 0;\n\n  constructor(text: string) {\n    this.tokens = getTokens(text).filter(t => t.type != 'COMMENT');\n  }\n\n  consume(): Token | undefined {\n    const token = this.tokens[this.pos];\n    if (token) {\n      this.pos += 1;\n    }\n    return token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens[this.pos];\n  }\n\n  last(): Token {\n    return this.tokens[this.pos - 1];\n  }\n\n  expectToken<T extends TokenType>(expectedType: T): Token<T> {\n    const actual = this.consume();\n\n    if (!actual) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token but found none.`,\n        token2pos(this.last()),\n      );\n    }\n\n    if (actual.type != expectedType) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token type but found \"${actual.type}\".`,\n        token2pos(actual),\n      );\n    }\n\n    return actual as Token<T>;\n  }\n}\n"]}