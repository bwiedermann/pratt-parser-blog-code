{"version":3,"sources":["src/lexer.ts","src/mudChecker.ts","src/position.ts","src/parselet.ts","src/tokenstream.ts","src/parser.ts","src/parseResults.ts","src/constantChecker.ts","src/typechecker.ts","src/miniCL.ts","src/visualization.ts","src/devTools.ts","src/index.ts","src/findBase.ts"],"names":["text","tokens","state","line","stack","split","stream","stream_parser_1","string","eol","token","getToken","emitToken","makeEmit","fullToken","undefined","push","start","pos","Error","length","getDefaultToken","type","first_column","last_column","current","eatSpace","match","next","nodes","registeredNodes","dependsMap","errors","map","n","mudCheckNode","concat","node","mudCheckerMap","nodeType","mudCheck","constructor","message","position","left","right","outputType","status","operator","intersection","leftAsserts","asserts","rightAsserts","i","find","e","allAsserts","arg1Errors","args","arg2Errors","name","bases","findBase_1","functionName","TypeError","constType","typechecker_1","value","predicate","case","consequent","otherwise","predErrors","consErrors","otherErrors","consDef","otherDef","handleCheck","assignmentErrors","assignment","nodeId","valueNode","assignmentId","MudCheckNumber","MudCheckBoolean","MudCheckBinary","MudCheckFunction","MudCheckChoose","MudCheckVariable","MudCheckIdentifier","contained","consAsserts","consConsContained","consOtherContained","consBases","first_line","last_line","end","toString","parse","_parser","_tokens","varMap","position_1","id","newNode","parseFloat","valueType","parser","_token","exp","expectToken","tokenType","associativity","ConsequentParselet","bindingPower","last","arg1","arg2","varParselet","VariableAssignmentParselet","lexer_1","filter","t","consume","peek","expectedType","actual","tokenstream_1","Parser","bindingPowers","bindingClasses","Object","keys","consequentMap","currentBindingPower","initialParselet","initialMap","consequentParselet","AbstractParser","NUMBER","NumberParselet","TRUE","BooleanParselet","FALSE","ParenParselet","FUNCTION","FunctionParselet","CHOOSE1","ChooseParselet","IDENTIFIER","IdentifierParselet","BinaryOperatorParselet","classes","state_1","define","create","emptyParseResults","update","tr","docChanged","parseProgram","contents","doc","ast","parser_1","parseErrors","checkerMap","check","constCheckNode","result","evaluate","CheckNumber","CheckBoolean","CheckBinary","CheckFunction","CheckChoose","CheckVariable","CheckIdentifier","argVal","Math","sqrt","aNodes","totalErrors","forEach","aNode","typecheckNode","constantChecker_1","aTree","lErrors","lANode","rErrors","rANode","aArgs","arg1Node","arg2Node","argType","exports","inputType","resultType","predNode","consNode","otherNode","assignmentNode","startState","token2tag","view","results","field","parseResults_1","typeErrors","analyzedNodes","mudErrors","mudChecker_1","parseDiagnostics","makeDiagnostic","typeDiagnostics","mudDiagnostics","severity","error","from","firstLine","to","lastLine","margin","top","bottom","height","width","select","selectAll","remove","viz","append","attr","root","children","treemap","tree","size","separation","treelayout","hierarchy","getChildren","g","link","data","links","linkEnter","enter","connection","descendants","nodeEnter","d","y","x","getFill","isUndefined","style","call","getTextBox","datum","getText","clone","lower","yep","insert","bbox","selection","each","getBBox","linkHorizontal","astJSON","JSON","stringify","replaceContents","astViewer","dependsJSON","dependsViewer","visualization_1","basic_setup_1","extensions","lang_json_1","lint_1","editable","of","newJSONViewerState","parent","document","querySelector","editor","changes","fold_1","miniCLEditor","miniCL_1","dispatch","updateOutput","devTools_1","baseMap","findBase","baseList","leftList","findBases","rightList","otherBases","BaseNumber","BaseBoolean","BaseBinary","BaseFunction","BaseChoose","BaseVariableAssignment","BaseIdentifier"],"mappings":"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","file":"","sourcesContent":["import {StringStream} from \"@codemirror/stream-parser\"\n\nexport function getTokens(text: string): Token[] {\n  const tokens: Token[] = [];\n  const state: State = {line: 1, stack: ['default']};\n\n  for (const line of text.split('\\n')) {\n    const stream = new StringStream();\n    stream.string = line;\n    while (!stream.eol()) {\n      const token = getToken(stream, state);\n      const emitToken = makeEmit(stream, state);\n      const fullToken = emitToken(token as TokenType);\n      if (token != undefined) {\n        tokens.push(fullToken);\n      }\n\n      if (stream.start == stream.pos) {\n        throw new Error(\n          `getToken failed to advance stream at position ${\n            stream.pos\n          } in string ${stream.string}`,\n        );\n      }\n      stream.start = stream.pos;\n    }\n\n    state.line += 1;\n  }\n\n  return tokens;\n}\n\nexport function getToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  //Built for codeMirror streams API\n  //State is a stack of states\n  switch (state.stack[state.stack.length - 1]) {\n    default:\n      return getDefaultToken(stream, state);\n  }\n}\n\nfunction makeEmit(stream: StringStream, state: State) {\n  return function emitToken(type: TokenType): Token {\n    return {\n      type,\n      first_column: stream.start,\n      last_column: stream.pos,\n      line: state.line,\n      text: stream.current(),\n    };\n  };\n}\n\nexport function getDefaultToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  // const emitToken = makeEmit(stream, state);\n  if (stream.eatSpace()) {\n    // skip whitespace\n    return undefined;\n  }\n  \n  // parse both negative and positive numbers\n  if (stream.match(/-?[0-9]+(\\.[0-9]+)?/)) {\n    return 'NUMBER';\n  }\n\n  if (stream.match(/\\+/)) {\n    return '+';\n  }\n\n  // NOTE: when subtracting a positive number, make sure to use parentheses around it\n  // e.g. 1-(2) will work but 1-2 won't\n  if (stream.match(/\\-/)) {\n    return '-';\n  }\n\n  if (stream.match(/\\*/)) {\n    return '*';\n  }\n\n  if (stream.match(/\\//)) {\n    return '/';\n  }\n\n  if (stream.match(/\\|/)) {\n    return '|';\n  }\n\n  if (stream.match(/\\&/)) {\n    return '&';\n  }\n\n  if (stream.match(/\\(/)) {\n    return '(';\n  }\n\n  if (stream.match(/\\)/)) {\n    return ')';\n  }\n\n  if (stream.match(/\\=/)) {\n    return '=';\n  }\n\n  if (stream.match(/True/)) {\n    return 'TRUE';\n  }\n\n  if (stream.match(/False/)) {\n    return 'FALSE';\n  }\n\n  if (stream.match(/#/)) {\n    if (!stream.match(/\\n/)) {\n      // comment lasts till end of line\n      stream.match(/.*/); // if no eol encountered, comment lasts till end of file\n    }\n    return 'COMMENT';\n  }\n\n  // keyword WHEN begins a choose node\n  if (stream.match(/WHEN/)) {\n    return 'CHOOSE1';\n  }\n\n  // keyword OTHERWISE is used in a choose node\n  if (stream.match(/OTHERWISE/)) {\n    return 'CHOOSE2';\n  }\n\n  // functions start with a capital letter and do not contain numbers\n  if (stream.match(/[A-Z]([a-z|A-Z])*/)) {\n    return 'FUNCTION';\n  }\n\n  // The form of a valid identifier is: a lower-case alphabetic character,\n  // followed by zero or more alpha characters.\n  if (stream.match(/[a-z]([a-z|A-Z])*/)) {\n    return 'IDENTIFIER';\n  }\n  \n  stream.next();\n  return 'ERROR';\n}\n\nexport type BinaryOperationTokenType =\n  | '+'\n  | '-'\n  | '*'\n  | '/'\n  | '|' // this is an or\n  | '&' // this is an and\n\nexport type TokenType =\n  | BinaryOperationTokenType\n  | 'NUM'\n  | 'TRUE'\n  | 'FALSE'\n  | '('\n  | ')'\n  | 'COMMENT'\n  | 'ERROR'\n  | 'FUNCTION'\n  | 'IDENTIFIER'\n  | 'CHOOSE1'\n  | 'CHOOSE2'\n  | '='\n\nexport interface Token<T extends TokenType = TokenType> {\n  type: T;\n  text: string;\n  line: number;\n  first_column: number;\n  last_column: number;\n}\n\ntype Mode = 'default';\n\nexport interface State {\n  stack: Mode[];\n  line: number;\n}\n","import {Position} from './position';\nimport * as AST from './ast';\nimport {findBases} from './findBase';\nimport {builtins} from './typechecker';\nimport * as AnalyzedTree from './analyzedTree';\n\n/*\n  The function mudCheck manipulates the status of each node's outputType.\n  It produces type errors based on that status.\n  For example, it will produce a warning when the author tries to use \n  a maybe-undefined node in a Sink function, which is user-facing.\n  It also produces a warning when the author tries to compute a \n  definitely undefined operation (e.g. Inverse(0)).\n*/\n\nexport function mudCheck(nodes: AnalyzedTree.AnalyzedNode[], \n                        registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n                        dependsMap: {[key: string]: string[]}): TypeError[] {\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction mudCheckNode(node: AnalyzedTree.AnalyzedNode, \n                    nodes: AnalyzedTree.AnalyzedNode[], \n                    registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n                    dependsMap: {[key: string]: string[]}): TypeError[] {\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface MudChecker {\n  mudCheck(node: AnalyzedTree.AnalyzedNode, \n          nodes: AnalyzedTree.AnalyzedNode[], \n          registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n          dependsMap: {[key: string]: string[]}): TypeError[];\n}\n\n// Numbers are always defined.\nclass MudCheckNumber implements MudChecker {\n  mudCheck(node: AnalyzedTree.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\n// Booleans are always defined.\nclass MudCheckBoolean implements MudChecker {\n    mudCheck(node: AnalyzedTree.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\n// Binary operations must take into account their operands' statuses when determining their own.\nclass MudCheckBinary implements MudChecker {\n    mudCheck(node: AnalyzedTree.BinaryOperationNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        \n        // recursively mud-check the left and right operands\n        const errors: TypeError[] = mudCheckNode(node.left, nodes, registeredNodes, dependsMap)\n        .concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));\n\n        // Update the output type of the node, based on the outputType of its operands\n        if (node.right.outputType.status == 'Def-Undefined' || node.left.outputType.status == 'Def-Undefined') {\n            node.outputType.status = 'Def-Undefined';\n        }\n        else if (node.right.outputType.status == 'Maybe-Undefined' || node.left.outputType.status == 'Maybe-Undefined') {\n            node.outputType.status = 'Maybe-Undefined';\n        } else {\n            node.outputType.status = 'Definitely'\n        }\n\n        // Each ORed binary operation will assert the intersection of its operands' assertions\n        if (node.operator == '|') {\n          let intersection = [];\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          for (let i = 0; i < leftAsserts.length; i++) {\n            if (rightAsserts.find(e => e == leftAsserts[i])) {\n              intersection.push(leftAsserts[i]);\n            }\n          }\n          node.outputType.asserts = intersection;\n        }\n        // Each ANDed binary operation will assert the union of its operands' assertions\n        else {\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          let allAsserts = leftAsserts.concat(rightAsserts);\n\n          node.outputType.asserts = allAsserts;\n        }\n\n        return errors;\n    }\n}\n\n// The status of a function is determined by its argument and/or its status as defined\n// in the builtins dictionary.\nclass MudCheckFunction implements MudChecker {\n    mudCheck(node: AnalyzedTree.FunctionNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        // First mud-check the argument(s)\n        const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);\n        errors = errors.concat(arg1Errors);\n        if (node.args.length > 1) {\n          const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);\n          errors = errors.concat(arg2Errors);\n        }\n\n        // IsDefined is the only function that asserts anything\n        // It asserts its argument\n        if (node.name == 'IsDefined') {\n          let bases = findBases(node.args[0], dependsMap);\n          node.outputType.asserts = node.outputType.asserts.concat(bases);\n        }\n\n        const functionName = node.name\n        \n        // If sink \"node\" takes in possibly undefined values, warn the author\n        if (functionName == 'Sink') {\n          // a sink has one argument\n          if (node.args[0].outputType.status != 'Definitely') {\n              errors.push(new TypeError(\"User facing content could be undefined.\", node.args[0].pos));\n          }\n        }\n\n        // The contstant-ness of a function is whatever is defined in builtins\n        node.outputType.constType = builtins[node.name].constType;\n        \n        // If the function is variable, then its status depends on its argument's status\n        if (builtins[functionName].status == \"Variable\") {\n          if (node.args[0].outputType.constType == 'Constant') {\n            // If the result is undefined, warn the author\n            if (node.value != undefined) {\n              node.outputType.status = \"Definitely\";\n            } else {\n              node.outputType.status = \"Def-Undefined\";\n              errors.push(new TypeError(\"The result of this operation is undefined.\", node.pos));\n            }\n          } else {\n            node.outputType.status = node.args[0]?.outputType?.status;\n          }\n        }\n        else {\n          node.outputType.status = builtins[functionName].status;\n        }\n\n        return errors;\n    }\n}\n\n// The status of a choose node is determined by the status of the consequent\n// given what the predicate asserts and the status of the otherwise statement\nclass MudCheckChoose implements MudChecker {\n    mudCheck(node: AnalyzedTree.ChooseNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        const predicate = node.case.predicate;\n        const consequent = node.case.consequent;\n        const otherwise = node.otherwise;\n\n        // First typecheck the inner nodes\n        const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);\n        const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);\n        const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);\n        errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n        // DEFAULT status is maybe-undefined, hence default false values\n        let consDef = false;\n        let otherDef = false;\n\n        if (otherwise.outputType.status == 'Definitely') {\n          otherDef = true;\n        }\n\n        // Check the definitive status of the consequent using the predicates asserts\n        // NOTE: only binary operations and IsDefined functions have non-empty assert fields\n        consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n\n        if (consequent?.outputType.status == 'Definitely') {\n          consDef = true;\n        }\n\n        if (consDef && otherDef) {\n          node.outputType.status = 'Definitely';\n        }\n\n        return errors;\n    }\n}\n\n// The status of a variable assignment is determined by the status of its assignment\nclass MudCheckVariable implements MudChecker {\n    mudCheck(node: AnalyzedTree.VariableAssignmentNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First mud-check the assignment node\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);\n    errors = errors.concat(assignmentErrors);\n\n    // Set variable assignment node output type to the same as its assignment\n    node.outputType.status = node.assignment.outputType.status;\n\n    // Update the dependsMap to hold the bases of this new variable\n    dependsMap[node.nodeId] = findBases(node.assignment, dependsMap);\n\n    return errors;\n  }\n}\n\n// The status of an identifier is determined by the status of its assignment,\n// given in registered nodes\nclass MudCheckIdentifier implements MudChecker {\n    mudCheck(node: AnalyzedTree.IdentifierNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Grab the node the identifier was previously assigned to\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    } else {\n      // If we found the assignment node, set the output type of the identifier\n      node.outputType.status = valueNode.outputType.status;\n    }\n\n    return errors;\n  }\n}\n\n\nconst mudCheckerMap: Partial<{[K in AST.NodeType]: MudChecker}> = {\n  'Number' : new MudCheckNumber(),\n  'Boolean' : new MudCheckBoolean(),\n  'BinaryOperation' : new MudCheckBinary(),\n  'Function' : new MudCheckFunction(),\n  'Choose': new MudCheckChoose(),\n  'VariableAssignment': new MudCheckVariable(),\n  'Identifier': new MudCheckIdentifier()\n}\n\n// Given the consequent to a choose node, return true if the given list of asserts\n// includes all of the bases of that consequent\nfunction handleCheck(consequent: AnalyzedTree.AnalyzedNode,\n                    dependsMap: {[key: string]: string[]},\n                    asserts: string[]): boolean {\n  let contained = true;\n\n  // If the given consequent is a choose node, recursively check the its consequent and otherwise statements\n  if (consequent?.nodeType == 'Choose') {\n    // We need to check each statement's bases separately in order to exclude\n    // the next predicate's asserts in the next otherwise\n    // while including the current asserts in both\n    let consAsserts = consequent.case.predicate.outputType.asserts;\n    let consConsContained = handleCheck(consequent.case.consequent, dependsMap, asserts.concat(consAsserts));\n    let consOtherContained = handleCheck(consequent.otherwise, dependsMap, asserts);\n\n    // If either the next consequent or otherwise statements aren't covered by their asserts,\n    // the current consequent is also not covered\n    if (!(consConsContained && consOtherContained)) {\n      contained = false;\n    }\n\n  } else {\n    let consBases = findBases(consequent, dependsMap);\n\n    // Ensure that every base is in the given asserts list\n    for (let i = 0; i < consBases.length; i++) {\n      if (!asserts.find(e => e == consBases[i])) {\n        contained = false;\n      }\n    }\n  }\n\n  return contained;\n}\n\n\n","import { Token } from './lexer';\n\nexport type Position = {\n  first_line: number;\n  first_column: number;\n  last_line: number;\n  last_column: number;\n};\n\nexport function token2pos(token: Token): Position {\n  return {\n    first_line: token.line,\n    last_line: token.line,\n    first_column: token.first_column,\n    last_column: token.last_column\n  }\n}\n\nexport function join(start: Position, end: Position) {\n  return {\n    first_line: start.first_line,\n    last_line: end.last_line,\n    first_column: start.first_column,\n    last_column: end.last_column\n  };\n}\n\n// Returns a string that uniquely identifies a node's position\nexport function pos2string(pos: Position): string {\n  return pos.first_line.toString() + \".\" +\n         pos.first_column.toString() + \".\" +\n         pos.last_line.toString() + \".\" +\n         pos.last_column.toString();\n}\n\n// note, extending Error in the browser is problematic\n// https://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\nexport class ParseError {\n  constructor(public message: string, public position: Position) {}\n}\n","import { TokenStream } from './tokenstream';\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\nimport * as AST from './ast';\nimport { AbstractParser } from './parser';\nimport {token2pos, join, pos2string} from './position';\n\n// All parselets add their nodeType to the AST\nexport interface InitialParselet {\n  parse(parser: AbstractParser,\n        tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string}): AST.Node;\n}\n\n\nexport class NumberParselet implements InitialParselet {\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream,\n        token: Token,\n        varMap: {[key: string]: string}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    let newNode = {\n      nodeType: 'Number' as 'Number',\n      value: parseFloat(token.text),\n      valueType: 'number' as 'number',\n      pos: position,\n      nodeId: id\n    };\n    \n    return newNode;\n  }\n}\n\nexport class BooleanParselet implements InitialParselet {\n  constructor(private value: boolean) {}\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    let newNode = {\n      nodeType: 'Boolean' as 'Boolean',\n      value: this.value,\n      valueType: 'boolean' as 'boolean',\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class ParenParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    _token: Token,\n    varMap: {[key: string]: string}) {\n\n    const exp = parser.parse(tokens, 0, varMap);\n    tokens.expectToken(')');\n\n    return exp;\n  }\n}\n\nexport abstract class ConsequentParselet {\n  constructor(\n    readonly tokenType: TokenType,\n    readonly associativity: 'left' | 'right'\n  ) {}\n  abstract parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string}): AST.Node;\n}\n\nexport class BinaryOperatorParselet extends ConsequentParselet {\n  constructor(\n    public tokenType: BinaryOperationTokenType,\n    associativity: 'left' | 'right'\n  ) {\n    super(tokenType, associativity);\n  }\n\n  parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string}): AST.Node {\n    const bindingPower = parser.bindingPower(token);\n\n    const right = parser.parse(\n      tokens,\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\n      varMap\n    );\n    const position = join(left.pos, token2pos(tokens.last()));\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class FunctionParselet implements InitialParselet {\n  \n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // All functions have at least one argument inside parens\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap);  // allow for one argument\n    let args = [arg1];\n    // ParseOrderedPair is the only function that takes two arguments\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap);  // allow for second argument\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: token.text,\n      args: args,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class ChooseParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // Choose nodes include two nodes followed by the keyword \"OTHERWISE\" (CHOOSE2)\n    // which is followed by another node\n    const predicate = parser.parse(tokens, 0, varMap);\n    const consequent = parser.parse(tokens, 0, varMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap);\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predicate, consequent: consequent },\n      otherwise: otherwise,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class VariableAssignmentParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    \n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap);\n\n    // Save the variable and its assignment in the variable map\n    varMap[token.text] = id;\n\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class IdentifierParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n    \n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // Look up the node this identifier was assigned to\n    const assignmentId = varMap[token.text];\n\n    // An identifier must be previously assigned,\n    // otherwise we call the variable assignment parselet\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap);\n    }\n    else {\n      let newNode = {\n        nodeType: 'Identifier' as 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        pos: position,\n        nodeId: id\n      };\n      \n      return newNode;\n    }\n  }\n}\n","import {Token, TokenType, getTokens} from './lexer';\nimport {ParseError, token2pos} from './position';\n\nexport class TokenStream {\n  tokens: Token[];\n  pos: number = 0;\n\n  constructor(text: string) {\n    this.tokens = getTokens(text).filter(t => t.type != 'COMMENT');\n  }\n\n  consume(): Token | undefined {\n    const token = this.tokens[this.pos];\n    if (token) {\n      this.pos += 1;\n    }\n    return token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens[this.pos];\n  }\n\n  last(): Token {\n    return this.tokens[this.pos - 1];\n  }\n\n  expectToken<T extends TokenType>(expectedType: T): Token<T> {\n    const actual = this.consume();\n\n    if (!actual) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token but found none.`,\n        token2pos(this.last()),\n      );\n    }\n\n    if (actual.type != expectedType) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token type but found \"${actual.type}\".`,\n        token2pos(actual),\n      );\n    }\n\n    return actual as Token<T>;\n  }\n}\n","import * as Parselet from './parselet';\nimport {Token, TokenType} from './lexer';\nimport {TokenStream} from './tokenstream';\nimport {ParseError, token2pos} from './position';\nimport * as AST from './ast';\n\nexport function parse(text: string,\n                      varMap: {[key: string]: string}): \n                      {nodes: AST.Node[]; errors: ParseError[]} {\n  const nodes: AST.Node[] = [];\n\n  const tokens = new TokenStream(text);\n  const parser = new Parser();\n  while (tokens.peek()) {\n    try {\n      nodes.push(parser.parse(tokens, 0, varMap));\n    } catch (e) {\n      return {\n        nodes,\n        errors: [e],\n      };\n    }\n  }\n\n  return {nodes, errors: []};\n}\n\nexport abstract class AbstractParser {\n  public bindingPowers: {[tokenType in TokenType]: number};\n\n  protected abstract initialMap(): Partial<\n    {[K in TokenType]: Parselet.InitialParselet}\n  >;\n  protected abstract consequentMap(): Partial<\n    {[K in TokenType]: Parselet.ConsequentParselet}\n  >;\n  protected abstract bindingClasses(): TokenType[][];\n\n  constructor() {\n    this.bindingPowers = {} as any;\n\n    const bindingClasses = this.bindingClasses();\n    for (let i = 0; i < bindingClasses.length; i++) {\n      for (const tokenType of bindingClasses[i]) {\n        this.bindingPowers[tokenType] = 10 * i + 9;\n      }\n    }\n\n    for (const tokenType of Object.keys(this.consequentMap) as TokenType[]) {\n      if (this.bindingPowers[tokenType] == undefined) {\n        throw new Error(\n          `Token ${tokenType} defined in consequentMap has no associated binding power.\n          Make sure it is also listed in bindingClasses.`,\n        );\n      }\n    }\n  }\n\n  bindingPower(token: Token): number {\n    if (this.bindingPowers[token.type] != undefined) {\n      return this.bindingPowers[token.type];\n    } else {\n      throw new ParseError(\n        `Unexpected token type ${token.type}.`,\n        token2pos(token),\n      );\n    }\n  }\n\n  parse(tokens: TokenStream,\n        currentBindingPower: number,\n        varMap: {[key: string]: string}): AST.Node {\n    const token = tokens.consume();\n    if (!token) {\n      throw new ParseError(\n        `Unexpected end of tokens.`,\n        token2pos(tokens.last()),\n      );\n    }\n\n    const initialParselet = this.initialMap()[token.type];\n\n    if (!initialParselet) {\n      throw new ParseError(\n        `Unexpected token type ${token.type}`,\n        token2pos(token),\n      );\n    }\n\n    let left = initialParselet.parse(this, tokens, token, varMap);\n\n    while (true) {\n      const next = tokens.peek();\n      if (!next) {\n        break;\n      }\n\n      const consequentParselet = this.consequentMap()[next.type];\n\n      if (!consequentParselet) {\n        break;\n      }\n\n      if (currentBindingPower >= this.bindingPower(next)) {\n        break;\n      }\n\n      tokens.consume();\n      left = consequentParselet.parse(this, tokens, left, next, varMap);\n    }\n\n    return left;\n  }\n}\n\nexport class Parser extends AbstractParser {\n  initialMap() {\n    return {\n      NUMBER: new Parselet.NumberParselet(),\n      TRUE: new Parselet.BooleanParselet(true),\n      FALSE: new Parselet.BooleanParselet(false),\n      '(': new Parselet.ParenParselet(),\n      FUNCTION: new Parselet.FunctionParselet(),\n      CHOOSE1: new Parselet.ChooseParselet(),\n      IDENTIFIER: new Parselet.IdentifierParselet()\n    };\n  }\n\n  consequentMap() {\n    return {\n      '+': new Parselet.BinaryOperatorParselet('+', 'left'),\n      '-': new Parselet.BinaryOperatorParselet('-', 'left'),\n      '*': new Parselet.BinaryOperatorParselet('*', 'left'),\n      '/': new Parselet.BinaryOperatorParselet('/', 'left'),\n      '|': new Parselet.BinaryOperatorParselet('|', 'right'),\n      '&': new Parselet.BinaryOperatorParselet('&', 'right')\n    };\n  }\n\n  bindingClasses() {\n    const classes: TokenType[][] = [['+', '-'], ['*', '/'], ['|', '&']];\n    return classes;\n  }\n}\n","import {StateField} from \"@codemirror/state\"\nimport {Transaction} from \"@codemirror/state\"\nimport * as AST from './ast';\nimport {parse} from './parser';\nimport {ParseError} from './position';\n\n/**\n * A State field that holds the results of parsing\n */\nexport const parseResults: StateField<ParseResults> = StateField.define({\n  create() { return emptyParseResults },\n  update(value, tr) { return tr.docChanged ? parseProgram(tr) : value }\n})\n\n/**\n * Parse the program created from a transaction, returning a ParseResults object\n */\nfunction parseProgram(tr: Transaction) : ParseResults {\n  const contents = tr.state.doc.toString()\n\n  let varMap: {[key: string]: string} = {}\n  const ast = parse(contents, varMap)\n\n  return {\n    nodes: ast.nodes,\n    parseErrors: ast.errors,\n    varMap: varMap\n  }\n}\n\n/**\n * Type that describes the results of parsing\n */\nexport type ParseResults = {\n  nodes: AST.Node[];\n  parseErrors: ParseError[];\n  varMap: {[key: string]: string};\n}\n\n/**\n * Can be used as the initial results of parsing\n */\nconst emptyParseResults: ParseResults = {\n  nodes: [],\n  parseErrors: [],\n  varMap: {}\n}\n","import {Position} from './position';\nimport * as AST from './ast';\nimport * as AnalyzedTree from './analyzedTree';\n\n\n// export function constCheck(nodes: AnalyzedTree.AnalyzedNode[], registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n//   nodes.forEach(node => {\n//     constCheckNode(node, registeredNodes);\n//   });\n// }\n\nexport function constCheckNode(node: AnalyzedTree.AnalyzedNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n  checkerMap[node.nodeType].check(node, registeredNodes);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface ConstChecker {\n  check(node: AnalyzedTree.AnalyzedNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void;\n}\n\n// A number requires no type checking\nclass CheckNumber implements ConstChecker {\n  check(node: AnalyzedTree.NumberNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n    // numbers already have values and are already constant\n  }\n}\n\n// A boolean requires no type checking\nclass CheckBoolean implements ConstChecker{\n  check(node: AnalyzedTree.BooleanNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void{\n    // booleans already have values and are already constant\n  }\n}\n\nclass CheckBinary implements ConstChecker {\n  check(node: AnalyzedTree.BinaryOperationNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n    constCheckNode(node.left, registeredNodes);\n    constCheckNode(node.right, registeredNodes);\n    \n    // at this point we have values for left and right\n    // we need to use the operator to evalute the expression\n    // make sure left and right are both constant\n    if (node.left.outputType?.constType == 'Constant' && node.right.outputType?.constType == 'Constant') {\n        if (node.operator == '+') {\n            // it's been typechecked, so if the operator is a + then the operands are numbers\n            node.value = node.left.value + node.right.value;\n        }\n        else if (node.operator == '-') {\n            // it's been typechecked, so if the operator is a - then the operands are numbers\n            node.value = node.left.value - node.right.value;\n        }\n        else if (node.operator == '*') {\n            // it's been typechecked, so if the operator is a * then the operands are numbers\n            node.value = node.left.value * node.right.value;\n        }\n        else if (node.operator == '/') {\n            // it's been typechecked, so if the operator is a / then the operands are numbers\n            node.value = node.left.value / node.right.value;\n        }\n        else if (node.operator == '&') {\n            // it's been typechecked, so if the operator is an & then the operands are booleans\n            node.value = node.left.value && node.right.value;\n        }\n        else if (node.operator == '|') {\n            // it's been typechecked, so if the operator is a | then the operands are booleans\n            node.value = node.left.value || node.right.value;\n        }\n    }\n    else {\n        // NOTE: we know that the outputType exists at this point\n        // so this error makes no sense\n        node.outputType?.constType = 'Non-Constant';\n    }\n\n  }\n}\n\nclass CheckFunction implements ConstChecker {\n  check(node: AnalyzedTree.FunctionNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n\n    // First typecheck the argument(s)\n    constCheckNode(node.args[0], registeredNodes);\n    if (node.args.length > 1) {\n      constCheckNode(node.args[1], registeredNodes);\n    }\n\n    if (node.args[0].outputType.constType == 'Constant') {\n        // if the argument is constant, we can evaluate it\n        const result = evaluate(node);\n        node.value = result;\n    }\n    else {\n        node.outputType.constType = 'Non-Constant';\n    }\n\n  }\n}\n\nclass CheckChoose implements ConstChecker {\n  check(node: AnalyzedTree.ChooseNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n\n    // First const-check the inner nodes\n    constCheckNode(predicate, registeredNodes);\n    constCheckNode(consequent, registeredNodes);\n    constCheckNode(otherwise, registeredNodes);\n\n    if (predicate.outputType.constType == 'Constant') {\n        if (predicate.value == true) {\n            if (consequent.outputType.constType == 'Constant') {\n                node.value = consequent.value;\n            }\n            else {\n                node.outputType.constType = 'Non-Constant';\n            }\n        }\n        else {\n            if (otherwise.outputType.constType == 'Constant') {\n                node.value = otherwise.value;\n            }\n            else {\n                node.outputType.constType = 'Non-Constant';\n            }\n        }\n    }\n    else {\n        node.outputType.constType = 'Non-Constant';\n    }\n\n\n  }\n}\n\nclass CheckVariable implements ConstChecker {\n  check(node: AnalyzedTree.VariableAssignmentNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n\n    // First const-check the assignment node\n    constCheckNode(node.assignment, registeredNodes);\n\n    if (node.assignment.outputType.constType == 'Constant') {\n        node.value = node.assignment.value;\n    }\n    else {\n        node.outputType.constType = 'Non-Constant';\n    }\n\n  }\n}\n\nclass CheckIdentifier implements ConstChecker {\n  check(node: AnalyzedTree.IdentifierNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}): void {\n\n    // Grab the node the identifier was previously assigned to\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    if (valueNode.outputType.constType == 'Constant') {\n        node.value = valueNode.value;\n    }\n    else {\n        node.outputType.constType = 'Non-Constant';\n    }\n\n\n  }\n}\n\nconst checkerMap: Partial<{[K in AST.NodeType]: ConstChecker}> = {\n  'Number' : new CheckNumber(),\n  'Boolean' : new CheckBoolean(),\n  'BinaryOperation' : new CheckBinary(),\n  'Function' : new CheckFunction(),\n  'Choose': new CheckChoose(),\n  'VariableAssignment': new CheckVariable(),\n  'Identifier': new CheckIdentifier()\n}\n\n// This funciton simulates running the body of a miniCL function (like Inverse(x))\nfunction evaluate(node: AnalyzedTree.FunctionNode): any {\n    // 0 is the only input to Inverse that makes it undefined\n    let argVal = node.args[0].value;\n    if (node.name == \"Inverse\") {\n      if (argVal == 0) {\n        return undefined;\n      }\n      else {\n        return 1 / argVal;\n      }\n    }\n    // A negative number is the only input to Sqrt that makes it undefined\n    if (node.name == \"Sqrt\") {\n      if (argVal < 0) {\n        return undefined;\n      }\n      else {\n        return Math.sqrt(argVal);\n      }\n    }\n    if (node.name == \"IsDefined\") {\n        // we only evaluate when the input is constant\n        if (argVal == undefined) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    if (node.name == \"Not\") {\n        if (argVal == true) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n}","import {Position} from './position';\nimport * as AST from './ast';\nimport * as AnalyzedTree from './analyzedTree';\nimport {constCheckNode} from './constantChecker';\n\nexport function typecheck(nodes: AST.Node[], registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n                          {errors: TypeError[], aTree: AnalyzedTree.AnalyzedNode[]} {\n  const aNodes: AnalyzedTree.AnalyzedNode[] = [];\n  let totalErrors: TypeError[] = [];\n\n  nodes.forEach(node => {\n    let {errors, aNode} = typecheckNode(node, registeredNodes);\n    if (errors.length == 0) {\n      constCheckNode(aNode, registeredNodes);\n    }\n    aNodes.push(aNode);\n    totalErrors = totalErrors.concat(errors);\n  });\n\n  return {errors: totalErrors, aTree: aNodes};\n}\n\nfunction typecheckNode(node: AST.Node, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n                        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n  return checkerMap[node.nodeType].check(node, registeredNodes);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface TypeChecker {\n  check(node: AST.Node, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode};\n}\n\n// A number requires no type checking\nclass CheckNumber implements TypeChecker {\n  check(node: AST.NumberNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let newNode = {\n      nodeType: node.nodeType,\n      value: node.value,\n      outputType: {\n        status: 'Definitely' as 'Definitely',\n        valueType: node.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: [], aNode: newNode};\n  }\n}\n\n// A boolean requires no type checking\nclass CheckBoolean implements TypeChecker {\n  check(node: AST.BooleanNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let newNode = {\n      nodeType: node.nodeType,\n      value: node.value,\n      outputType: {\n        status: 'Definitely' as 'Definitely',\n        valueType: node.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: [], aNode: newNode};\n  }\n}\n\nclass CheckBinary implements TypeChecker {\n  check(node: AST.BinaryOperationNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    const { errors: lErrors, aNode: lANode } = typecheckNode(node.left, registeredNodes);\n    const { errors: rErrors, aNode: rANode } = typecheckNode(node.right, registeredNodes);\n    const totalErrors = lErrors.concat(rErrors);\n    \n    // Check if left and right are the same type (both numbers or both booleans)\n    if (lANode.outputType.valueType != rANode.outputType.valueType) {\n      totalErrors.push(new TypeError(\"incompatible types for binary operator\", node.pos));\n    }\n    // Check if incorrect combination of operator and operands\n    else if (rANode.outputType.valueType == 'boolean' && (node.operator != \"|\" && node.operator != '&')) {\n      totalErrors.push(new TypeError(\"incompatible operation for boolean operands\", node.pos));\n    }\n    else if (rANode.outputType.valueType == 'number' && (node.operator == \"|\" || node.operator == '&')) {\n      totalErrors.push(new TypeError(\"incompatible operation for number operands\", node.pos));\n    }\n\n\n    let newNode = {\n      nodeType: node.nodeType,\n      operator: node.operator,\n      left: lANode,\n      right: rANode,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        // Since we've already checked the left and right are the same type\n        // we can set the overall value type to the left\n        valueType: lANode.outputType.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId,\n      value: undefined\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n\n    return {errors: [], aNode: newNode};\n  }\n}\n\nclass CheckFunction implements TypeChecker {\n  check(node: AST.FunctionNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n    let aArgs: AnalyzedTree.AnalyzedNode[] = [];\n\n    // First typecheck the argument(s)\n    const { errors: arg1Errors, aNode: arg1Node } = typecheckNode(node.args[0], registeredNodes);\n    totalErrors = totalErrors.concat(arg1Errors);\n    aArgs.push(arg1Node);\n    if (node.args.length > 1) {\n      const { errors: arg2Errors, aNode: arg2Node } = typecheckNode(node.args[1], registeredNodes);\n      totalErrors = totalErrors.concat(arg2Errors);\n      aArgs.push(arg2Node);\n      // Both arguments must have the same type\n      if (aArgs[0].outputType.valueType != aArgs[1].outputType.valueType) {\n        totalErrors.push(new TypeError(\"arguments must have same type\", node.args[0].pos));\n      }\n    }\n\n    const functionName = node.name\n    const argType = builtins[functionName].inputType;\n\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: functionName,\n      args: aArgs,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        valueType: builtins[functionName].resultType, // Refer to the builtins dictionary below\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId,\n      value: undefined\n    };\n\n    // If this is a builtin function, check it has the correct argument types\n    // otherwise throw an error (we don't know what this function is)\n    if (argType) {\n      // Assume both arguments are the same type (see error produced above)\n      if (argType != 'any' && newNode.args[0].outputType.valueType != argType) {\n        totalErrors.push(new TypeError(\"incompatible argument type for \" + functionName, node.pos));\n      }\n      \n    } else {\n      totalErrors.push(new TypeError(\"unknown function\", node.pos));\n    }\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\nclass CheckChoose implements TypeChecker {\n  check(node: AST.ChooseNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n\n    // First typecheck the inner nodes\n    const { errors: predErrors, aNode: predNode } = typecheckNode(predicate, registeredNodes);\n    const { errors: consErrors, aNode: consNode } = typecheckNode(consequent, registeredNodes);\n    const { errors: otherErrors, aNode: otherNode } = typecheckNode(otherwise, registeredNodes);\n    totalErrors = totalErrors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n    // Check that the return types are the same for both consequent and otherwise\n    if (consNode.outputType.valueType != otherNode.outputType.valueType) {\n      totalErrors.push(new TypeError(\"Return types are not the same for both cases\", consequent.pos));\n      totalErrors.push(new TypeError(\"Return types are not the same for both cases\", otherwise.pos));\n    }\n\n    // Check that the predicate returns a boolean\n    if (predNode.outputType.valueType != 'boolean') {\n      totalErrors.push(new TypeError(\"Predicate must return a boolean\", predicate.pos));\n    }\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predNode, consequent: consNode },\n      otherwise: otherNode,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        // Since we've already checked the consequent and otherwise statements are the same type\n        // we can set the overall value type to the consequent\n        valueType: consNode.outputType.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId,\n      value: undefined\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\nclass CheckVariable implements TypeChecker {\n  check(node: AST.VariableAssignmentNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n\n    // First typecheck the assignment node\n    const { errors: assignmentErrors, aNode: assignmentNode } = typecheckNode(node.assignment, registeredNodes);\n    totalErrors = totalErrors.concat(assignmentErrors);\n\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: node.name,\n      assignment: assignmentNode,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        valueType: assignmentNode.outputType.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId,\n      value: undefined\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\nclass CheckIdentifier implements TypeChecker {\n  check(node: AST.IdentifierNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n\n    // Grab the node the identifier was previously assigned to\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      totalErrors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    }\n\n    let newNode = {\n      nodeType: 'Identifier' as 'Identifier',\n      name: node.name,\n      assignmentId: node.assignmentId,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        valueType: valueNode.outputType.valueType, // Shouldn't be problem anymore\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId,\n      value: undefined\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\n// Dictionary of builtin functions that gives the necessary information for a given function name \nexport const builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string, constType: string} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\", constType: \"Constant\"},\n  \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\", constType: \"Non-Constant\"},\n  \"Sink\": {inputType: 'any', resultType: 'any', status: \"Maybe-Undefined\", constType: \"Constant\"},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Variable\", constType: \"Constant\"},\n  \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\", constType: \"Constant\"},\n  \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\", constType: \"Non-Constant\"},\n  \"Sqrt\": {inputType: 'number', resultType: 'number', status: \"Variable\", constType: \"Constant\"}\n}\n\nconst checkerMap: Partial<{[K in AST.NodeType]: TypeChecker}> = {\n  'Number' : new CheckNumber(),\n  'Boolean' : new CheckBoolean(),\n  'BinaryOperation' : new CheckBinary(),\n  'Function' : new CheckFunction(),\n  'Choose': new CheckChoose(),\n  'VariableAssignment': new CheckVariable(),\n  'Identifier': new CheckIdentifier()\n}","import {StreamParser, StringStream} from \"@codemirror/stream-parser\"\nimport {Diagnostic} from \"@codemirror/lint\"\nimport {EditorView} from \"@codemirror/view\"\nimport {State, getDefaultToken} from './lexer'\nimport {ParseError} from './position'\nimport {typecheck} from './typechecker';\nimport {mudCheck} from './mudChecker';\nimport {parseResults} from './parseResults';\nimport * as AnalyzedTree from './analyzedTree';\n\n/**\n * The extension for our language\n */\nexport const miniCL: StreamParser<State> = {\n  startState: function (): State {\n    return {line: 1, stack: ['default']};\n  },\n  token: function (stream: StringStream, state: State): string | undefined {\n    if (stream.eatSpace()) return null;\n    return token2tag(getDefaultToken(stream, state));\n  }\n};\n\n/**\n * The linter for our language\n */\n export const miniCLLinter = () => (view: EditorView): Diagnostic[] => {\n\n  // Get the result types\n  const results = view.state.field(parseResults);\n\n  let dependsMap: {[key: string]: string[]} = {};\n  let registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode} = {}\n  // Error checking\n  const {errors: typeErrors, aTree: analyzedNodes} = typecheck(results.nodes, registeredNodes);\n  const mudErrors = mudCheck(analyzedNodes, registeredNodes, dependsMap);\n\n  // Create a diagnostic for each kind of error\n  const parseDiagnostics = results.parseErrors.map(makeDiagnostic(view));\n  const typeDiagnostics = typeErrors.map(makeDiagnostic(view));\n  const mudDiagnostics = mudErrors.map(makeDiagnostic(view, 'warning'));\n\n  return parseDiagnostics.concat(typeDiagnostics).concat(mudDiagnostics);\n}\n\n/**\n * Create a diagnostic from an error\n */\nconst makeDiagnostic = (view: EditorView, severity: 'error' | 'info' | 'warning' = 'error') => \n  (error): Diagnostic => {\n    return {\n      from: firstLine(view, error) + error.position.first_column,\n      to: lastLine(view, error) + error.position.last_column,\n      message: error.message,\n      severity: severity\n    }\n}\n\n/**\n * @returns the line number for the start of the error\n */\nfunction firstLine(view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.first_line).from;\n}\n\n/**\n * @returns the line number for the end of the error\n */\nfunction lastLine (view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.last_line).from;    \n}\n\n/**\n * Convert our bespoke parser Token type to a token type that is recognized by CodeMirror\n */\nfunction token2tag(token: string): string | undefined {\n  switch (token) {\n    case 'NUMBER':\n      return 'number';\n\n    case 'TRUE':\n      return 'boolean';\n\n    case 'FALSE':\n      return 'boolean';\n\n    case '(':\n    case ')':\n      return 'bracket';\n\n    case '+':\n    case '-':\n    case '*':\n    case '/':\n    case '|':\n    case '&':\n    case '=':\n      return 'operator';\n\n    case 'COMMENT':\n      return 'comment';\n\n    case 'CHOOSE1':\n    case 'CHOOSE2':\n      return 'choose';\n\n    case 'FUNCTION':\n      return 'function';\n\n    case 'IDENTIFIER':\n      return 'variable';\n\n    case 'ERROR':\n      return 'error';\n\n    default:\n      return undefined;\n  }\n}\n","import * as d3Hierarchy from 'd3-hierarchy';\nimport * as d3Select from 'd3-selection';\nimport * as d3shape from 'd3-shape';\nimport * as AST from './ast';\n\nexport function visualize(nodes: AST.Node[]): void {\n\n    // Placement and size of tree\n    const margin = {top: 20, right: 90, bottom: 20, left: 90};\n    const height = 300 - margin.top - margin.bottom;\n    const width  = 500 - margin.left - margin.right;\n  \n    // Make the svg\n    d3Select.select('#viz').selectAll('svg').remove();\n    const viz = d3Select.select('#viz').append('svg');\n  \n    // Remove existing visualizations\n    viz.selectAll('*').remove();\n  \n    // Add a new visualization\n    viz.attr('width', width + margin.left + margin.right)\n       .attr('height', height + margin.top + margin.bottom);\n\n    const root: Node = {nodeType: 'Program', children: nodes}\n\n    // Visualize all the statements\n    // for (var statement of nodes) {\n\n      // Create the tree and layout\n      const treemap = d3Hierarchy.tree()\n        .size([height, width])\n        .separation(() => 1);\n      const treelayout = d3Hierarchy.hierarchy(root, getChildren);\n      const tree = treemap(treelayout);\n  \n      // Add a new graph element for this statement\n      const g = viz.append('g')\n                  //  .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n                   .attr('transform', `translate(${margin.left}, ${margin.top})`)\n                   .attr(\"font-family\", \"sans-serif\")\n                   .attr(\"font-size\", 12)\n               \n      // Edge updates\n      const link = g.selectAll('path.link').data(tree.links());\n\n      // Edge entry\n      const linkEnter = link.enter().append('path', 'g');\n        \n      // general edge attributes\n      linkEnter.attr('class', 'link')\n               .attr('fill', 'none')\n               .attr(\"stroke-opacity\", 0.4)\n               .attr('stroke', '#555')\n               .attr(\"stroke-width\", 1.5)\n               .attr('d', connection);\n\n        \n      // Node updates\n      const node = g.selectAll('g.node').data(tree.descendants());\n\n      // Node entry\n      const nodeEnter = node.enter().append('g');\n\n      // general node attributes\n      nodeEnter.attr('class', 'node')\n               .attr('transform', d => `translate(${d.y}, ${d.x})`);\n\n      nodeEnter.append('circle')\n               .attr(\"fill\", getFill)\n               .attr('r', '2.5')\n               .attr('stroke-width', 10);\n\n      // add text\n      nodeEnter.append('text')\n                // .attr('dy', '-10px')\n                .attr(\"dy\", \"0.31em\")\n                .attr(\"x\", d => d.children ? -8 : 8)\n                .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n                .attr('fill', d => isUndefined(d) ? '#fc6666' : 'black')\n                .style(\"fill-opacity\", 1)\n                .call(getTextBox)\n                .datum(d => d.data)\n                .text(getText)\n          .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n    \n      // Highlight undefined -- not working\n      // Inspired in part by https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\n      nodeEnter.filter((d,i) => isUndefined(d))\n        .call(yep)\n        .insert('rect', 'text')\n        .attr(\"x\", function(d){return d.bbox.x})\n        .attr(\"y\", function(d){return d.bbox.y})\n        .attr(\"width\", function(d){return d.bbox.width})\n        .attr(\"height\", function(d){return d.bbox.height}) \n        .attr('fill', 'black')             \n    // }\n}\n\n// From https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\nfunction getTextBox(selection) {\n  selection.each(function(d){d.bbox = this.getBBox();})\n}\n\nfunction yep(selection) {\n  // console.log(selection.nodes().map((d)=>d.bbox));\n}\n\n\nconst connection = d3shape.linkHorizontal().x(d => d.y).y(d => d.x)\n\nfunction getChildren(node: AST.Node): AST.Node[] {\n  var children: AST.Node[] = [];\n  switch (node.nodeType) {\n    case 'Program':\n      children = node.children;\n      break;\n    case 'Function':\n      children = node.args;\n      break;\n    case 'Choose':\n      children = [node.case.predicate, node.case.consequent, node.otherwise];\n      break;\n    case 'BinaryOperation':\n      children = [node.left, node.right];\n      break;\n    case 'VariableAssignment':\n      children = [node.assignment];\n      break;\n    default:\n      children = [];\n    }\n\n  return children;\n}\n\nfunction getText(node) {\n  var text = \"\";\n  switch (node.nodeType) {\n    case 'Program':\n      text = '';\n      break;\n    case 'Function':\n      text = node.name;\n      break;\n    case 'Choose':\n      text = \"choose\";\n      break;\n    case 'BinaryOperation':\n      text = node.operator;\n      break;\n    case 'VariableAssignment':\n      text = node.name;\n      break;\n    case 'Identifier':\n      text = node.name;\n      break;\n    case 'Number':  \n      text = node.value.toString();\n      break;\n    case 'Boolean':\n      text = node.value.toString();\n      break;\n    default:\n      text = \"\";\n  }\n\n  return text;\n}\n\nfunction getFill(node): string {\n  if (isUndefined(node)) {\n    return '#fc6666'\n  }\n  if (node.children) {\n    return '#555'\n  } else {\n    return '#999'\n  }\n}\n\nfunction isUndefined(d) {\n  return d.data.outputType?.status === 'Maybe-Undefined'\n}","import {Transaction} from \"@codemirror/state\"\nimport {json, jsonParseLinter} from \"@codemirror/lang-json\"\nimport {foldAll} from \"@codemirror/fold\"\nimport { visualize } from \"./visualization\"\nimport {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {linter} from \"@codemirror/lint\"\nimport { parseResults } from \"./parseResults\"\n\n/**\n * Given a transaction, update the developer tools\n */\n export function updateDevTools(tr: Transaction) {\n  const results = tr.state.field(parseResults)\n\n  // Display JSON for AST\n  const astJSON = JSON.stringify(results.nodes, null, 2)\n  replaceContents(astViewer, astJSON);\n\n  // Display JSON for depends map\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\n  replaceContents(dependsViewer, dependsJSON);\n\n  // Draw the AST\n  visualize(results.nodes);\n}\n\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\nfunction newJSONViewerState(): EditorState {\n  return EditorState.create({\n    extensions: [\n      basicSetup,\n      json(),\n      linter(jsonParseLinter()),\n      EditorView.editable.of(false),\n    ],\n  })\n}\n\n// JSON viewer for AST\nlet astViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\"),\n});\n\n// JSON viewer for depends map\nlet dependsViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#depends-json\"),\n});\n\n/**\n * Replace the entire contents of an editor\n */\nfunction replaceContents(editor: EditorView, contents: string) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  foldAll(editor);  // By default, fold all levels\n}\n","import {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {Transaction} from \"@codemirror/state\"\nimport {linter} from \"@codemirror/lint\"\nimport {miniCL, miniCLLinter} from \"./miniCL\"\nimport {StreamLanguage} from \"@codemirror/stream-parser\"\nimport {parseResults} from \"./parseResults\"\nimport {updateDevTools} from \"./devTools\"\nimport \"./styles.css\"\nimport \"./desmos_icons.css\"\n\n// Create the CodeMirror miniCL editor and add it to the document.\nlet miniCLEditor = new EditorView({\n  state: EditorState.create({\n    extensions: [\n      basicSetup,                     // https://codemirror.net/6/docs/ref/#basic-setup\n      StreamLanguage.define(miniCL),  // syntax coloring for miniCL\n      parseResults,                   // field that holds the results of parsing\n      linter(miniCLLinter())          // error-checking for miniCL\n    ],\n  }),\n  dispatch: updateOutput,\n  parent: document.querySelector(\"#miniCL-editor\")\n})\n\n// When the content changes, update the editor and the dev tools\nfunction updateOutput(tr: Transaction) {\n  miniCLEditor.update([tr]);\n  updateDevTools(tr);\n}\n","import * as AST from './ast';\nimport {builtins} from './typechecker';\nimport * as AnalyzedTree from './analyzedTree';\n\n/*\n    The findBases function, given an AST node and the current dependsMap, determines\n    the \"bases\" of that node and returns them in a list of nodeIds.\n\n    Bases are nodes that introduce the possibility of being undefined.\n    For example, the InputN() function represents student input, and therefore\n    introduces the possibility to be undefined.\n*/\n\nexport function findBases(node: AnalyzedTree.AnalyzedNode, dependsMap: {[key: string]: string[]}): string[] {\n    return baseMap[node.nodeType].findBase(node, dependsMap); \n}\n\nexport interface BaseFinder {\n  findBase(node: AnalyzedTree.AnalyzedNode, dependsMap: {[key: string]: string[]}): string[];\n}\n\n// Numbers are constant, and therefore cannot have bases\nclass BaseNumber implements BaseFinder {\n  findBase(node: AnalyzedTree.NumberNode): string[] {\n    return []\n  }\n}\n\n// Booleans are constant, and therefore cannot have bases\nclass BaseBoolean implements BaseFinder {\n    findBase(node: AnalyzedTree.BooleanNode): string[] {\n        return []\n    }\n}\n\n// Binary operations could have bases on either side of their operator\nclass BaseBinary implements BaseFinder {\n    findBase(node: AnalyzedTree.BinaryOperationNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // recursively call findBases on left and right\n        let leftList = findBases(node.left, dependsMap);\n        baseList = baseList.concat(leftList);\n        let rightList = findBases(node.right, dependsMap)\n        // combine bases from left and right\n        baseList = baseList.concat(rightList);\n        return baseList;\n    }\n}\n\n// In this proof of concept, functions are the only bases\n// They can produce an undefined value (e.g. Inverse(0)) or are inherently non-constant (e.g. InputN)\n// Otherwise, the base of the function is determined by its argument(s)\n// This means that the base is the id of the function node itself\nclass BaseFunction implements BaseFinder {\n    findBase(node: AnalyzedTree.FunctionNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n\n        if (node.outputType.status == 'Def-Undefined') {\n            // e.g. with Inverse(0)\n            baseList.push(node.nodeId);\n        } else if (builtins[node.name].status == 'Variable') {\n            // recursively call findBases on argument(s)\n            for (let i = 0; i < node.args.length; i++) {\n                baseList = baseList.concat(findBases(node.args[i], dependsMap));\n            }\n        } else if (builtins[node.name].constType == 'Non-Constant') {\n            // e.g. with InputN(2)\n            baseList.push(node.nodeId);\n        }\n\n        return baseList;\n    }\n}\n\n// The bases of choose nodes are determined by the bases of their consequent and their otherwise\nclass BaseChoose implements BaseFinder {\n    findBase(node: AnalyzedTree.ChooseNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n \n        let consBases = findBases(node.case.consequent, dependsMap);\n        baseList = baseList.concat(consBases);\n\n        let otherBases = findBases(node.otherwise, dependsMap);\n        baseList = baseList.concat(otherBases);\n\n        return baseList;\n    }\n}\n\n// Variable assignments are constant, and therefore cannot have bases\nclass BaseVariableAssignment implements BaseFinder {\n    findBase(node: AnalyzedTree.VariableAssignmentNode): string[] {\n        return []\n    }\n}\n\n// The bases of an identifier are stored in the dependsMap, which has a reference\n// to its assignment.\nclass BaseIdentifier implements BaseFinder {\n    findBase(node: AnalyzedTree.IdentifierNode, dependsMap: {[key: string]: string[]}): string[] {\n        // follow the chain in the dependsMap\n        return dependsMap[node.assignmentId];\n    }\n}\n\nconst baseMap: Partial<{[K in AST.NodeType]: BaseFinder}> = {\n  'Number' : new BaseNumber(),\n  'Boolean' : new BaseBoolean(),\n  'BinaryOperation' : new BaseBinary(),\n  'Function' : new BaseFunction(),\n  'Choose': new BaseChoose(),\n  'VariableAssignment': new BaseVariableAssignment(),\n  'Identifier': new BaseIdentifier()\n}"]}