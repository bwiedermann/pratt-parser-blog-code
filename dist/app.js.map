{"version":3,"sources":["src/position.ts","src/findBase.ts","src/parselet.ts","src/lexer.ts","src/tokenstream.ts","src/parser.ts","src/parseResults.ts","src/typechecker.ts","src/mudChecker.ts","src/miniCL.ts","src/visualization.ts","src/devTools.ts","src/index.ts"],"names":["token","first_line","line","last_line","first_column","last_column","start","end","pos","toString","constructor","message","position","node","dependsMap","baseMap","nodeType","findBase","baseList","leftList","findBases","left","concat","rightList","right","builtins","name","status","i","args","length","push","nodeId","consBases","case","consequent","otherBases","otherwise","assignmentId","BaseNumber","BaseBoolean","BaseBinary","BaseFunction","BaseChoose","BaseVariableAssignment","BaseIdentifier","inputType","resultType","parse","_parser","_tokens","varMap","registeredNodes","position_1","id","newNode","value","parseFloat","text","outputType","valueType","asserts","parser","tokens","_token","exp","expectToken","tokenType","associativity","ConsequentParselet","bindingPower","last","operator","undefined","arg1","arg2","predicate","assignment","findBase_1","varParselet","VariableAssignmentParselet","state","stack","split","stream","stream_parser_1","string","eol","getToken","emitToken","makeEmit","fullToken","Error","getDefaultToken","type","current","eatSpace","match","next","lexer_1","filter","t","consume","peek","expectedType","actual","nodes","tokenstream_1","Parser","e","errors","bindingPowers","bindingClasses","Object","keys","consequentMap","currentBindingPower","initialParselet","initialMap","consequentParselet","AbstractParser","NUMBER","NumberParselet","TRUE","BooleanParselet","FALSE","ParenParselet","FUNCTION","FunctionParselet","CHOOSE1","ChooseParselet","IDENTIFIER","IdentifierParselet","BinaryOperatorParselet","classes","state_1","define","create","emptyParseResults","update","tr","docChanged","parseProgram","contents","doc","ast","parser_1","parseErrors","map","n","typecheckNode","checkerMap","check","TypeError","arg1Errors","arg2Errors","functionName","argType","predErrors","consErrors","otherErrors","assignmentErrors","valueNode","CheckNumber","CheckBoolean","CheckBinary","CheckFunction","CheckChoose","CheckVariable","CheckIdentifier","mudCheckNode","mudCheckerMap","mudCheck","intersection","leftAsserts","rightAsserts","find","allAsserts","bases","returnType","consDef","otherDef","localAsserts","handleCheck","MudCheckNumber","MudCheckBoolean","MudCheckBinary","MudCheckFunction","MudCheckChoose","MudCheckVariable","MudCheckIdentifier","contained","startState","token2tag","view","results","field","parseResults_1","mudErrors","mudChecker_1","typeErrors","typechecker_1","parseDiagnostics","makeDiagnostic","typeDiagnostics","mudDiagnostics","severity","error","from","firstLine","to","lastLine","margin","top","bottom","height","width","select","selectAll","remove","viz","append","attr","root","children","treemap","tree","size","separation","treelayout","hierarchy","getChildren","g","link","data","links","linkEnter","enter","connection","descendants","nodeEnter","d","y","x","getFill","isUndefined","style","call","getTextBox","datum","getText","clone","lower","yep","insert","bbox","selection","each","getBBox","linkHorizontal","astJSON","JSON","stringify","replaceContents","astViewer","dependsJSON","dependsViewer","visualization_1","basic_setup_1","extensions","lang_json_1","lint_1","editable","of","newJSONViewerState","parent","document","querySelector","editor","changes","fold_1","miniCLEditor","miniCL_1","dispatch","updateOutput","devTools_1"],"mappings":"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","file":"","sourcesContent":["import { Token } from './lexer';\n\nexport type Position = {\n  first_line: number;\n  first_column: number;\n  last_line: number;\n  last_column: number;\n};\n\nexport function token2pos(token: Token): Position {\n  return {\n    first_line: token.line,\n    last_line: token.line,\n    first_column: token.first_column,\n    last_column: token.last_column\n  }\n}\n\nexport function join(start: Position, end: Position) {\n  return {\n    first_line: start.first_line,\n    last_line: end.last_line,\n    first_column: start.first_column,\n    last_column: end.last_column\n  };\n}\n\nexport function pos2string(pos: Position): string {\n  return pos.first_line.toString() + \".\" +\n         pos.first_column.toString() + \".\" +\n         pos.last_line.toString() + \".\" +\n         pos.last_column.toString();\n}\n\n// note, extending Error in the browser is problematic\n// https://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\nexport class ParseError {\n  constructor(public message: string, public position: Position) {}\n}\n","import * as AST from './ast';\n\nexport function findBases(node: AST.Node, dependsMap: {[key: string]: string[]}): string[] {\n    return baseMap[node.nodeType].findBase(node, dependsMap); \n}\n\nexport interface BaseFinder {\n  findBase(node: AST.Node, dependsMap: {[key: string]: string[]}): string[];\n}\n\nclass BaseNumber implements BaseFinder {\n  findBase(node: AST.NumberNode): string[] {\n    return []\n  }\n}\n\nclass BaseBoolean implements BaseFinder {\n    findBase(node: AST.BooleanNode): string[] {\n        return []\n    }\n}\n\nclass BaseBinary implements BaseFinder {\n    findBase(node: AST.BinaryOperationNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // recursively call findBases on left and right\n        let leftList = findBases(node.left, dependsMap);\n        baseList = baseList.concat(leftList);\n        let rightList = findBases(node.right, dependsMap)\n        baseList = baseList.concat(rightList);\n        return baseList;\n    }\n}\n\n// examples: x = Input(3); x = IsDefined(Input(3)); z = Inverse(x)\n// need dependsMap for the third example\nclass BaseFunction implements BaseFinder {\n    findBase(node: AST.FunctionNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        \n        // If the builtin status IS a variable, then it does depend on its arguments\n        // Unlike for Definitely and Maybe-Undefined functions, which status is the same always\n        if (builtins[node.name].status == 'Variable') {\n            // recursively call findBases on argument(s)\n            for (let i = 0; i < node.args.length; i++) {\n                baseList = baseList.concat(findBases(node.args[i], dependsMap));\n            }\n        } else if (builtins[node.name].status == 'Maybe-Undefined') {\n            // If Maybe-Undefined funtion, it IS a base (the root of a maybe-undefined status)\n            baseList.push(node.nodeId);\n        }\n\n        return baseList;\n    }\n}\n\n// assume that choose nodes will never create their own bases\n// they can still error check previously defined bases\nclass BaseChoose implements BaseFinder {\n    findBase(node: AST.ChooseNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // the bases of the cons and the otherwise\n        let consBases = findBases(node.case.consequent, dependsMap);\n        baseList = baseList.concat(consBases);\n        let otherBases = findBases(node.otherwise, dependsMap);\n        baseList = baseList.concat(otherBases);\n        return baseList;\n    }\n}\n\nclass BaseVariableAssignment implements BaseFinder {\n    findBase(node: AST.VariableAssignmentNode): string[] {\n        return []\n    }\n}\n\nclass BaseIdentifier implements BaseFinder {\n    findBase(node: AST.IdentifierNode, dependsMap: {[key: string]: string[]}): string[] {\n        // follow the chain in the dependsMap\n        return dependsMap[node.assignmentId];\n    }\n}\n\n\nconst baseMap: Partial<{[K in AST.NodeType]: BaseFinder}> = {\n  'Number' : new BaseNumber(),\n  'Boolean' : new BaseBoolean(),\n  'BinaryOperation' : new BaseBinary(),\n  'Function' : new BaseFunction(),\n  'Choose': new BaseChoose(),\n  'VariableAssignment': new BaseVariableAssignment(),\n  'Identifier': new BaseIdentifier()\n}\n\nconst builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string} } = {\n    \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\"},\n    \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\"},\n    \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\"},\n    \"Sink\": {inputType: 'any', resultType: 'any', status: \"Variable\"},\n    \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Maybe-Undefined\"},\n    \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n    \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n    \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\"},\n    \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\"}\n}\n","import { TokenStream } from './tokenstream';\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\nimport * as AST from './ast';\nimport { AbstractParser } from './parser';\nimport {ParseError, token2pos, join, pos2string} from './position';\nimport {findBases} from './findBase';\n\nexport interface InitialParselet {\n  parse(parser: AbstractParser,\n        tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}): AST.Node;\n}\n\n\nexport class NumberParselet implements InitialParselet {\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream,\n        token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n    // add node to the map\n    let newNode = {\n      nodeType: 'Number' as 'Number',\n      value: parseFloat(token.text),\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'number' as 'number',\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class BooleanParselet implements InitialParselet {\n  constructor(private value: boolean) {}\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'Boolean' as 'Boolean',\n      value: this.value,\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'boolean' as 'boolean',\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ParenParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    _token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken(')');\n\n    return exp;\n  }\n}\n\nexport abstract class ConsequentParselet {\n  constructor(\n    readonly tokenType: TokenType,\n    readonly associativity: 'left' | 'right'\n  ) {}\n  abstract parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}\n  ): AST.Node;\n}\n\nexport class BinaryOperatorParselet extends ConsequentParselet {\n  constructor(\n    public tokenType: BinaryOperationTokenType,\n    associativity: 'left' | 'right'\n  ) {\n    super(tokenType, associativity);\n  }\n\n  parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}\n  ): AST.Node {\n    const bindingPower = parser.bindingPower(token);\n\n    const right = parser.parse(\n      tokens,\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\n      varMap,\n      registeredNodes,\n      dependsMap\n    );\n    const position = join(left.pos, token2pos(tokens.last()));\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n\n    return newNode;\n  }\n}\n\n// Parse function calls\n// Limitation: Functions are allowed to take exactly one argument\nexport class FunctionParselet implements InitialParselet {\n  \n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for one argument\n    let args = [arg1];\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for second argument\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: token.text,\n      args: args,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ChooseParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predicate, consequent: consequent },\n      otherwise: otherwise,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class VariableAssignmentParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    \n    // deal with variable assignment\n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n\n    // need to save the variable and its assignment in a lookup table\n    varMap[token.text] = id;\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                    valueType: assignment?.outputType?.valueType,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    dependsMap[id] = findBases(assignment, dependsMap); // NEW FUNCTION HERE\n\n    return newNode;\n  }\n}\n\nexport class IdentifierParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n    \n    const position = token2pos(token);\n    const id = pos2string(position);\n    // need to look up known variables in a lookup table (map?)\n\n    const assignmentId = varMap[token.text];\n\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);\n    }\n    else {\n      let newNode = {\n        nodeType: 'Identifier' as 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                      valueType: undefined,\n                      asserts: [] },\n        pos: position,\n        nodeId: id\n      };\n      registeredNodes[id] = newNode;\n      return newNode;\n    }\n  }\n}\n","import {StringStream} from \"@codemirror/stream-parser\"\n\nexport function getTokens(text: string): Token[] {\n  const tokens: Token[] = [];\n  const state: State = {line: 1, stack: ['default']};\n\n  for (const line of text.split('\\n')) {\n    const stream = new StringStream();\n    stream.string = line;\n    while (!stream.eol()) {\n      const token = getToken(stream, state);\n      const emitToken = makeEmit(stream, state);\n      const fullToken = emitToken(token as TokenType);\n      if (token != undefined) {\n        tokens.push(fullToken);\n      }\n\n      if (stream.start == stream.pos) {\n        throw new Error(\n          `getToken failed to advance stream at position ${\n            stream.pos\n          } in string ${stream.string}`,\n        );\n      }\n      stream.start = stream.pos;\n    }\n\n    state.line += 1;\n  }\n\n  return tokens;\n}\n\nexport function getToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  //Built for codeMirror streams API\n  //State is a stack of states\n  switch (state.stack[state.stack.length - 1]) {\n    default:\n      return getDefaultToken(stream, state);\n  }\n}\n\nfunction makeEmit(stream: StringStream, state: State) {\n  return function emitToken(type: TokenType): Token {\n    return {\n      type,\n      first_column: stream.start,\n      last_column: stream.pos,\n      line: state.line,\n      text: stream.current(),\n    };\n  };\n}\n\nexport function getDefaultToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  // const emitToken = makeEmit(stream, state);\n  if (stream.eatSpace()) {\n    // skip whitespace\n    return undefined;\n  }\n\n  if (stream.match(/\\+/)) {\n    return '+';\n  }\n\n  if (stream.match(/\\-/)) {\n    return '-';\n  }\n\n  if (stream.match(/\\*/)) {\n    return '*';\n  }\n\n  if (stream.match(/\\//)) {\n    return '/';\n  }\n\n  if (stream.match(/\\|/)) {\n    return '|';\n  }\n\n  if (stream.match(/\\&/)) {\n    return '&';\n  }\n\n  if (stream.match(/\\(/)) {\n    return '(';\n  }\n\n  if (stream.match(/\\)/)) {\n    return ')';\n  }\n\n  // adding an equals operator\n  if (stream.match(/\\=/)) {\n    return '=';\n  }\n\n  if (stream.match(/-?[0-9]+(\\.[0-9]+)?/)) {\n    return 'NUMBER';\n  }\n\n  if (stream.match(/True/)) {\n    return 'TRUE';\n  }\n\n  if (stream.match(/False/)) {\n    return 'FALSE';\n  }\n\n  if (stream.match(/#/)) {\n    if (!stream.match(/\\n/)) {\n      // comment lasts till end of line\n      stream.match(/.*/); // if no eol encountered, comment lasts till end of file\n    }\n    return 'COMMENT';\n  }\n\n  // hardcode when to be a choose node not an identifier to get around parsing\n  if (stream.match(/WHEN/)) {\n    return 'CHOOSE1';\n  }\n\n  // Remove otherwise clause for now\n  if (stream.match(/OTHERWISE/)) {\n    return 'CHOOSE2';\n  }\n\n  if (stream.match(/[A-Z]([a-z|A-Z])*/)) {\n    return 'FUNCTION';\n  }\n\n  // Identifiers\n  // For now, the form of a valid identifier is: a lower-case alphabetic character,\n  // followed by zero or more alpha characters.\n  if (stream.match(/[a-z]([a-z|A-Z])*/)) {\n    return 'IDENTIFIER';\n  }\n  \n\n  stream.next();\n  return 'ERROR';\n}\n\nexport type BinaryOperationTokenType =\n  | '+'\n  | '-'\n  | '*'\n  | '/'\n  | '|' // this is an or\n  | '&' // this is an and\n\nexport type TokenType =\n  | BinaryOperationTokenType\n  | 'NUM'\n  | 'TRUE'\n  | 'FALSE'\n  | '('\n  | ')'\n  | 'COMMENT'\n  | 'ERROR'\n  | 'FUNCTION'\n  | 'IDENTIFIER'\n  | 'CHOOSE1'\n  | 'CHOOSE2'\n  | '='\n\nexport interface Token<T extends TokenType = TokenType> {\n  type: T;\n  text: string;\n  line: number;\n  first_column: number;\n  last_column: number;\n}\n\ntype Mode = 'default';\n\nexport interface State {\n  stack: Mode[];\n  line: number;\n}\n","import {Token, TokenType, getTokens} from './lexer';\nimport {ParseError, token2pos} from './position';\n\nexport class TokenStream {\n  tokens: Token[];\n  pos: number = 0;\n\n  constructor(text: string) {\n    this.tokens = getTokens(text).filter(t => t.type != 'COMMENT');\n  }\n\n  consume(): Token | undefined {\n    const token = this.tokens[this.pos];\n    if (token) {\n      this.pos += 1;\n    }\n    return token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens[this.pos];\n  }\n\n  last(): Token {\n    return this.tokens[this.pos - 1];\n  }\n\n  expectToken<T extends TokenType>(expectedType: T): Token<T> {\n    const actual = this.consume();\n\n    if (!actual) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token but found none.`,\n        token2pos(this.last()),\n      );\n    }\n\n    if (actual.type != expectedType) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token type but found \"${actual.type}\".`,\n        token2pos(actual),\n      );\n    }\n\n    return actual as Token<T>;\n  }\n}\n","import * as Parselet from './parselet';\nimport {Token, TokenType} from './lexer';\nimport {TokenStream} from './tokenstream';\nimport {ParseError, token2pos} from './position';\nimport * as AST from './ast';\n\nexport function parse(text: string,\n                      varMap: {[key: string]: string},\n                      registeredNodes: {[key: string]: AST.Node},\n                      dependsMap: {[key: string]: string[]}): \n                      {nodes: AST.Node[]; errors: ParseError[]} {\n  const nodes: AST.Node[] = [];\n\n  const tokens = new TokenStream(text);\n  const parser = new Parser();\n  while (tokens.peek()) {\n    try {\n      nodes.push(parser.parse(tokens, 0, varMap, registeredNodes, dependsMap));\n    } catch (e) {\n      return {\n        nodes,\n        errors: [e],\n      };\n    }\n  }\n\n  return {nodes, errors: []};\n}\n\nexport abstract class AbstractParser {\n  public bindingPowers: {[tokenType in TokenType]: number};\n\n  protected abstract initialMap(): Partial<\n    {[K in TokenType]: Parselet.InitialParselet}\n  >;\n  protected abstract consequentMap(): Partial<\n    {[K in TokenType]: Parselet.ConsequentParselet}\n  >;\n  protected abstract bindingClasses(): TokenType[][];\n\n  constructor() {\n    this.bindingPowers = {} as any;\n\n    const bindingClasses = this.bindingClasses();\n    for (let i = 0; i < bindingClasses.length; i++) {\n      for (const tokenType of bindingClasses[i]) {\n        this.bindingPowers[tokenType] = 10 * i + 9;\n      }\n    }\n\n    for (const tokenType of Object.keys(this.consequentMap) as TokenType[]) {\n      if (this.bindingPowers[tokenType] == undefined) {\n        throw new Error(\n          `Token ${tokenType} defined in consequentMap has no associated binding power.\n          Make sure it is also listed in bindingClasses.`,\n        );\n      }\n    }\n  }\n\n  bindingPower(token: Token): number {\n    if (this.bindingPowers[token.type] != undefined) {\n      return this.bindingPowers[token.type];\n    } else {\n      throw new ParseError(\n        `Unexpected token type ${token.type}.`,\n        token2pos(token),\n      );\n    }\n  }\n\n  parse(tokens: TokenStream,\n        currentBindingPower: number,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}): AST.Node {\n    const token = tokens.consume();\n    if (!token) {\n      throw new ParseError(\n        `Unexpected end of tokens.`,\n        token2pos(tokens.last()),\n      );\n    }\n\n    const initialParselet = this.initialMap()[token.type];\n\n    if (!initialParselet) {\n      throw new ParseError(\n        `Unexpected token type ${token.type}`,\n        token2pos(token),\n      );\n    }\n\n    let left = initialParselet.parse(this, tokens, token, varMap, registeredNodes, dependsMap);\n\n    while (true) {\n      const next = tokens.peek();\n      if (!next) {\n        break;\n      }\n\n      const consequentParselet = this.consequentMap()[next.type];\n\n      if (!consequentParselet) {\n        break;\n      }\n\n      if (currentBindingPower >= this.bindingPower(next)) {\n        break;\n      }\n\n      tokens.consume();\n      left = consequentParselet.parse(this, tokens, left, next, varMap, registeredNodes, dependsMap);\n    }\n\n    return left;\n  }\n}\n\nexport class Parser extends AbstractParser {\n  initialMap() {\n    return {\n      NUMBER: new Parselet.NumberParselet(),\n      TRUE: new Parselet.BooleanParselet(true),\n      FALSE: new Parselet.BooleanParselet(false),\n      '(': new Parselet.ParenParselet(),\n      FUNCTION: new Parselet.FunctionParselet(),\n      CHOOSE1: new Parselet.ChooseParselet(),\n      IDENTIFIER: new Parselet.IdentifierParselet()\n    };\n  }\n\n  consequentMap() {\n    return {\n      '+': new Parselet.BinaryOperatorParselet('+', 'left'),\n      '-': new Parselet.BinaryOperatorParselet('-', 'left'),\n      '*': new Parselet.BinaryOperatorParselet('*', 'left'),\n      '/': new Parselet.BinaryOperatorParselet('/', 'left'),\n      '|': new Parselet.BinaryOperatorParselet('|', 'right'),\n      '&': new Parselet.BinaryOperatorParselet('&', 'right')\n    };\n  }\n\n  bindingClasses() {\n    const classes: TokenType[][] = [['+', '-'], ['*', '/'], ['|', '&']];\n    return classes;\n  }\n}\n","import {StateField} from \"@codemirror/state\"\nimport {Transaction} from \"@codemirror/state\"\nimport * as AST from './ast';\nimport {parse} from './parser';\nimport {ParseError} from './position';\n\n/**\n * A State field that holds the results of parsing\n */\nexport const parseResults: StateField<ParseResults> = StateField.define({\n  create() { return emptyParseResults },\n  update(value, tr) { return tr.docChanged ? parseProgram(tr) : value }\n})\n\n/**\n * Parse the program created from a transaction, returning a ParseResults object\n */\nfunction parseProgram(tr: Transaction) : ParseResults {\n  const contents = tr.state.doc.toString()\n\n  let varMap: {[key: string]: string} = {}\n  let registeredNodes: {[key: string]: AST.Node} = {}\n  let dependsMap: {[key: string]: string[]} = {}\n  const ast = parse(contents, varMap, registeredNodes, dependsMap)\n\n  return {\n    nodes: ast.nodes,\n    parseErrors: ast.errors,\n    varMap: varMap,\n    registeredNodes: registeredNodes,\n    dependsMap: dependsMap\n  }\n}\n\n/**\n * Type that describes the results of parsing\n */\nexport type ParseResults = {\n  nodes: AST.Node[];\n  parseErrors: ParseError[];\n  varMap: {[key: string]: string};\n  registeredNodes: {[key: string]: AST.Node};\n  dependsMap: {[key: string]: string[]};\n}\n\n/**\n * Can be used as the initial results of parsing\n */\nconst emptyParseResults: ParseResults = {\n  nodes: [],\n  parseErrors: [],\n  varMap: {},\n  registeredNodes: {},\n  dependsMap: {}\n}\n","import {Position} from './position';\nimport * as AST from './ast';\nimport {equals} from './equals';\n\n/***** ITERATION: change all outputType.valueType to simply outputType *****/\n\nexport function typecheck(nodes: AST.Node[], registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  const errors = nodes.map(n => typecheckNode(n, registeredNodes));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction typecheckNode(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  return checkerMap[node.nodeType].check(node, registeredNodes);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface TypeChecker {\n  check(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[];\n}\n\nclass CheckNumber implements TypeChecker {\n  check(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\nclass CheckBoolean implements TypeChecker {\n  check(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\nclass CheckBinary implements TypeChecker {\n  check(node: AST.BinaryOperationNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    const errors: TypeError[] = typecheckNode(node.left, registeredNodes).concat(typecheckNode(node.right, registeredNodes));\n    \n    // Check if same operand type (both numbers, both booleans)\n    if (node.left?.outputType?.valueType != node.right?.outputType?.valueType) {\n      errors.push(new TypeError(\"incompatible types for binary operator\", node.pos));\n    }\n    // Check if incorrect combination of operator and operands\n    else if (node.right?.outputType?.valueType == 'boolean' && (node.operator != \"|\" && node.operator != '&')) {\n      errors.push(new TypeError(\"incompatible operation for boolean operands\", node.pos));\n    }\n    else if (node.right?.outputType?.valueType == 'number' && (node.operator == \"|\" || node.operator == '&')) {\n      errors.push(new TypeError(\"incompatible operation for number operands\", node.pos));\n    }\n\n    node.outputType.valueType = node.left?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckFunction implements TypeChecker {\n  check(node: AST.FunctionNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First typecheck the argument\n    const arg1Errors = typecheckNode(node.args[0], registeredNodes);\n    errors = errors.concat(arg1Errors);\n    if (node.args.length > 1) {\n      const arg2Errors = typecheckNode(node.args[1], registeredNodes);\n      errors = errors.concat(arg2Errors);\n      if (node.args[0]?.outputType?.valueType != node.args[1]?.outputType?.valueType) {\n        errors.push(new TypeError(\"arguments must have same type\", node.args[0].pos));\n      }\n    }\n\n    const functionName = node.name\n    const argType = builtins[functionName].inputType;\n    node.outputType.valueType = builtins[functionName].resultType;\n\n    // we found a builtin function\n    if (argType) {\n\n      // typecheck the argument\n      // Assume both arguments are the same type (see error produced above)\n      if (argType != 'any' && node.args[0]?.outputType?.valueType != argType) {\n        errors.push(new TypeError(\"incompatible argument type for \" + functionName, node.pos));\n      }\n      \n    }\n  \n    // this is not a known, builtin function\n    else {\n      errors.push(new TypeError(\"unknown function\", node.pos));\n    }    \n\n    return errors;\n  }\n}\n\nclass CheckChoose implements TypeChecker {\n  check(node: AST.ChooseNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n\n    // First typecheck the inner nodes\n    const predErrors = typecheckNode(predicate, registeredNodes);\n    const consErrors = typecheckNode(consequent, registeredNodes);\n    const otherErrors = typecheckNode(otherwise, registeredNodes);\n    errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n    // check return types are the same for both cases\n    if (consequent?.outputType?.valueType != otherwise?.outputType?.valueType) {\n      errors.push(new TypeError(\"Return types are not the same for both cases\", consequent.pos));\n      errors.push(new TypeError(\"Return types are not the same for both cases\", otherwise.pos));\n    }\n\n    // check that the predicate returns a boolean\n    if (predicate.outputType.valueType != 'boolean') {\n      errors.push(new TypeError(\"Predicate must return a boolean\", predicate.pos));\n    }\n\n    node.outputType.valueType = consequent?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckVariable implements TypeChecker {\n  check(node: AST.VariableAssignmentNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n    // First typecheck the assignment node\n    const assignmentErrors = typecheckNode(node.assignment, registeredNodes);\n    errors = errors.concat(assignmentErrors);\n\n    node.outputType.valueType = node.assignment?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckIdentifier implements TypeChecker {\n  check(node: AST.IdentifierNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Maybe make assigmentId be valueId?\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    }\n\n    node.outputType.valueType = valueNode.outputType.valueType;\n\n    return errors;\n  }\n}\n\n// Dictionary of builtin functions that maps a function name to the type of its argument\nconst builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\"},\n  \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\"},\n  \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\"},\n  \"Sink\": {inputType: 'any', resultType: 'any', status: \"Variable\"},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Maybe-Undefined\"},\n  \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\"},\n  \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\"}\n}\n\nconst checkerMap: Partial<{[K in AST.NodeType]: TypeChecker}> = {\n  'Number' : new CheckNumber(),\n  'Boolean' : new CheckBoolean(),\n  'BinaryOperation' : new CheckBinary(),\n  'Function' : new CheckFunction(),\n  'Choose': new CheckChoose(),\n  'VariableAssignment': new CheckVariable(),\n  'Identifier': new CheckIdentifier()\n}","import {Position} from './position';\nimport * as AST from './ast';\nimport {equals} from './equals';\nimport {findBases} from './findBase';\n\nexport function mudCheck(nodes: AST.Node[], \n                        registeredNodes: {[key: string]: AST.Node},\n                        dependsMap: {[key: string]: string[]}): TypeError[] {\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction mudCheckNode(node: AST.Node, \n                    nodes: AST.Node[], \n                    registeredNodes: {[key: string]: AST.Node},\n                    dependsMap: {[key: string]: string[]}): TypeError[] {\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface MudChecker {\n  mudCheck(node: AST.Node, \n          nodes: AST.Node[], \n          registeredNodes: {[key: string]: AST.Node},\n          dependsMap: {[key: string]: string[]}): TypeError[];\n}\n\nclass MudCheckNumber implements MudChecker {\n  mudCheck(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\nclass MudCheckBoolean implements MudChecker {\n    mudCheck(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\nclass MudCheckBinary implements MudChecker {\n    mudCheck(node: AST.BinaryOperationNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        const errors: TypeError[] = mudCheckNode(node.left, nodes, registeredNodes, dependsMap)\n        .concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));\n\n        // If no type errors, update the output type of this node, based on the outputType of its inputs\n        if (node.right?.outputType?.status == 'Maybe-Undefined' || node.left?.outputType?.status == 'Maybe-Undefined') {\n            node.outputType.status = 'Maybe-Undefined';\n        } else {\n            node.outputType.status = 'Definitely'\n        }\n\n        if (node.operator == '|') {\n          let intersection = [];\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          for (let i = 0; i < leftAsserts.length; i++) {\n            if (rightAsserts.find(e => e == leftAsserts[i])) {\n              intersection.push(leftAsserts[i]);\n            }\n          }\n          node.outputType.asserts = intersection;\n        }\n        else {\n          // if it's an and, we take all of the asserts\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          let allAsserts = leftAsserts.concat(rightAsserts);\n\n          node.outputType.asserts = allAsserts;\n        }\n\n        return errors;\n    }\n}\n\nclass MudCheckFunction implements MudChecker {\n    mudCheck(node: AST.FunctionNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        if (node.name == 'IsDefined') {\n          let bases = findBases(node.args[0], dependsMap);\n          node.outputType.asserts = node.outputType.asserts.concat(bases);\n        }\n        \n        // First typecheck the argument\n        const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);\n        errors = errors.concat(arg1Errors);\n        if (node.args.length > 1) {\n        const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);\n        errors = errors.concat(arg2Errors);\n        }\n\n       \n\n        const functionName = node.name\n        const returnType = builtins[functionName].resultType;\n\n        // only show error if in sink \"node\"\n        if (functionName == 'Sink') {\n          // if sink \"node\" takes in possibly undefined values, warn the author\n          // a sink has one argument\n          if (node.args[0]?.outputType?.status == 'Maybe-Undefined') {\n              errors.push(new TypeError(\"User facing content could be undefined.\", node.args[0].pos));\n          }\n        }\n        \n        if (builtins[functionName].status == \"Variable\") {\n          node.outputType.status = node.args[0]?.outputType?.status;\n        }\n        else {\n          node.outputType.status = builtins[functionName].status;\n        }\n\n        return errors;\n    }\n}\n\nclass MudCheckChoose implements MudChecker {\n    mudCheck(node: AST.ChooseNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        const predicate = node.case.predicate;\n        const consequent = node.case.consequent;\n        const otherwise = node.otherwise;\n\n        // add stuff to the assertMap\n\n        // First typecheck the inner nodes\n        const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);\n        const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);\n        const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);\n        errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n        // DEFUALT status = maybe-undefined\n\n        let consDef = false;\n        let otherDef = false;\n        let localAsserts: string[] = [];\n\n        if (otherwise.outputType.status == 'Definitely') {\n          otherDef = true;\n        }\n\n        // consequent in MU and we have a binary predicate\n        if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'BinaryOperation') {\n          \n          consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n\n        }\n\n\n        // propagate maybe-undefined type, or change to definitely\n        // if the predicate is not a function, we cannot error check its type\n        if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'Function') {\n          // we can only errorr check with IsDefined function\n          // IsDefined has only one argument\n          if (predicate.name == 'IsDefined') {\n            consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n          }\n        }\n\n        if (consequent?.outputType.status == 'Definitely') {\n          consDef = true;\n        }\n\n        if (consDef && otherDef) {\n          node.outputType.status = 'Definitely';\n        }\n\n        return errors;\n    }\n}\n\nclass MudCheckVariable implements MudChecker {\n    mudCheck(node: AST.VariableAssignmentNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n    // First typecheck the assignment node\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);\n    errors = errors.concat(assignmentErrors);\n\n    // Set variable assignment node output type to the same as it's assignment\n    node.outputType.status = node.assignment.outputType.status;\n\n    return errors;\n  }\n}\n\nclass MudCheckIdentifier implements MudChecker {\n    mudCheck(node: AST.IdentifierNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Maybe make assigmentId be valueId?\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    } else {\n      // If we found the assignment node, set the output type of the identifier\n      node.outputType.status = valueNode.outputType.status;\n    }\n\n    return errors;\n  }\n}\n\n// Dictionary of builtin functions that maps a function name to the type of its argument\nconst builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\"},\n  \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\"},\n  \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\"},\n  \"Sink\": {inputType: 'any', resultType: 'any', status: \"Variable\"},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Maybe-Undefined\"},\n  \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\"},\n  \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\"}\n}\n\nconst mudCheckerMap: Partial<{[K in AST.NodeType]: MudChecker}> = {\n  'Number' : new MudCheckNumber(),\n  'Boolean' : new MudCheckBoolean(),\n  'BinaryOperation' : new MudCheckBinary(),\n  'Function' : new MudCheckFunction(),\n  'Choose': new MudCheckChoose(),\n  'VariableAssignment': new MudCheckVariable(),\n  'Identifier': new MudCheckIdentifier()\n}\n\nfunction handleCheck(consequent: AST.Node,\n                    dependsMap: {[key: string]: string[]},\n                    asserts: string[]): boolean {\n\n  let consBases = findBases(consequent, dependsMap);\n\n  let contained = true;\n    for (let i = 0; i < consBases.length; i++) {\n      if (!asserts.find(e => e == consBases[i])) {\n        contained = false;\n      }\n    }\n\n    return contained;\n}","import {StreamParser, StringStream} from \"@codemirror/stream-parser\"\nimport {Diagnostic} from \"@codemirror/lint\"\nimport {EditorView} from \"@codemirror/view\"\nimport {State, getDefaultToken} from './lexer'\nimport {ParseError} from './position'\nimport {typecheck} from './typechecker';\nimport {mudCheck} from './mudChecker';\nimport {parseResults} from './parseResults';\n\n/**\n * The extension for our language\n */\nexport const miniCL: StreamParser<State> = {\n  startState: function (): State {\n    return {line: 1, stack: ['default']};\n  },\n  token: function (stream: StringStream, state: State): string | undefined {\n    if (stream.eatSpace()) return null;\n    return token2tag(getDefaultToken(stream, state));\n  }\n};\n\n/**\n * The linter for our language\n */\n export const miniCLLinter = () => (view: EditorView): Diagnostic[] => {\n\n  // Get the result types\n  const results = view.state.field(parseResults);\n\n  // Error checking\n  const mudErrors = mudCheck(results.nodes, results.registeredNodes, results.dependsMap);\n  const typeErrors = typecheck(results.nodes, results.registeredNodes);\n\n  // Create a diagnostic for each kind of error\n  const parseDiagnostics = results.parseErrors.map(makeDiagnostic(view));\n  const typeDiagnostics = typeErrors.map(makeDiagnostic(view));\n  const mudDiagnostics = mudErrors.map(makeDiagnostic(view, 'warning'));\n\n  return parseDiagnostics.concat(typeDiagnostics).concat(mudDiagnostics);\n}\n\n/**\n * Create a diagnostic from an error\n */\nconst makeDiagnostic = (view: EditorView, severity: 'error' | 'info' | 'warning' = 'error') => \n  (error): Diagnostic => {\n    return {\n      from: firstLine(view, error) + error.position.first_column,\n      to: lastLine(view, error) + error.position.last_column,\n      message: error.message,\n      severity: severity\n    }\n}\n\n/**\n * @returns the line number for the start of the error\n */\nfunction firstLine(view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.first_line).from;\n}\n\n/**\n * @returns the line number for the end of the error\n */\nfunction lastLine (view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.last_line).from;    \n}\n\n/**\n * Convert our bespoke parser Token type to a token type that is recognized by CodeMirror\n */\nfunction token2tag(token: string): string | undefined {\n  switch (token) {\n    case 'NUMBER':\n      return 'number';\n\n    case 'TRUE':\n      return 'boolean';\n\n    case 'FALSE':\n      return 'boolean';\n\n    case '(':\n    case ')':\n      return 'bracket';\n\n    case '+':\n    case '-':\n    case '*':\n    case '/':\n    case '|':\n    case '&':\n    case '=':\n      return 'operator';\n\n    case 'COMMENT':\n      return 'comment';\n\n    case 'CHOOSE1':\n    case 'CHOOSE2':\n      return 'choose';\n\n    case 'FUNCTION':\n      return 'function';\n\n    case 'IDENTIFIER':\n      return 'variable';\n\n    case 'ERROR':\n      return 'error';\n\n    default:\n      return undefined;\n  }\n}\n","import * as d3Hierarchy from 'd3-hierarchy';\nimport * as d3Select from 'd3-selection';\nimport * as d3shape from 'd3-shape';\nimport * as AST from './ast';\n\nexport function visualize(nodes: AST.Node[]): void {\n\n    // Placement and size of tree\n    const margin = {top: 20, right: 90, bottom: 20, left: 90};\n    const height = 300 - margin.top - margin.bottom;\n    const width  = 500 - margin.left - margin.right;\n  \n    // Make the svg\n    d3Select.select('#viz').selectAll('svg').remove();\n    const viz = d3Select.select('#viz').append('svg');\n  \n    // Remove existing visualizations\n    viz.selectAll('*').remove();\n  \n    // Add a new visualization\n    viz.attr('width', width + margin.left + margin.right)\n       .attr('height', height + margin.top + margin.bottom);\n\n    const root: Node = {nodeType: 'Program', children: nodes}\n\n    // Visualize all the statements\n    // for (var statement of nodes) {\n\n      // Create the tree and layout\n      const treemap = d3Hierarchy.tree()\n        .size([height, width])\n        .separation(() => 1);\n      const treelayout = d3Hierarchy.hierarchy(root, getChildren);\n      const tree = treemap(treelayout);\n  \n      // Add a new graph element for this statement\n      const g = viz.append('g')\n                  //  .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n                   .attr('transform', `translate(${margin.left}, ${margin.top})`)\n                   .attr(\"font-family\", \"sans-serif\")\n                   .attr(\"font-size\", 12)\n               \n      // Edge updates\n      const link = g.selectAll('path.link').data(tree.links());\n\n      // Edge entry\n      const linkEnter = link.enter().append('path', 'g');\n        \n      // general edge attributes\n      linkEnter.attr('class', 'link')\n               .attr('fill', 'none')\n               .attr(\"stroke-opacity\", 0.4)\n               .attr('stroke', '#555')\n               .attr(\"stroke-width\", 1.5)\n               .attr('d', connection);\n\n        \n      // Node updates\n      const node = g.selectAll('g.node').data(tree.descendants());\n\n      // Node entry\n      const nodeEnter = node.enter().append('g');\n\n      // general node attributes\n      nodeEnter.attr('class', 'node')\n               .attr('transform', d => `translate(${d.y}, ${d.x})`);\n\n      nodeEnter.append('circle')\n               .attr(\"fill\", getFill)\n               .attr('r', '2.5')\n               .attr('stroke-width', 10);\n\n      // add text\n      nodeEnter.append('text')\n                // .attr('dy', '-10px')\n                .attr(\"dy\", \"0.31em\")\n                .attr(\"x\", d => d.children ? -8 : 8)\n                .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n                .attr('fill', d => isUndefined(d) ? '#fc6666' : 'black')\n                .style(\"fill-opacity\", 1)\n                .call(getTextBox)\n                .datum(d => d.data)\n                .text(getText)\n          .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n    \n      // Highlight undefined -- not working\n      // Inspired in part by https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\n      nodeEnter.filter((d,i) => isUndefined(d))\n        .call(yep)\n        .insert('rect', 'text')\n        .attr(\"x\", function(d){return d.bbox.x})\n        .attr(\"y\", function(d){return d.bbox.y})\n        .attr(\"width\", function(d){return d.bbox.width})\n        .attr(\"height\", function(d){return d.bbox.height}) \n        .attr('fill', 'black')             \n    // }\n}\n\n// From https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\nfunction getTextBox(selection) {\n  selection.each(function(d){d.bbox = this.getBBox();})\n}\n\nfunction yep(selection) {\n  // console.log(selection.nodes().map((d)=>d.bbox));\n}\n\n\nconst connection = d3shape.linkHorizontal().x(d => d.y).y(d => d.x)\n\nfunction getChildren(node: AST.Node): AST.Node[] {\n  var children: AST.Node[] = [];\n  switch (node.nodeType) {\n    case 'Program':\n      children = node.children;\n      break;\n    case 'Function':\n      children = node.args;\n      break;\n    case 'Choose':\n      children = [node.case.predicate, node.case.consequent, node.otherwise];\n      break;\n    case 'BinaryOperation':\n      children = [node.left, node.right];\n      break;\n    case 'VariableAssignment':\n      children = [node.assignment];\n      break;\n    default:\n      children = [];\n    }\n\n  return children;\n}\n\nfunction getText(node) {\n  var text = \"\";\n  switch (node.nodeType) {\n    case 'Program':\n      text = '';\n      break;\n    case 'Function':\n      text = node.name;\n      break;\n    case 'Choose':\n      text = \"choose\";\n      break;\n    case 'BinaryOperation':\n      text = node.operator;\n      break;\n    case 'VariableAssignment':\n      text = node.name;\n      break;\n    case 'Identifier':\n      text = node.name;\n      break;\n    case 'Number':  \n      text = node.value.toString();\n      break;\n    case 'Boolean':\n      text = node.value.toString();\n      break;\n    default:\n      text = \"\";\n  }\n\n  return text;\n}\n\nfunction getFill(node): string {\n  if (isUndefined(node)) {\n    return '#fc6666'\n  }\n  if (node.children) {\n    return '#555'\n  } else {\n    return '#999'\n  }\n}\n\nfunction isUndefined(d) {\n  return d.data.outputType?.status === 'Maybe-Undefined'\n}","import {Transaction} from \"@codemirror/state\"\nimport {json, jsonParseLinter} from \"@codemirror/lang-json\"\nimport {foldAll} from \"@codemirror/fold\"\nimport { visualize } from \"./visualization\"\nimport {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {linter} from \"@codemirror/lint\"\nimport { parseResults } from \"./parseResults\"\n\n/**\n * Given a transaction, update the developer tools\n */\n export function updateDevTools(tr: Transaction) {\n  const results = tr.state.field(parseResults)\n\n  // Display JSON for AST\n  const astJSON = JSON.stringify(results.nodes, null, 2)\n  replaceContents(astViewer, astJSON);\n\n  // Display JSON for depends map\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\n  replaceContents(dependsViewer, dependsJSON);\n\n  // Draw the AST\n  visualize(results.nodes);\n}\n\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\nfunction newJSONViewerState(): EditorState {\n  return EditorState.create({\n    extensions: [\n      basicSetup,\n      json(),\n      linter(jsonParseLinter()),\n      EditorView.editable.of(false),\n    ],\n  })\n}\n\n// JSON viewer for AST\nlet astViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\"),\n});\n\n// JSON viewer for depends map\nlet dependsViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#depends-json\"),\n});\n\n/**\n * Replace the entire contents of an editor\n */\nfunction replaceContents(editor: EditorView, contents: string) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  foldAll(editor);  // By default, fold all levels\n}\n","import {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {Transaction} from \"@codemirror/state\"\nimport {linter} from \"@codemirror/lint\"\nimport {miniCL, miniCLLinter} from \"./miniCL\"\nimport {StreamLanguage} from \"@codemirror/stream-parser\"\nimport {parseResults} from \"./parseResults\"\nimport {updateDevTools} from \"./devTools\"\nimport \"./styles.css\"\nimport \"./desmos_icons.css\"\n\n// Create the CodeMirror miniCL editor and add it to the document.\nlet miniCLEditor = new EditorView({\n  state: EditorState.create({\n    extensions: [\n      basicSetup,                     // https://codemirror.net/6/docs/ref/#basic-setup\n      StreamLanguage.define(miniCL),  // syntax coloring for miniCL\n      parseResults,                   // field that holds the results of parsing\n      linter(miniCLLinter())          // error-checking for miniCL\n    ],\n  }),\n  dispatch: updateOutput,\n  parent: document.querySelector(\"#miniCL-editor\")\n})\n\n// When the content changes, update the editor and the dev tools\nfunction updateOutput(tr: Transaction) {\n  miniCLEditor.update([tr]);\n  updateDevTools(tr);\n}\n"]}