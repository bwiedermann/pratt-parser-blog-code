{"version":3,"sources":["src/lexer.ts","src/typechecker.ts","src/mudChecker.ts","src/position.ts","src/findBase.ts","src/parselet.ts","src/tokenstream.ts","src/parser.ts","src/parseResults.ts","src/miniCL.ts","src/visualization.ts","src/devTools.ts","src/index.ts"],"names":["text","tokens","state","line","stack","split","stream","stream_parser_1","string","eol","token","getToken","emitToken","makeEmit","fullToken","undefined","push","start","pos","Error","length","getDefaultToken","type","first_column","last_column","current","eatSpace","match","next","nodes","registeredNodes","errors","map","n","typecheckNode","concat","node","checkerMap","nodeType","check","constructor","message","position","left","right","outputType","valueType","TypeError","operator","arg1Errors","args","arg2Errors","functionName","name","argType","builtins","inputType","predicate","case","consequent","otherwise","predErrors","consErrors","otherErrors","assignmentErrors","assignment","valueNode","assignmentId","resultType","status","CheckNumber","CheckBoolean","CheckBinary","CheckFunction","CheckChoose","CheckVariable","CheckIdentifier","dependsMap","mudCheckNode","mudCheckerMap","mudCheck","intersection","leftAsserts","asserts","rightAsserts","i","find","e","allAsserts","bases","findBase_1","returnType","consDef","otherDef","localAsserts","handleCheck","MudCheckNumber","MudCheckBoolean","MudCheckBinary","MudCheckFunction","MudCheckChoose","MudCheckVariable","MudCheckIdentifier","consBases","contained","first_line","last_line","end","toString","baseMap","findBase","baseList","leftList","findBases","rightList","console","log","nodeId","otherBases","BaseNumber","BaseBoolean","BaseBinary","BaseFunction","BaseChoose","BaseVariableAssignment","BaseIdentifier","parse","_parser","_tokens","varMap","position_1","id","newNode","value","parseFloat","parser","_token","exp","expectToken","tokenType","associativity","ConsequentParselet","bindingPower","last","arg1","arg2","varParselet","VariableAssignmentParselet","lexer_1","filter","t","consume","peek","expectedType","actual","tokenstream_1","Parser","bindingPowers","bindingClasses","Object","keys","consequentMap","currentBindingPower","initialParselet","initialMap","consequentParselet","AbstractParser","NUMBER","NumberParselet","TRUE","BooleanParselet","FALSE","ParenParselet","FUNCTION","FunctionParselet","CHOOSE1","ChooseParselet","IDENTIFIER","IdentifierParselet","BinaryOperatorParselet","classes","state_1","define","create","emptyParseResults","update","tr","docChanged","parseProgram","contents","doc","ast","parser_1","parseErrors","startState","token2tag","view","results","field","parseResults_1","mudErrors","mudChecker_1","typeErrors","typechecker_1","parseDiagnostics","makeDiagnostic","typeDiagnostics","mudDiagnostics","severity","error","from","firstLine","to","lastLine","margin","top","bottom","height","width","select","selectAll","remove","viz","append","attr","root","children","treemap","tree","size","separation","treelayout","hierarchy","getChildren","g","link","data","links","linkEnter","enter","connection","descendants","nodeEnter","d","y","x","getFill","isUndefined","style","call","getTextBox","datum","getText","clone","lower","yep","insert","bbox","selection","each","getBBox","linkHorizontal","astJSON","JSON","stringify","replaceContents","astViewer","dependsJSON","dependsViewer","visualization_1","basic_setup_1","extensions","lang_json_1","lint_1","editable","of","newJSONViewerState","parent","document","querySelector","editor","changes","fold_1","miniCLEditor","miniCL_1","dispatch","updateOutput","devTools_1"],"mappings":"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","file":"","sourcesContent":["import {StringStream} from \"@codemirror/stream-parser\"\n\nexport function getTokens(text: string): Token[] {\n  const tokens: Token[] = [];\n  const state: State = {line: 1, stack: ['default']};\n\n  for (const line of text.split('\\n')) {\n    const stream = new StringStream();\n    stream.string = line;\n    while (!stream.eol()) {\n      const token = getToken(stream, state);\n      const emitToken = makeEmit(stream, state);\n      const fullToken = emitToken(token as TokenType);\n      if (token != undefined) {\n        tokens.push(fullToken);\n      }\n\n      if (stream.start == stream.pos) {\n        throw new Error(\n          `getToken failed to advance stream at position ${\n            stream.pos\n          } in string ${stream.string}`,\n        );\n      }\n      stream.start = stream.pos;\n    }\n\n    state.line += 1;\n  }\n\n  return tokens;\n}\n\nexport function getToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  //Built for codeMirror streams API\n  //State is a stack of states\n  switch (state.stack[state.stack.length - 1]) {\n    default:\n      return getDefaultToken(stream, state);\n  }\n}\n\nfunction makeEmit(stream: StringStream, state: State) {\n  return function emitToken(type: TokenType): Token {\n    return {\n      type,\n      first_column: stream.start,\n      last_column: stream.pos,\n      line: state.line,\n      text: stream.current(),\n    };\n  };\n}\n\nexport function getDefaultToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  // const emitToken = makeEmit(stream, state);\n  if (stream.eatSpace()) {\n    // skip whitespace\n    return undefined;\n  }\n\n  if (stream.match(/\\+/)) {\n    return '+';\n  }\n\n  if (stream.match(/\\-/)) {\n    return '-';\n  }\n\n  if (stream.match(/\\*/)) {\n    return '*';\n  }\n\n  if (stream.match(/\\//)) {\n    return '/';\n  }\n\n  if (stream.match(/\\|/)) {\n    return '|';\n  }\n\n  if (stream.match(/\\&/)) {\n    return '&';\n  }\n\n  if (stream.match(/\\(/)) {\n    return '(';\n  }\n\n  if (stream.match(/\\)/)) {\n    return ')';\n  }\n\n  // adding an equals operator\n  if (stream.match(/\\=/)) {\n    return '=';\n  }\n\n  if (stream.match(/-?[0-9]+(\\.[0-9]+)?/)) {\n    return 'NUMBER';\n  }\n\n  if (stream.match(/True/)) {\n    return 'TRUE';\n  }\n\n  if (stream.match(/False/)) {\n    return 'FALSE';\n  }\n\n  if (stream.match(/#/)) {\n    if (!stream.match(/\\n/)) {\n      // comment lasts till end of line\n      stream.match(/.*/); // if no eol encountered, comment lasts till end of file\n    }\n    return 'COMMENT';\n  }\n\n  // hardcode when to be a choose node not an identifier to get around parsing\n  if (stream.match(/WHEN/)) {\n    return 'CHOOSE1';\n  }\n\n  // Remove otherwise clause for now\n  if (stream.match(/OTHERWISE/)) {\n    return 'CHOOSE2';\n  }\n\n  if (stream.match(/[A-Z]([a-z|A-Z])*/)) {\n    return 'FUNCTION';\n  }\n\n  // Identifiers\n  // For now, the form of a valid identifier is: a lower-case alphabetic character,\n  // followed by zero or more alpha characters.\n  if (stream.match(/[a-z]([a-z|A-Z])*/)) {\n    return 'IDENTIFIER';\n  }\n  \n\n  stream.next();\n  return 'ERROR';\n}\n\nexport type BinaryOperationTokenType =\n  | '+'\n  | '-'\n  | '*'\n  | '/'\n  | '|' // this is an or\n  | '&' // this is an and\n\nexport type TokenType =\n  | BinaryOperationTokenType\n  | 'NUM'\n  | 'TRUE'\n  | 'FALSE'\n  | '('\n  | ')'\n  | 'COMMENT'\n  | 'ERROR'\n  | 'FUNCTION'\n  | 'IDENTIFIER'\n  | 'CHOOSE1'\n  | 'CHOOSE2'\n  | '='\n\nexport interface Token<T extends TokenType = TokenType> {\n  type: T;\n  text: string;\n  line: number;\n  first_column: number;\n  last_column: number;\n}\n\ntype Mode = 'default';\n\nexport interface State {\n  stack: Mode[];\n  line: number;\n}\n","import {Position} from './position';\nimport * as AST from './ast';\nimport {equals} from './equals';\n\n/***** ITERATION: change all outputType.valueType to simply outputType *****/\n\nexport function typecheck(nodes: AST.Node[], registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  const errors = nodes.map(n => typecheckNode(n, registeredNodes));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction typecheckNode(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  return checkerMap[node.nodeType].check(node, registeredNodes);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface TypeChecker {\n  check(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[];\n}\n\nclass CheckNumber implements TypeChecker {\n  check(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\nclass CheckBoolean implements TypeChecker {\n  check(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\nclass CheckBinary implements TypeChecker {\n  check(node: AST.BinaryOperationNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    const errors: TypeError[] = typecheckNode(node.left, registeredNodes).concat(typecheckNode(node.right, registeredNodes));\n    \n    // Check if same operand type (both numbers, both booleans)\n    if (node.left?.outputType?.valueType != node.right?.outputType?.valueType) {\n      errors.push(new TypeError(\"incompatible types for binary operator\", node.pos));\n    }\n    // Check if incorrect combination of operator and operands\n    else if (node.right?.outputType?.valueType == 'boolean' && (node.operator != \"|\" && node.operator != '&')) {\n      errors.push(new TypeError(\"incompatible operation for boolean operands\", node.pos));\n    }\n    else if (node.right?.outputType?.valueType == 'number' && (node.operator == \"|\" || node.operator == '&')) {\n      errors.push(new TypeError(\"incompatible operation for number operands\", node.pos));\n    }\n\n    node.outputType.valueType = node.left?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckFunction implements TypeChecker {\n  check(node: AST.FunctionNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First typecheck the argument\n    const arg1Errors = typecheckNode(node.args[0], registeredNodes);\n    errors = errors.concat(arg1Errors);\n    if (node.args.length > 1) {\n      const arg2Errors = typecheckNode(node.args[1], registeredNodes);\n      errors = errors.concat(arg2Errors);\n      if (node.args[0]?.outputType?.valueType != node.args[1]?.outputType?.valueType) {\n        errors.push(new TypeError(\"arguments must have same type\", node.args[0].pos));\n      }\n    }\n\n    const functionName = node.name\n    const argType = builtins[functionName].inputType;\n\n    // we found a builtin function\n    if (argType) {\n\n      // typecheck the argument\n      // Assume both arguments are the same type (see error produced above)\n      if (argType != 'any' && node.args[0]?.outputType?.valueType != argType) {\n        errors.push(new TypeError(\"incompatible argument type for \" + functionName, node.pos));\n      }\n    }\n  \n    // this is not a known, builtin function\n    else {\n      errors.push(new TypeError(\"unknown function\", node.pos));\n    }    \n\n    return errors;\n  }\n}\n\nclass CheckChoose implements TypeChecker {\n  check(node: AST.ChooseNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n\n    // First typecheck the inner nodes\n    const predErrors = typecheckNode(predicate, registeredNodes);\n    const consErrors = typecheckNode(consequent, registeredNodes);\n    const otherErrors = typecheckNode(otherwise, registeredNodes);\n    errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n    // check return types are the same for both cases\n    if (consequent?.outputType?.valueType != otherwise?.outputType?.valueType) {\n      errors.push(new TypeError(\"Return types are not the same for both cases\", consequent.pos));\n      errors.push(new TypeError(\"Return types are not the same for both cases\", otherwise.pos));\n    }\n\n    // check that the predicate returns a boolean\n    if (predicate.outputType.valueType != 'boolean') {\n      errors.push(new TypeError(\"Predicate must return a boolean\", predicate.pos));\n    }\n\n    node.outputType.valueType = consequent?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckVariable implements TypeChecker {\n  check(node: AST.VariableAssignmentNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n    // First typecheck the assignment node\n    const assignmentErrors = typecheckNode(node.assignment, registeredNodes);\n    errors = errors.concat(assignmentErrors);\n\n    node.outputType.valueType = node.assignment?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckIdentifier implements TypeChecker {\n  check(node: AST.IdentifierNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Maybe make assigmentId be valueId?\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    }\n\n    node.outputType.valueType = valueNode.outputType.valueType;\n\n    return errors;\n  }\n}\n\n// Dictionary of builtin functions that maps a function name to the type of its argument\nconst builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\"},\n  \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\"},\n  \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\"},\n  \"Sink\": {inputType: 'any', resultType: 'any', status: \"Variable\"},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Maybe-Undefined\"},\n  \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\"},\n  \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\"}\n}\n\nconst checkerMap: Partial<{[K in AST.NodeType]: TypeChecker}> = {\n  'Number' : new CheckNumber(),\n  'Boolean' : new CheckBoolean(),\n  'BinaryOperation' : new CheckBinary(),\n  'Function' : new CheckFunction(),\n  'Choose': new CheckChoose(),\n  'VariableAssignment': new CheckVariable(),\n  'Identifier': new CheckIdentifier()\n}","import {Position} from './position';\nimport * as AST from './ast';\nimport {equals} from './equals';\nimport {findBases} from './findBase';\n\nexport function mudCheck(nodes: AST.Node[], \n                        registeredNodes: {[key: string]: AST.Node},\n                        dependsMap: {[key: string]: string[]}): TypeError[] {\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction mudCheckNode(node: AST.Node, \n                    nodes: AST.Node[], \n                    registeredNodes: {[key: string]: AST.Node},\n                    dependsMap: {[key: string]: string[]}): TypeError[] {\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface MudChecker {\n  mudCheck(node: AST.Node, \n          nodes: AST.Node[], \n          registeredNodes: {[key: string]: AST.Node},\n          dependsMap: {[key: string]: string[]}): TypeError[];\n}\n\nclass MudCheckNumber implements MudChecker {\n  mudCheck(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\nclass MudCheckBoolean implements MudChecker {\n    mudCheck(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\nclass MudCheckBinary implements MudChecker {\n    mudCheck(node: AST.BinaryOperationNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        const errors: TypeError[] = mudCheckNode(node.left, nodes, registeredNodes, dependsMap)\n        .concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));\n\n        // If no type errors, update the output type of this node, based on the outputType of its inputs\n        if (node.right?.outputType?.status == 'Maybe-Undefined' || node.left?.outputType?.status == 'Maybe-Undefined') {\n            node.outputType = {status: 'Maybe-Undefined',\n                              valueType: node.left?.outputType?.valueType };\n        } else {\n            node.outputType = {status: 'Definitely',\n                            valueType: node.left?.outputType?.valueType };\n        }\n\n        if (node.operator == '|') {\n          let intersection = [];\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          for (let i = 0; i < leftAsserts.length; i++) {\n            if (rightAsserts.find(e => e == leftAsserts[i])) {\n              intersection.push(leftAsserts[i]);\n            }\n          }\n          node.outputType.asserts = intersection;\n        }\n        else {\n          // if it's an and, we take all of the asserts\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          let allAsserts = leftAsserts.concat(rightAsserts);\n\n          node.outputType.asserts = allAsserts;\n        }\n\n        return errors;\n    }\n}\n\nclass MudCheckFunction implements MudChecker {\n    mudCheck(node: AST.FunctionNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        if (node.name == 'IsDefined') {\n          let bases = findBases(node, dependsMap);\n          node.outputType.asserts = node.outputType.asserts.concat(bases);\n        }\n        \n        // First typecheck the argument\n        const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);\n        errors = errors.concat(arg1Errors);\n        if (node.args.length > 1) {\n        const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);\n        errors = errors.concat(arg2Errors);\n        }\n\n       \n\n        const functionName = node.name\n        const returnType = builtins[functionName].resultType;\n\n        // only show error if in sink \"node\"\n        if (functionName == 'Sink') {\n          // if sink \"node\" takes in possibly undefined values, warn the author\n          // a sink has one argument\n          if (node.args[0]?.outputType?.status == 'Maybe-Undefined') {\n              errors.push(new TypeError(\"User facing content could be undefined.\", node.args[0].pos));\n          }\n        }\n        \n        if (builtins[functionName].status == \"Variable\") {\n          node.outputType.status = node.args[0]?.outputType?.status;\n        }\n        else {\n          node.outputType.status = builtins[functionName].status;\n        }\n       \n\n        node.outputType.valueType = returnType;\n\n        return errors;\n    }\n}\n\nclass MudCheckChoose implements MudChecker {\n    mudCheck(node: AST.ChooseNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        const predicate = node.case.predicate;\n        const consequent = node.case.consequent;\n        const otherwise = node.otherwise;\n\n        // add stuff to the assertMap\n\n        // First typecheck the inner nodes\n        const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);\n        const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);\n        const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);\n        errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n        node.outputType.valueType = consequent.outputType.valueType;\n\n        // DEFUALT status = maybe-undefined\n\n        let consDef = false;\n        let otherDef = false;\n        let localAsserts: string[] = [];\n\n        if (otherwise.outputType.status == 'Definitely') {\n          otherDef = true;\n        }\n\n        // consequent in MU and we have a binary predicate\n        if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'BinaryOperation') {\n          \n          consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n\n        }\n\n\n        // propagate maybe-undefined type, or change to definitely\n        // if the predicate is not a function, we cannot error check its type\n        if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'Function') {\n          // we can only errorr check with IsDefined function\n          // IsDefined has only one argument\n          if (predicate.name == 'IsDefined') {\n            consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n          }\n        }\n\n        if (consequent?.outputType.status == 'Definitely') {\n          consDef = true;\n        }\n\n        if (consDef && otherDef) {\n          node.outputType.status = 'Definitely';\n        }\n\n        return errors;\n    }\n}\n\nclass MudCheckVariable implements MudChecker {\n    mudCheck(node: AST.VariableAssignmentNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n    // First typecheck the assignment node\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);\n    errors = errors.concat(assignmentErrors);\n\n    // Set variable assignment node output type to the same as it's assignment\n    node.outputType.status = node.assignment.outputType.status;\n    node.outputType.valueType = node.assignment.outputType.valueType;\n\n    return errors;\n  }\n}\n\nclass MudCheckIdentifier implements MudChecker {\n    mudCheck(node: AST.IdentifierNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Maybe make assigmentId be valueId?\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    } else {\n      // If we found the assignment node, set the output type of the identifier\n      node.outputType.status = valueNode.outputType.status;\n      node.outputType.valueType = valueNode.outputType.valueType;\n    }\n\n    return errors;\n  }\n}\n\n// Dictionary of builtin functions that maps a function name to the type of its argument\nconst builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\"},\n  \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\"},\n  \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\"},\n  \"Sink\": {inputType: 'any', resultType: 'any', status: \"Variable\"},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Maybe-Undefined\"},\n  \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\"},\n  \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\"},\n  \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\"}\n}\n\nconst mudCheckerMap: Partial<{[K in AST.NodeType]: MudChecker}> = {\n  'Number' : new MudCheckNumber(),\n  'Boolean' : new MudCheckBoolean(),\n  'BinaryOperation' : new MudCheckBinary(),\n  'Function' : new MudCheckFunction(),\n  'Choose': new MudCheckChoose(),\n  'VariableAssignment': new MudCheckVariable(),\n  'Identifier': new MudCheckIdentifier()\n}\n\nfunction handleCheck(consequent: AST.Node,\n                    dependsMap: {[key: string]: string[]},\n                    asserts: string[]): boolean {\n\n  let consBases = findBases(consequent, dependsMap);\n\n  let contained = true;\n    for (let i = 0; i < consBases.length; i++) {\n      if (!asserts.find(e => e == consBases[i])) {\n        contained = false;\n      }\n    }\n\n    return contained;\n}","import { Token } from './lexer';\n\nexport type Position = {\n  first_line: number;\n  first_column: number;\n  last_line: number;\n  last_column: number;\n};\n\nexport function token2pos(token: Token): Position {\n  return {\n    first_line: token.line,\n    last_line: token.line,\n    first_column: token.first_column,\n    last_column: token.last_column\n  }\n}\n\nexport function join(start: Position, end: Position) {\n  return {\n    first_line: start.first_line,\n    last_line: end.last_line,\n    first_column: start.first_column,\n    last_column: end.last_column\n  };\n}\n\nexport function pos2string(pos: Position): string {\n  return pos.first_line.toString() + \".\" +\n         pos.first_column.toString() + \".\" +\n         pos.last_line.toString() + \".\" +\n         pos.last_column.toString();\n}\n\n// note, extending Error in the browser is problematic\n// https://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\nexport class ParseError {\n  constructor(public message: string, public position: Position) {}\n}\n","import * as AST from './ast';\n\nexport function findBases(node: AST.Node, dependsMap: {[key: string]: string[]}): string[] {\n    return baseMap[node.nodeType].findBase(node, dependsMap); \n}\n\nexport interface BaseFinder {\n  findBase(node: AST.Node, dependsMap: {[key: string]: string[]}): string[];\n}\n\nclass BaseNumber implements BaseFinder {\n  findBase(node: AST.NumberNode): string[] {\n    return []\n  }\n}\n\nclass BaseBoolean implements BaseFinder {\n    findBase(node: AST.BooleanNode): string[] {\n        return []\n    }\n}\n\nclass BaseBinary implements BaseFinder {\n    findBase(node: AST.BinaryOperationNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // recursively call findBases on left and right\n        let leftList = findBases(node.left, dependsMap);\n        baseList = baseList.concat(leftList);\n        let rightList = findBases(node.right, dependsMap)\n        baseList = baseList.concat(rightList);\n        return baseList;\n    }\n}\n\n// examples: x = Input(3); x = IsDefined(Input(3)); z = Inverse(x)\n// need dependsMap for the third example\nclass BaseFunction implements BaseFinder {\n    findBase(node: AST.FunctionNode, dependsMap: {[key: string]: string[]}): string[] {\n        console.log(\"in base function\");\n        let baseList: string[] = [];\n        if (node.name == \"Input\") {\n            // this is a base\n            baseList.push(node.nodeId);\n        }\n        else {\n            // recursively call findBases on argument(s)\n            for (let i = 0; i < node.args.length; i++) {\n                baseList = baseList.concat(findBases(node.args[i], dependsMap));\n            }\n        }\n        return baseList;\n    }\n}\n\n// assume that choose nodes will never create their own bases\n// they can still error check previously defined bases\nclass BaseChoose implements BaseFinder {\n    findBase(node: AST.ChooseNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // the bases of the cons and the otherwise\n        let consBases = findBases(node.case.consequent, dependsMap);\n        baseList = baseList.concat(consBases);\n        let otherBases = findBases(node.otherwise, dependsMap);\n        baseList = baseList.concat(otherBases);\n        return baseList;\n    }\n}\n\nclass BaseVariableAssignment implements BaseFinder {\n    findBase(node: AST.VariableAssignmentNode): string[] {\n        return []\n    }\n}\n\nclass BaseIdentifier implements BaseFinder {\n    findBase(node: AST.IdentifierNode, dependsMap: {[key: string]: string[]}): string[] {\n        // follow the chain in the dependsMap\n        return dependsMap[node.assignmentId];\n    }\n}\n\n\nconst baseMap: Partial<{[K in AST.NodeType]: BaseFinder}> = {\n  'Number' : new BaseNumber(),\n  'Boolean' : new BaseBoolean(),\n  'BinaryOperation' : new BaseBinary(),\n  'Function' : new BaseFunction(),\n  'Choose': new BaseChoose(),\n  'VariableAssignment': new BaseVariableAssignment(),\n  'Identifier': new BaseIdentifier()\n}\n","import { TokenStream } from './tokenstream';\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\nimport * as AST from './ast';\nimport { AbstractParser } from './parser';\nimport {ParseError, token2pos, join, pos2string} from './position';\nimport {findBases} from './findBase';\n\nexport interface InitialParselet {\n  parse(parser: AbstractParser,\n        tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}): AST.Node;\n}\n\n\nexport class NumberParselet implements InitialParselet {\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream,\n        token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n    // add node to the map\n    let newNode = {\n      nodeType: 'Number' as 'Number',\n      value: parseFloat(token.text),\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'number' as 'number',\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class BooleanParselet implements InitialParselet {\n  constructor(private value: boolean) {}\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'Boolean' as 'Boolean',\n      value: this.value,\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'boolean' as 'boolean',\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ParenParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    _token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken(')');\n\n    return exp;\n  }\n}\n\nexport abstract class ConsequentParselet {\n  constructor(\n    readonly tokenType: TokenType,\n    readonly associativity: 'left' | 'right'\n  ) {}\n  abstract parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}\n  ): AST.Node;\n}\n\nexport class BinaryOperatorParselet extends ConsequentParselet {\n  constructor(\n    public tokenType: BinaryOperationTokenType,\n    associativity: 'left' | 'right'\n  ) {\n    super(tokenType, associativity);\n  }\n\n  parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}\n  ): AST.Node {\n    const bindingPower = parser.bindingPower(token);\n\n    const right = parser.parse(\n      tokens,\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\n      varMap,\n      registeredNodes,\n      dependsMap\n    );\n    const position = join(left.pos, token2pos(tokens.last()));\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      outputType: undefined,\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n\n    return newNode;\n  }\n}\n\n// Parse function calls\n// Limitation: Functions are allowed to take exactly one argument\nexport class FunctionParselet implements InitialParselet {\n  \n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for one argument\n    let args = [arg1];\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for second argument\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: token.text,\n      args: args,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ChooseParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predicate, consequent: consequent },\n      otherwise: otherwise,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class VariableAssignmentParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    \n    // deal with variable assignment\n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n\n    // need to save the variable and its assignment in a lookup table\n    varMap[token.text] = id;\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                    valueType: assignment?.outputType?.valueType,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    dependsMap[id] = findBases(assignment, dependsMap); // NEW FUNCTION HERE\n\n    return newNode;\n  }\n}\n\nexport class IdentifierParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n    \n    const position = token2pos(token);\n    const id = pos2string(position);\n    // need to look up known variables in a lookup table (map?)\n\n    const assignmentId = varMap[token.text];\n\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);\n    }\n    else {\n      let newNode = {\n        nodeType: 'Identifier' as 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                      valueType: undefined,\n                      asserts: [] },\n        pos: position,\n        nodeId: id\n      };\n      registeredNodes[id] = newNode;\n      return newNode;\n    }\n  }\n}\n","import {Token, TokenType, getTokens} from './lexer';\nimport {ParseError, token2pos} from './position';\n\nexport class TokenStream {\n  tokens: Token[];\n  pos: number = 0;\n\n  constructor(text: string) {\n    this.tokens = getTokens(text).filter(t => t.type != 'COMMENT');\n  }\n\n  consume(): Token | undefined {\n    const token = this.tokens[this.pos];\n    if (token) {\n      this.pos += 1;\n    }\n    return token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens[this.pos];\n  }\n\n  last(): Token {\n    return this.tokens[this.pos - 1];\n  }\n\n  expectToken<T extends TokenType>(expectedType: T): Token<T> {\n    const actual = this.consume();\n\n    if (!actual) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token but found none.`,\n        token2pos(this.last()),\n      );\n    }\n\n    if (actual.type != expectedType) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token type but found \"${actual.type}\".`,\n        token2pos(actual),\n      );\n    }\n\n    return actual as Token<T>;\n  }\n}\n","import * as Parselet from './parselet';\nimport {Token, TokenType} from './lexer';\nimport {TokenStream} from './tokenstream';\nimport {ParseError, token2pos} from './position';\nimport * as AST from './ast';\n\nexport function parse(text: string,\n                      varMap: {[key: string]: string},\n                      registeredNodes: {[key: string]: AST.Node},\n                      dependsMap: {[key: string]: string[]}): \n                      {nodes: AST.Node[]; errors: ParseError[]} {\n  const nodes: AST.Node[] = [];\n\n  const tokens = new TokenStream(text);\n  const parser = new Parser();\n  while (tokens.peek()) {\n    try {\n      nodes.push(parser.parse(tokens, 0, varMap, registeredNodes, dependsMap));\n    } catch (e) {\n      return {\n        nodes,\n        errors: [e],\n      };\n    }\n  }\n\n  return {nodes, errors: []};\n}\n\nexport abstract class AbstractParser {\n  public bindingPowers: {[tokenType in TokenType]: number};\n\n  protected abstract initialMap(): Partial<\n    {[K in TokenType]: Parselet.InitialParselet}\n  >;\n  protected abstract consequentMap(): Partial<\n    {[K in TokenType]: Parselet.ConsequentParselet}\n  >;\n  protected abstract bindingClasses(): TokenType[][];\n\n  constructor() {\n    this.bindingPowers = {} as any;\n\n    const bindingClasses = this.bindingClasses();\n    for (let i = 0; i < bindingClasses.length; i++) {\n      for (const tokenType of bindingClasses[i]) {\n        this.bindingPowers[tokenType] = 10 * i + 9;\n      }\n    }\n\n    for (const tokenType of Object.keys(this.consequentMap) as TokenType[]) {\n      if (this.bindingPowers[tokenType] == undefined) {\n        throw new Error(\n          `Token ${tokenType} defined in consequentMap has no associated binding power.\n          Make sure it is also listed in bindingClasses.`,\n        );\n      }\n    }\n  }\n\n  bindingPower(token: Token): number {\n    if (this.bindingPowers[token.type] != undefined) {\n      return this.bindingPowers[token.type];\n    } else {\n      throw new ParseError(\n        `Unexpected token type ${token.type}.`,\n        token2pos(token),\n      );\n    }\n  }\n\n  parse(tokens: TokenStream,\n        currentBindingPower: number,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}): AST.Node {\n    const token = tokens.consume();\n    if (!token) {\n      throw new ParseError(\n        `Unexpected end of tokens.`,\n        token2pos(tokens.last()),\n      );\n    }\n\n    const initialParselet = this.initialMap()[token.type];\n\n    if (!initialParselet) {\n      throw new ParseError(\n        `Unexpected token type ${token.type}`,\n        token2pos(token),\n      );\n    }\n\n    let left = initialParselet.parse(this, tokens, token, varMap, registeredNodes, dependsMap);\n\n    while (true) {\n      const next = tokens.peek();\n      if (!next) {\n        break;\n      }\n\n      const consequentParselet = this.consequentMap()[next.type];\n\n      if (!consequentParselet) {\n        break;\n      }\n\n      if (currentBindingPower >= this.bindingPower(next)) {\n        break;\n      }\n\n      tokens.consume();\n      left = consequentParselet.parse(this, tokens, left, next, varMap, registeredNodes, dependsMap);\n    }\n\n    return left;\n  }\n}\n\nexport class Parser extends AbstractParser {\n  initialMap() {\n    return {\n      NUMBER: new Parselet.NumberParselet(),\n      TRUE: new Parselet.BooleanParselet(true),\n      FALSE: new Parselet.BooleanParselet(false),\n      '(': new Parselet.ParenParselet(),\n      FUNCTION: new Parselet.FunctionParselet(),\n      CHOOSE1: new Parselet.ChooseParselet(),\n      IDENTIFIER: new Parselet.IdentifierParselet()\n    };\n  }\n\n  consequentMap() {\n    return {\n      '+': new Parselet.BinaryOperatorParselet('+', 'left'),\n      '-': new Parselet.BinaryOperatorParselet('-', 'left'),\n      '*': new Parselet.BinaryOperatorParselet('*', 'left'),\n      '/': new Parselet.BinaryOperatorParselet('/', 'left'),\n      '|': new Parselet.BinaryOperatorParselet('|', 'right'),\n      '&': new Parselet.BinaryOperatorParselet('&', 'right')\n    };\n  }\n\n  bindingClasses() {\n    const classes: TokenType[][] = [['+', '-'], ['*', '/'], ['|', '&']];\n    return classes;\n  }\n}\n","import {StateField} from \"@codemirror/state\"\nimport {Transaction} from \"@codemirror/state\"\nimport * as AST from './ast';\nimport {parse} from './parser';\nimport {ParseError} from './position';\n\n/**\n * A State field that holds the results of parsing\n */\nexport const parseResults: StateField<ParseResults> = StateField.define({\n  create() { return emptyParseResults },\n  update(value, tr) { return tr.docChanged ? parseProgram(tr) : value }\n})\n\n/**\n * Parse the program created from a transaction, returning a ParseResults object\n */\nfunction parseProgram(tr: Transaction) : ParseResults {\n  const contents = tr.state.doc.toString()\n\n  let varMap: {[key: string]: string} = {}\n  let registeredNodes: {[key: string]: AST.Node} = {}\n  let dependsMap: {[key: string]: string[]} = {}\n  const ast = parse(contents, varMap, registeredNodes, dependsMap)\n\n  return {\n    nodes: ast.nodes,\n    parseErrors: ast.errors,\n    varMap: varMap,\n    registeredNodes: registeredNodes,\n    dependsMap: dependsMap\n  }\n}\n\n/**\n * Type that describes the results of parsing\n */\nexport type ParseResults = {\n  nodes: AST.Node[];\n  parseErrors: ParseError[];\n  varMap: {[key: string]: string};\n  registeredNodes: {[key: string]: AST.Node};\n  dependsMap: {[key: string]: string[]};\n}\n\n/**\n * Can be used as the initial results of parsing\n */\nconst emptyParseResults: ParseResults = {\n  nodes: [],\n  parseErrors: [],\n  varMap: {},\n  registeredNodes: {},\n  dependsMap: {}\n}\n","import {StreamParser, StringStream} from \"@codemirror/stream-parser\"\nimport {Diagnostic} from \"@codemirror/lint\"\nimport {EditorView} from \"@codemirror/view\"\nimport {State, getDefaultToken} from './lexer'\nimport {ParseError} from './position'\nimport {typecheck} from './typechecker';\nimport {mudCheck} from './mudChecker';\nimport {parseResults} from './parseResults';\n\n/**\n * The extension for our language\n */\nexport const miniCL: StreamParser<State> = {\n  startState: function (): State {\n    return {line: 1, stack: ['default']};\n  },\n  token: function (stream: StringStream, state: State): string | undefined {\n    if (stream.eatSpace()) return null;\n    return token2tag(getDefaultToken(stream, state));\n  }\n};\n\n/**\n * The linter for our language\n */\n export const miniCLLinter = () => (view: EditorView): Diagnostic[] => {\n\n  // Get the result types\n  const results = view.state.field(parseResults);\n\n  // Error checking\n  const mudErrors = mudCheck(results.nodes, results.registeredNodes, results.dependsMap);\n  const typeErrors = typecheck(results.nodes, results.registeredNodes);\n\n  // Create a diagnostic for each kind of error\n  const parseDiagnostics = results.parseErrors.map(makeDiagnostic(view));\n  const typeDiagnostics = typeErrors.map(makeDiagnostic(view));\n  const mudDiagnostics = mudErrors.map(makeDiagnostic(view, 'warning'));\n\n  return parseDiagnostics.concat(typeDiagnostics).concat(mudDiagnostics);\n}\n\n/**\n * Create a diagnostic from an error\n */\nconst makeDiagnostic = (view: EditorView, severity: 'error' | 'info' | 'warning' = 'error') => \n  (error): Diagnostic => {\n    return {\n      from: firstLine(view, error) + error.position.first_column,\n      to: lastLine(view, error) + error.position.last_column,\n      message: error.message,\n      severity: severity\n    }\n}\n\n/**\n * @returns the line number for the start of the error\n */\nfunction firstLine(view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.first_line).from;\n}\n\n/**\n * @returns the line number for the end of the error\n */\nfunction lastLine (view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.last_line).from;    \n}\n\n/**\n * Convert our bespoke parser Token type to a token type that is recognized by CodeMirror\n */\nfunction token2tag(token: string): string | undefined {\n  switch (token) {\n    case 'NUMBER':\n      return 'number';\n\n    case 'TRUE':\n      return 'boolean';\n\n    case 'FALSE':\n      return 'boolean';\n\n    case '(':\n    case ')':\n      return 'bracket';\n\n    case '+':\n    case '-':\n    case '*':\n    case '/':\n    case '|':\n    case '&':\n    case '=':\n      return 'operator';\n\n    case 'COMMENT':\n      return 'comment';\n\n    case 'CHOOSE1':\n    case 'CHOOSE2':\n      return 'choose';\n\n    case 'FUNCTION':\n      return 'function';\n\n    case 'IDENTIFIER':\n      return 'variable';\n\n    case 'ERROR':\n      return 'error';\n\n    default:\n      return undefined;\n  }\n}\n","import * as d3Hierarchy from 'd3-hierarchy';\nimport * as d3Select from 'd3-selection';\nimport * as d3shape from 'd3-shape';\nimport * as AST from './ast';\n\nexport function visualize(nodes: AST.Node[]): void {\n\n    // Placement and size of tree\n    const margin = {top: 20, right: 90, bottom: 20, left: 90};\n    const height = 300 - margin.top - margin.bottom;\n    const width  = 500 - margin.left - margin.right;\n  \n    // Make the svg\n    d3Select.select('#viz').selectAll('svg').remove();\n    const viz = d3Select.select('#viz').append('svg');\n  \n    // Remove existing visualizations\n    viz.selectAll('*').remove();\n  \n    // Add a new visualization\n    viz.attr('width', width + margin.left + margin.right)\n       .attr('height', height + margin.top + margin.bottom);\n\n    const root: Node = {nodeType: 'Program', children: nodes}\n\n    // Visualize all the statements\n    // for (var statement of nodes) {\n\n      // Create the tree and layout\n      const treemap = d3Hierarchy.tree()\n        .size([height, width])\n        .separation(() => 1);\n      const treelayout = d3Hierarchy.hierarchy(root, getChildren);\n      const tree = treemap(treelayout);\n  \n      // Add a new graph element for this statement\n      const g = viz.append('g')\n                  //  .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n                   .attr('transform', `translate(${margin.left}, ${margin.top})`)\n                   .attr(\"font-family\", \"sans-serif\")\n                   .attr(\"font-size\", 12)\n               \n      // Edge updates\n      const link = g.selectAll('path.link').data(tree.links());\n\n      // Edge entry\n      const linkEnter = link.enter().append('path', 'g');\n        \n      // general edge attributes\n      linkEnter.attr('class', 'link')\n               .attr('fill', 'none')\n               .attr(\"stroke-opacity\", 0.4)\n               .attr('stroke', '#555')\n               .attr(\"stroke-width\", 1.5)\n               .attr('d', connection);\n\n        \n      // Node updates\n      const node = g.selectAll('g.node').data(tree.descendants());\n\n      // Node entry\n      const nodeEnter = node.enter().append('g');\n\n      // general node attributes\n      nodeEnter.attr('class', 'node')\n               .attr('transform', d => `translate(${d.y}, ${d.x})`);\n\n      nodeEnter.append('circle')\n               .attr(\"fill\", getFill)\n               .attr('r', '2.5')\n               .attr('stroke-width', 10);\n\n      // add text\n      nodeEnter.append('text')\n                // .attr('dy', '-10px')\n                .attr(\"dy\", \"0.31em\")\n                .attr(\"x\", d => d.children ? -8 : 8)\n                .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n                .attr('fill', d => isUndefined(d) ? '#fc6666' : 'black')\n                .style(\"fill-opacity\", 1)\n                .call(getTextBox)\n                .datum(d => d.data)\n                .text(getText)\n          .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n    \n      // Highlight undefined -- not working\n      // Inspired in part by https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\n      nodeEnter.filter((d,i) => isUndefined(d))\n        .call(yep)\n        .insert('rect', 'text')\n        .attr(\"x\", function(d){return d.bbox.x})\n        .attr(\"y\", function(d){return d.bbox.y})\n        .attr(\"width\", function(d){return d.bbox.width})\n        .attr(\"height\", function(d){return d.bbox.height}) \n        .attr('fill', 'black')             \n    // }\n}\n\n// From https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\nfunction getTextBox(selection) {\n  selection.each(function(d){d.bbox = this.getBBox();})\n}\n\nfunction yep(selection) {\n  // console.log(selection.nodes().map((d)=>d.bbox));\n}\n\n\nconst connection = d3shape.linkHorizontal().x(d => d.y).y(d => d.x)\n\nfunction getChildren(node: AST.Node): AST.Node[] {\n  var children: AST.Node[] = [];\n  switch (node.nodeType) {\n    case 'Program':\n      children = node.children;\n      break;\n    case 'Function':\n      children = node.args;\n      break;\n    case 'Choose':\n      children = [node.case.predicate, node.case.consequent, node.otherwise];\n      break;\n    case 'BinaryOperation':\n      children = [node.left, node.right];\n      break;\n    case 'VariableAssignment':\n      children = [node.assignment];\n      break;\n    default:\n      children = [];\n    }\n\n  return children;\n}\n\nfunction getText(node) {\n  var text = \"\";\n  switch (node.nodeType) {\n    case 'Program':\n      text = '';\n      break;\n    case 'Function':\n      text = node.name;\n      break;\n    case 'Choose':\n      text = \"choose\";\n      break;\n    case 'BinaryOperation':\n      text = node.operator;\n      break;\n    case 'VariableAssignment':\n      text = node.name;\n      break;\n    case 'Identifier':\n      text = node.name;\n      break;\n    case 'Number':  \n      text = node.value.toString();\n      break;\n    case 'Boolean':\n      text = node.value.toString();\n      break;\n    default:\n      text = \"\";\n  }\n\n  return text;\n}\n\nfunction getFill(node): string {\n  if (isUndefined(node)) {\n    return '#fc6666'\n  }\n  if (node.children) {\n    return '#555'\n  } else {\n    return '#999'\n  }\n}\n\nfunction isUndefined(d) {\n  return d.data.outputType?.status === 'Maybe-Undefined'\n}","import {Transaction} from \"@codemirror/state\"\nimport {json, jsonParseLinter} from \"@codemirror/lang-json\"\nimport {foldAll} from \"@codemirror/fold\"\nimport { visualize } from \"./visualization\"\nimport {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {linter} from \"@codemirror/lint\"\nimport { parseResults } from \"./parseResults\"\n\n/**\n * Given a transaction, update the developer tools\n */\n export function updateDevTools(tr: Transaction) {\n  const results = tr.state.field(parseResults)\n\n  // Display JSON for AST\n  const astJSON = JSON.stringify(results.nodes, null, 2)\n  replaceContents(astViewer, astJSON);\n\n  // Display JSON for depends map\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\n  replaceContents(dependsViewer, dependsJSON);\n\n  // Draw the AST\n  visualize(results.nodes);\n}\n\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\nfunction newJSONViewerState(): EditorState {\n  return EditorState.create({\n    extensions: [\n      basicSetup,\n      json(),\n      linter(jsonParseLinter()),\n      EditorView.editable.of(false),\n    ],\n  })\n}\n\n// JSON viewer for AST\nlet astViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\"),\n});\n\n// JSON viewer for depends map\nlet dependsViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#depends-json\"),\n});\n\n/**\n * Replace the entire contents of an editor\n */\nfunction replaceContents(editor: EditorView, contents: string) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  foldAll(editor);  // By default, fold all levels\n}\n","import {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {Transaction} from \"@codemirror/state\"\nimport {linter} from \"@codemirror/lint\"\nimport {miniCL, miniCLLinter} from \"./miniCL\"\nimport {StreamLanguage} from \"@codemirror/stream-parser\"\nimport {parseResults} from \"./parseResults\"\nimport {updateDevTools} from \"./devTools\"\nimport \"./styles.css\"\nimport \"./desmos_icons.css\"\n\n// Create the CodeMirror miniCL editor and add it to the document.\nlet miniCLEditor = new EditorView({\n  state: EditorState.create({\n    extensions: [\n      basicSetup,                     // https://codemirror.net/6/docs/ref/#basic-setup\n      StreamLanguage.define(miniCL),  // syntax coloring for miniCL\n      parseResults,                   // field that holds the results of parsing\n      linter(miniCLLinter())          // error-checking for miniCL\n    ],\n  }),\n  dispatch: updateOutput,\n  parent: document.querySelector(\"#miniCL-editor\")\n})\n\n// When the content changes, update the editor and the dev tools\nfunction updateOutput(tr: Transaction) {\n  miniCLEditor.update([tr]);\n  updateDevTools(tr);\n}\n"]}