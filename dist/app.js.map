{"version":3,"sources":["src/position.ts","src/findBase.ts","src/parselet.ts","src/lexer.ts","src/tokenstream.ts","src/parser.ts","src/parseResults.ts","src/typechecker.ts","src/mudChecker.ts","src/miniCL.ts","src/visualization.ts","src/devTools.ts","src/index.ts"],"names":["token","first_line","line","last_line","first_column","last_column","start","end","pos","toString","constructor","message","position","node","dependsMap","baseMap","nodeType","findBase","baseList","leftList","findBases","left","concat","rightList","right","console","log","name","push","nodeId","i","args","length","consBases","case","consequent","otherBases","otherwise","assignmentId","BaseNumber","BaseBoolean","BaseBinary","BaseFunction","BaseChoose","BaseVariableAssignment","BaseIdentifier","parse","_parser","_tokens","varMap","registeredNodes","position_1","id","newNode","value","parseFloat","text","outputType","status","valueType","asserts","parser","tokens","_token","exp","expectToken","tokenType","associativity","ConsequentParselet","bindingPower","last","operator","undefined","arg1","arg2","predicate","assignment","findBase_1","varParselet","VariableAssignmentParselet","state","stack","split","stream","stream_parser_1","string","eol","getToken","emitToken","makeEmit","fullToken","Error","getDefaultToken","type","current","eatSpace","match","next","lexer_1","filter","t","consume","peek","expectedType","actual","nodes","tokenstream_1","Parser","e","errors","bindingPowers","bindingClasses","Object","keys","consequentMap","currentBindingPower","initialParselet","initialMap","consequentParselet","AbstractParser","NUMBER","NumberParselet","TRUE","BooleanParselet","FALSE","ParenParselet","FUNCTION","FunctionParselet","CHOOSE1","ChooseParselet","IDENTIFIER","IdentifierParselet","BinaryOperatorParselet","classes","state_1","define","create","emptyParseResults","update","tr","docChanged","parseProgram","contents","doc","ast","parser_1","parseErrors","map","n","typecheckNode","checkerMap","check","TypeError","arg1Errors","arg2Errors","functionName","argType","builtins","inputType","predErrors","consErrors","otherErrors","assignmentErrors","valueNode","resultType","CheckNumber","CheckBoolean","CheckBinary","CheckFunction","CheckChoose","CheckVariable","CheckIdentifier","assertMap","mudCheckNode","mudCheckerMap","mudCheck","intersection","leftAsserts","rightAsserts","find","allAsserts","bases","returnType","consDef","otherDef","localAsserts","handleCheck","handleAsserts","MudCheckNumber","MudCheckBoolean","MudCheckBinary","MudCheckFunction","MudCheckChoose","MudCheckVariable","MudCheckIdentifier","predBases","k","contained","startState","token2tag","view","results","field","parseResults_1","mudErrors","mudChecker_1","typeErrors","typechecker_1","parseDiagnostics","makeDiagnostic","typeDiagnostics","mudDiagnostics","severity","error","from","firstLine","to","lastLine","margin","top","bottom","height","width","select","selectAll","remove","viz","append","attr","root","children","treemap","tree","size","separation","treelayout","hierarchy","getChildren","g","link","data","links","linkEnter","enter","connection","descendants","nodeEnter","d","y","x","getFill","isUndefined","style","call","getTextBox","datum","getText","clone","lower","yep","insert","bbox","selection","each","getBBox","linkHorizontal","astJSON","JSON","stringify","replaceContents","astViewer","dependsJSON","dependsViewer","visualization_1","basic_setup_1","extensions","lang_json_1","lint_1","editable","of","newJSONViewerState","parent","document","querySelector","editor","changes","fold_1","miniCLEditor","miniCL_1","dispatch","updateOutput","devTools_1"],"mappings":"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","file":"","sourcesContent":["import { Token } from './lexer';\n\nexport type Position = {\n  first_line: number;\n  first_column: number;\n  last_line: number;\n  last_column: number;\n};\n\nexport function token2pos(token: Token): Position {\n  return {\n    first_line: token.line,\n    last_line: token.line,\n    first_column: token.first_column,\n    last_column: token.last_column\n  }\n}\n\nexport function join(start: Position, end: Position) {\n  return {\n    first_line: start.first_line,\n    last_line: end.last_line,\n    first_column: start.first_column,\n    last_column: end.last_column\n  };\n}\n\nexport function pos2string(pos: Position): string {\n  return pos.first_line.toString() + \".\" +\n         pos.first_column.toString() + \".\" +\n         pos.last_line.toString() + \".\" +\n         pos.last_column.toString();\n}\n\n// note, extending Error in the browser is problematic\n// https://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\nexport class ParseError {\n  constructor(public message: string, public position: Position) {}\n}\n","import * as AST from './ast';\n\nexport function findBases(node: AST.Node, dependsMap: {[key: string]: string[]}): string[] {\n    return baseMap[node.nodeType].findBase(node, dependsMap); \n}\n\nexport interface BaseFinder {\n  findBase(node: AST.Node, dependsMap: {[key: string]: string[]}): string[];\n}\n\nclass BaseNumber implements BaseFinder {\n  findBase(node: AST.NumberNode): string[] {\n    return []\n  }\n}\n\nclass BaseBoolean implements BaseFinder {\n    findBase(node: AST.BooleanNode): string[] {\n        return []\n    }\n}\n\nclass BaseBinary implements BaseFinder {\n    findBase(node: AST.BinaryOperationNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // recursively call findBases on left and right\n        let leftList = findBases(node.left, dependsMap);\n        baseList = baseList.concat(leftList);\n        let rightList = findBases(node.right, dependsMap)\n        baseList = baseList.concat(rightList);\n        return baseList;\n    }\n}\n\n// examples: x = Input(3); x = IsDefined(Input(3)); z = Inverse(x)\n// need dependsMap for the third example\nclass BaseFunction implements BaseFinder {\n    findBase(node: AST.FunctionNode, dependsMap: {[key: string]: string[]}): string[] {\n        console.log(\"in base function\");\n        let baseList: string[] = [];\n        if (node.name == \"Input\") {\n            // this is a base\n            baseList.push(node.nodeId);\n        }\n        else {\n            // recursively call findBases on argument(s)\n            for (let i = 0; i < node.args.length; i++) {\n                baseList = baseList.concat(findBases(node.args[i], dependsMap));\n            }\n        }\n        return baseList;\n    }\n}\n\n// assume that choose nodes will never create their own bases\n// they can still error check previously defined bases\nclass BaseChoose implements BaseFinder {\n    findBase(node: AST.ChooseNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // the bases of the cons and the otherwise\n        let consBases = findBases(node.case.consequent, dependsMap);\n        baseList = baseList.concat(consBases);\n        let otherBases = findBases(node.otherwise, dependsMap);\n        baseList = baseList.concat(otherBases);\n        return baseList;\n    }\n}\n\nclass BaseVariableAssignment implements BaseFinder {\n    findBase(node: AST.VariableAssignmentNode): string[] {\n        return []\n    }\n}\n\nclass BaseIdentifier implements BaseFinder {\n    findBase(node: AST.IdentifierNode, dependsMap: {[key: string]: string[]}): string[] {\n        // follow the chain in the dependsMap\n        return dependsMap[node.assignmentId];\n    }\n}\n\n\nconst baseMap: Partial<{[K in AST.NodeType]: BaseFinder}> = {\n  'Number' : new BaseNumber(),\n  'Boolean' : new BaseBoolean(),\n  'BinaryOperation' : new BaseBinary(),\n  'Function' : new BaseFunction(),\n  'Choose': new BaseChoose(),\n  'VariableAssignment': new BaseVariableAssignment(),\n  'Identifier': new BaseIdentifier()\n}\n","import { TokenStream } from './tokenstream';\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\nimport * as AST from './ast';\nimport { AbstractParser } from './parser';\nimport {ParseError, token2pos, join, pos2string} from './position';\nimport {findBases} from './findBase';\n\nexport interface InitialParselet {\n  parse(parser: AbstractParser,\n        tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}): AST.Node;\n}\n\n\nexport class NumberParselet implements InitialParselet {\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream,\n        token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n    // add node to the map\n    let newNode = {\n      nodeType: 'Number' as 'Number',\n      value: parseFloat(token.text),\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'number' as 'number',\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class BooleanParselet implements InitialParselet {\n  constructor(private value: boolean) {}\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'Boolean' as 'Boolean',\n      value: this.value,\n      outputType: { status: 'Definitely' as 'Definitely',\n                    valueType: 'boolean' as 'boolean',\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ParenParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    _token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken(')');\n\n    return exp;\n  }\n}\n\nexport abstract class ConsequentParselet {\n  constructor(\n    readonly tokenType: TokenType,\n    readonly associativity: 'left' | 'right'\n  ) {}\n  abstract parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}\n  ): AST.Node;\n}\n\nexport class BinaryOperatorParselet extends ConsequentParselet {\n  constructor(\n    public tokenType: BinaryOperationTokenType,\n    associativity: 'left' | 'right'\n  ) {\n    super(tokenType, associativity);\n  }\n\n  parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}\n  ): AST.Node {\n    const bindingPower = parser.bindingPower(token);\n\n    const right = parser.parse(\n      tokens,\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\n      varMap,\n      registeredNodes,\n      dependsMap\n    );\n    const position = join(left.pos, token2pos(tokens.last()));\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      outputType: undefined,\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n\n    return newNode;\n  }\n}\n\n// Parse function calls\n// Limitation: Functions are allowed to take exactly one argument\nexport class FunctionParselet implements InitialParselet {\n  \n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for one argument\n    let args = [arg1];\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for second argument\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: token.text,\n      args: args,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class ChooseParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predicate, consequent: consequent },\n      otherwise: otherwise,\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\n                    valueType: undefined,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\n\nexport class VariableAssignmentParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    \n    // deal with variable assignment\n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n\n    // need to save the variable and its assignment in a lookup table\n    varMap[token.text] = id;\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                    valueType: assignment?.outputType?.valueType,\n                    asserts: [] },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    dependsMap[id] = findBases(assignment, dependsMap); // NEW FUNCTION HERE\n\n    return newNode;\n  }\n}\n\nexport class IdentifierParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string},\n    registeredNodes: {[key: string]: AST.Node},\n    dependsMap: {[key: string]: string[]}) {\n    \n    const position = token2pos(token);\n    const id = pos2string(position);\n    // need to look up known variables in a lookup table (map?)\n\n    const assignmentId = varMap[token.text];\n\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);\n    }\n    else {\n      let newNode = {\n        nodeType: 'Identifier' as 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        outputType: { status: \"Maybe-Undefined\" as \"Maybe-Undefined\",\n                      valueType: undefined,\n                      asserts: [] },\n        pos: position,\n        nodeId: id\n      };\n      registeredNodes[id] = newNode;\n      return newNode;\n    }\n  }\n}\n","import {StringStream} from \"@codemirror/stream-parser\"\n\nexport function getTokens(text: string): Token[] {\n  const tokens: Token[] = [];\n  const state: State = {line: 1, stack: ['default']};\n\n  for (const line of text.split('\\n')) {\n    const stream = new StringStream();\n    stream.string = line;\n    while (!stream.eol()) {\n      const token = getToken(stream, state);\n      const emitToken = makeEmit(stream, state);\n      const fullToken = emitToken(token as TokenType);\n      if (token != undefined) {\n        tokens.push(fullToken);\n      }\n\n      if (stream.start == stream.pos) {\n        throw new Error(\n          `getToken failed to advance stream at position ${\n            stream.pos\n          } in string ${stream.string}`,\n        );\n      }\n      stream.start = stream.pos;\n    }\n\n    state.line += 1;\n  }\n\n  return tokens;\n}\n\nexport function getToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  //Built for codeMirror streams API\n  //State is a stack of states\n  switch (state.stack[state.stack.length - 1]) {\n    default:\n      return getDefaultToken(stream, state);\n  }\n}\n\nfunction makeEmit(stream: StringStream, state: State) {\n  return function emitToken(type: TokenType): Token {\n    return {\n      type,\n      first_column: stream.start,\n      last_column: stream.pos,\n      line: state.line,\n      text: stream.current(),\n    };\n  };\n}\n\nexport function getDefaultToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  // const emitToken = makeEmit(stream, state);\n  if (stream.eatSpace()) {\n    // skip whitespace\n    return undefined;\n  }\n\n  if (stream.match(/\\+/)) {\n    return '+';\n  }\n\n  if (stream.match(/\\-/)) {\n    return '-';\n  }\n\n  if (stream.match(/\\*/)) {\n    return '*';\n  }\n\n  if (stream.match(/\\//)) {\n    return '/';\n  }\n\n  if (stream.match(/\\|/)) {\n    return '|';\n  }\n\n  if (stream.match(/\\&/)) {\n    return '&';\n  }\n\n  if (stream.match(/\\(/)) {\n    return '(';\n  }\n\n  if (stream.match(/\\)/)) {\n    return ')';\n  }\n\n  // adding an equals operator\n  if (stream.match(/\\=/)) {\n    return '=';\n  }\n\n  if (stream.match(/-?[0-9]+(\\.[0-9]+)?/)) {\n    return 'NUMBER';\n  }\n\n  if (stream.match(/True/)) {\n    return 'TRUE';\n  }\n\n  if (stream.match(/False/)) {\n    return 'FALSE';\n  }\n\n  if (stream.match(/#/)) {\n    if (!stream.match(/\\n/)) {\n      // comment lasts till end of line\n      stream.match(/.*/); // if no eol encountered, comment lasts till end of file\n    }\n    return 'COMMENT';\n  }\n\n  // hardcode when to be a choose node not an identifier to get around parsing\n  if (stream.match(/WHEN/)) {\n    return 'CHOOSE1';\n  }\n\n  // Remove otherwise clause for now\n  if (stream.match(/OTHERWISE/)) {\n    return 'CHOOSE2';\n  }\n\n  if (stream.match(/[A-Z]([a-z|A-Z])*/)) {\n    return 'FUNCTION';\n  }\n\n  // Identifiers\n  // For now, the form of a valid identifier is: a lower-case alphabetic character,\n  // followed by zero or more alpha characters.\n  if (stream.match(/[a-z]([a-z|A-Z])*/)) {\n    return 'IDENTIFIER';\n  }\n  \n\n  stream.next();\n  return 'ERROR';\n}\n\nexport type BinaryOperationTokenType =\n  | '+'\n  | '-'\n  | '*'\n  | '/'\n  | '|' // this is an or\n  | '&' // this is an and\n\nexport type TokenType =\n  | BinaryOperationTokenType\n  | 'NUM'\n  | 'TRUE'\n  | 'FALSE'\n  | '('\n  | ')'\n  | 'COMMENT'\n  | 'ERROR'\n  | 'FUNCTION'\n  | 'IDENTIFIER'\n  | 'CHOOSE1'\n  | 'CHOOSE2'\n  | '='\n\nexport interface Token<T extends TokenType = TokenType> {\n  type: T;\n  text: string;\n  line: number;\n  first_column: number;\n  last_column: number;\n}\n\ntype Mode = 'default';\n\nexport interface State {\n  stack: Mode[];\n  line: number;\n}\n","import {Token, TokenType, getTokens} from './lexer';\nimport {ParseError, token2pos} from './position';\n\nexport class TokenStream {\n  tokens: Token[];\n  pos: number = 0;\n\n  constructor(text: string) {\n    this.tokens = getTokens(text).filter(t => t.type != 'COMMENT');\n  }\n\n  consume(): Token | undefined {\n    const token = this.tokens[this.pos];\n    if (token) {\n      this.pos += 1;\n    }\n    return token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens[this.pos];\n  }\n\n  last(): Token {\n    return this.tokens[this.pos - 1];\n  }\n\n  expectToken<T extends TokenType>(expectedType: T): Token<T> {\n    const actual = this.consume();\n\n    if (!actual) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token but found none.`,\n        token2pos(this.last()),\n      );\n    }\n\n    if (actual.type != expectedType) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token type but found \"${actual.type}\".`,\n        token2pos(actual),\n      );\n    }\n\n    return actual as Token<T>;\n  }\n}\n","import * as Parselet from './parselet';\nimport {Token, TokenType} from './lexer';\nimport {TokenStream} from './tokenstream';\nimport {ParseError, token2pos} from './position';\nimport * as AST from './ast';\n\nexport function parse(text: string,\n                      varMap: {[key: string]: string},\n                      registeredNodes: {[key: string]: AST.Node},\n                      dependsMap: {[key: string]: string[]}): \n                      {nodes: AST.Node[]; errors: ParseError[]} {\n  const nodes: AST.Node[] = [];\n\n  const tokens = new TokenStream(text);\n  const parser = new Parser();\n  while (tokens.peek()) {\n    try {\n      nodes.push(parser.parse(tokens, 0, varMap, registeredNodes, dependsMap));\n    } catch (e) {\n      return {\n        nodes,\n        errors: [e],\n      };\n    }\n  }\n\n  return {nodes, errors: []};\n}\n\nexport abstract class AbstractParser {\n  public bindingPowers: {[tokenType in TokenType]: number};\n\n  protected abstract initialMap(): Partial<\n    {[K in TokenType]: Parselet.InitialParselet}\n  >;\n  protected abstract consequentMap(): Partial<\n    {[K in TokenType]: Parselet.ConsequentParselet}\n  >;\n  protected abstract bindingClasses(): TokenType[][];\n\n  constructor() {\n    this.bindingPowers = {} as any;\n\n    const bindingClasses = this.bindingClasses();\n    for (let i = 0; i < bindingClasses.length; i++) {\n      for (const tokenType of bindingClasses[i]) {\n        this.bindingPowers[tokenType] = 10 * i + 9;\n      }\n    }\n\n    for (const tokenType of Object.keys(this.consequentMap) as TokenType[]) {\n      if (this.bindingPowers[tokenType] == undefined) {\n        throw new Error(\n          `Token ${tokenType} defined in consequentMap has no associated binding power.\n          Make sure it is also listed in bindingClasses.`,\n        );\n      }\n    }\n  }\n\n  bindingPower(token: Token): number {\n    if (this.bindingPowers[token.type] != undefined) {\n      return this.bindingPowers[token.type];\n    } else {\n      throw new ParseError(\n        `Unexpected token type ${token.type}.`,\n        token2pos(token),\n      );\n    }\n  }\n\n  parse(tokens: TokenStream,\n        currentBindingPower: number,\n        varMap: {[key: string]: string},\n        registeredNodes: {[key: string]: AST.Node},\n        dependsMap: {[key: string]: string[]}): AST.Node {\n    const token = tokens.consume();\n    if (!token) {\n      throw new ParseError(\n        `Unexpected end of tokens.`,\n        token2pos(tokens.last()),\n      );\n    }\n\n    const initialParselet = this.initialMap()[token.type];\n\n    if (!initialParselet) {\n      throw new ParseError(\n        `Unexpected token type ${token.type}`,\n        token2pos(token),\n      );\n    }\n\n    let left = initialParselet.parse(this, tokens, token, varMap, registeredNodes, dependsMap);\n\n    while (true) {\n      const next = tokens.peek();\n      if (!next) {\n        break;\n      }\n\n      const consequentParselet = this.consequentMap()[next.type];\n\n      if (!consequentParselet) {\n        break;\n      }\n\n      if (currentBindingPower >= this.bindingPower(next)) {\n        break;\n      }\n\n      tokens.consume();\n      left = consequentParselet.parse(this, tokens, left, next, varMap, registeredNodes, dependsMap);\n    }\n\n    return left;\n  }\n}\n\nexport class Parser extends AbstractParser {\n  initialMap() {\n    return {\n      NUMBER: new Parselet.NumberParselet(),\n      TRUE: new Parselet.BooleanParselet(true),\n      FALSE: new Parselet.BooleanParselet(false),\n      '(': new Parselet.ParenParselet(),\n      FUNCTION: new Parselet.FunctionParselet(),\n      CHOOSE1: new Parselet.ChooseParselet(),\n      IDENTIFIER: new Parselet.IdentifierParselet()\n    };\n  }\n\n  consequentMap() {\n    return {\n      '+': new Parselet.BinaryOperatorParselet('+', 'left'),\n      '-': new Parselet.BinaryOperatorParselet('-', 'left'),\n      '*': new Parselet.BinaryOperatorParselet('*', 'left'),\n      '/': new Parselet.BinaryOperatorParselet('/', 'left'),\n      '|': new Parselet.BinaryOperatorParselet('|', 'right'),\n      '&': new Parselet.BinaryOperatorParselet('&', 'right')\n    };\n  }\n\n  bindingClasses() {\n    const classes: TokenType[][] = [['+', '-'], ['*', '/'], ['|', '&']];\n    return classes;\n  }\n}\n","import {StateField} from \"@codemirror/state\"\nimport {Transaction} from \"@codemirror/state\"\nimport * as AST from './ast';\nimport {parse} from './parser';\nimport {ParseError} from './position';\n\n/**\n * A State field that holds the results of parsing\n */\nexport const parseResults: StateField<ParseResults> = StateField.define({\n  create() { return emptyParseResults },\n  update(value, tr) { return tr.docChanged ? parseProgram(tr) : value }\n})\n\n/**\n * Parse the program created from a transaction, returning a ParseResults object\n */\nfunction parseProgram(tr: Transaction) : ParseResults {\n  const contents = tr.state.doc.toString()\n\n  let varMap: {[key: string]: string} = {}\n  let registeredNodes: {[key: string]: AST.Node} = {}\n  let dependsMap: {[key: string]: string[]} = {}\n  const ast = parse(contents, varMap, registeredNodes, dependsMap)\n\n  return {\n    nodes: ast.nodes,\n    parseErrors: ast.errors,\n    varMap: varMap,\n    registeredNodes: registeredNodes,\n    dependsMap: dependsMap\n  }\n}\n\n/**\n * Type that describes the results of parsing\n */\nexport type ParseResults = {\n  nodes: AST.Node[];\n  parseErrors: ParseError[];\n  varMap: {[key: string]: string};\n  registeredNodes: {[key: string]: AST.Node};\n  dependsMap: {[key: string]: string[]};\n}\n\n/**\n * Can be used as the initial results of parsing\n */\nconst emptyParseResults: ParseResults = {\n  nodes: [],\n  parseErrors: [],\n  varMap: {},\n  registeredNodes: {},\n  dependsMap: {}\n}\n","import {Position} from './position';\nimport * as AST from './ast';\nimport {equals} from './equals';\n\n/***** ITERATION: change all outputType.valueType to simply outputType *****/\n\nexport function typecheck(nodes: AST.Node[], registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  const errors = nodes.map(n => typecheckNode(n, registeredNodes));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction typecheckNode(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n  return checkerMap[node.nodeType].check(node, registeredNodes);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface TypeChecker {\n  check(node: AST.Node, registeredNodes: {[key: string]: AST.Node}): TypeError[];\n}\n\nclass CheckNumber implements TypeChecker {\n  check(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\nclass CheckBoolean implements TypeChecker {\n  check(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\nclass CheckBinary implements TypeChecker {\n  check(node: AST.BinaryOperationNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    const errors: TypeError[] = typecheckNode(node.left, registeredNodes).concat(typecheckNode(node.right, registeredNodes));\n    \n    // Check if same operand type (both numbers, both booleans)\n    if (node.left?.outputType?.valueType != node.right?.outputType?.valueType) {\n      errors.push(new TypeError(\"incompatible types for binary operator\", node.pos));\n    }\n    // Check if incorrect combination of operator and operands\n    else if (node.right?.outputType?.valueType == 'boolean' && (node.operator != \"|\" && node.operator != '&')) {\n      errors.push(new TypeError(\"incompatible operation for boolean operands\", node.pos));\n    }\n    else if (node.right?.outputType?.valueType == 'number' && (node.operator == \"|\" || node.operator == '&')) {\n      errors.push(new TypeError(\"incompatible operation for number operands\", node.pos));\n    }\n\n    node.outputType.valueType = node.left?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckFunction implements TypeChecker {\n  check(node: AST.FunctionNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First typecheck the argument\n    const arg1Errors = typecheckNode(node.args[0], registeredNodes);\n    errors = errors.concat(arg1Errors);\n    if (node.args.length > 1) {\n      const arg2Errors = typecheckNode(node.args[1], registeredNodes);\n      errors = errors.concat(arg2Errors);\n      if (node.args[0]?.outputType?.valueType != node.args[1]?.outputType?.valueType) {\n        errors.push(new TypeError(\"arguments must have same type\", node.args[0].pos));\n      }\n    }\n\n    const functionName = node.name\n    const argType = builtins[functionName].inputType;\n\n    // we found a builtin function\n    if (argType) {\n\n      // typecheck the argument\n      // Assume both arguments are the same type (see error produced above)\n      if (argType != 'any' && node.args[0]?.outputType?.valueType != argType) {\n        errors.push(new TypeError(\"incompatible argument type for \" + functionName, node.pos));\n      }\n    }\n  \n    // this is not a known, builtin function\n    else {\n      errors.push(new TypeError(\"unknown function\", node.pos));\n    }    \n\n    return errors;\n  }\n}\n\nclass CheckChoose implements TypeChecker {\n  check(node: AST.ChooseNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n\n    // First typecheck the inner nodes\n    const predErrors = typecheckNode(predicate, registeredNodes);\n    const consErrors = typecheckNode(consequent, registeredNodes);\n    const otherErrors = typecheckNode(otherwise, registeredNodes);\n    errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n    // check return types are the same for both cases\n    if (consequent?.outputType?.valueType != otherwise?.outputType?.valueType) {\n      errors.push(new TypeError(\"Return types are not the same for both cases\", consequent.pos));\n      errors.push(new TypeError(\"Return types are not the same for both cases\", otherwise.pos));\n    }\n\n    // check that the predicate returns a boolean\n    if (predicate.outputType.valueType != 'boolean') {\n      errors.push(new TypeError(\"Predicate must return a boolean\", predicate.pos));\n    }\n\n    node.outputType.valueType = consequent?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckVariable implements TypeChecker {\n  check(node: AST.VariableAssignmentNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n    // First typecheck the assignment node\n    const assignmentErrors = typecheckNode(node.assignment, registeredNodes);\n    errors = errors.concat(assignmentErrors);\n\n    node.outputType.valueType = node.assignment?.outputType?.valueType;\n\n    return errors;\n  }\n}\n\nclass CheckIdentifier implements TypeChecker {\n  check(node: AST.IdentifierNode, registeredNodes: {[key: string]: AST.Node}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Maybe make assigmentId be valueId?\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    }\n\n    node.outputType.valueType = valueNode.outputType.valueType;\n\n    return errors;\n  }\n}\n\n// Dictionary of builtin functions that maps a function name to the type of its argument\nconst builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean'},\n  \"Inverse\": {inputType: 'number', resultType: 'number'},\n  \"Input\": {inputType: 'number', resultType: 'number'},\n  \"Sink\": {inputType: 'any', resultType: 'any'},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair'},\n  \"X\": {inputType: 'pair', resultType: 'number'},\n  \"Y\": {inputType: 'pair', resultType: 'number'}\n}\n\nconst checkerMap: Partial<{[K in AST.NodeType]: TypeChecker}> = {\n  'Number' : new CheckNumber(),\n  'Boolean' : new CheckBoolean(),\n  'BinaryOperation' : new CheckBinary(),\n  'Function' : new CheckFunction(),\n  'Choose': new CheckChoose(),\n  'VariableAssignment': new CheckVariable(),\n  'Identifier': new CheckIdentifier()\n}","import {Position} from './position';\nimport * as AST from './ast';\nimport {equals} from './equals';\nimport {findBases} from './findBase';\n\nexport function mudCheck(nodes: AST.Node[], \n                        registeredNodes: {[key: string]: AST.Node},\n                        dependsMap: {[key: string]: string[]},\n                        assertMap: string[]): TypeError[] {\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap, assertMap));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction mudCheckNode(node: AST.Node, \n                    nodes: AST.Node[], \n                    registeredNodes: {[key: string]: AST.Node},\n                    dependsMap: {[key: string]: string[]},\n                    assertMap: string[]): TypeError[] {\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap, assertMap);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface MudChecker {\n  mudCheck(node: AST.Node, \n          nodes: AST.Node[], \n          registeredNodes: {[key: string]: AST.Node},\n          dependsMap: {[key: string]: string[]},\n          assertMap: string[]): TypeError[];\n}\n\nclass MudCheckNumber implements MudChecker {\n  mudCheck(node: AST.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\nclass MudCheckBoolean implements MudChecker {\n    mudCheck(node: AST.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\nclass MudCheckBinary implements MudChecker {\n    mudCheck(node: AST.BinaryOperationNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]},\n            assertMap: string[]): TypeError[] {\n        const errors: TypeError[] = mudCheckNode(node.left, nodes, registeredNodes, dependsMap, assertMap)\n        .concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap, assertMap));\n\n        // If no type errors, update the output type of this node, based on the outputType of its inputs\n        if (node.right?.outputType?.status == 'Maybe-Undefined' || node.left?.outputType?.status == 'Maybe-Undefined') {\n            node.outputType = {status: 'Maybe-Undefined',\n                              valueType: node.left?.outputType?.valueType };\n        } else {\n            node.outputType = {status: 'Definitely',\n                            valueType: node.left?.outputType?.valueType };\n        }\n\n        if (node.operator == '|') {\n          let intersection = [];\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          for (let i = 0; i < leftAsserts.length; i++) {\n            if (rightAsserts.find(e => e == leftAsserts[i])) {\n              intersection.push(leftAsserts[i]);\n            }\n          }\n          node.outputType.asserts = intersection;\n        }\n        else {\n          // if it's an and, we take all of the asserts\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          let allAsserts = leftAsserts.concat(rightAsserts);\n\n          node.outputType.asserts = allAsserts;\n        }\n\n        return errors;\n    }\n}\n\nclass MudCheckFunction implements MudChecker {\n    mudCheck(node: AST.FunctionNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]},\n            assertMap: string[]): TypeError[] {\n        let errors: TypeError[] = [];\n\n        if (node.name == 'IsDefined') {\n          let bases = findBases(node, dependsMap);\n          node.outputType.asserts = node.outputType.asserts.concat(bases);\n        }\n\n        if (node.name == 'Sink') {\n          assertMap = [];\n        }\n        \n        // First typecheck the argument\n        const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap, assertMap);\n        errors = errors.concat(arg1Errors);\n        if (node.args.length > 1) {\n        const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap, assertMap);\n        errors = errors.concat(arg2Errors);\n        }\n\n       \n\n        const functionName = node.name\n        const argType = builtins[functionName].inputType;\n        const returnType = builtins[functionName].resultType;\n\n        // only show error if in sink \"node\"\n        if (functionName == 'Sink') {\n        // if sink \"node\" takes in possibly undefined values, warn the author\n        // a sink has one argument\n        if (node.args[0]?.outputType?.status == 'Maybe-Undefined') {\n            errors.push(new TypeError(\"User facing content could be undefined.\", node.args[0].pos));\n        }\n        }\n\n        // If no type errors, update the output type of this node, based on the outputType of its argument\n        if (node.args[0]?.outputType?.status == 'Maybe-Undefined' || functionName == 'Input') {\n            // IsDefined should always output a definitely regardless of argument status\n            if (functionName != 'IsDefined') {\n            node.outputType.status = 'Maybe-Undefined';\n            }\n            else {\n            node.outputType.status = 'Definitely';\n            }\n        } else if (node.args.length > 1) {\n            if (node.args[1].outputType.status == 'Maybe-Undefined') {\n            // Note: IsDefined only has one argument, so we don't need to check for that here\n            node.outputType.status = 'Maybe-Undefined';\n            } else {\n            node.outputType.status = 'Definitely';\n            }\n        } else {\n            node.outputType.status = 'Definitely';\n        }\n\n       \n\n        node.outputType.valueType = returnType;\n\n        return errors;\n    }\n}\n\nclass MudCheckChoose implements MudChecker {\n    mudCheck(node: AST.ChooseNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]},\n            assertMap: string[]): TypeError[] {\n        let errors: TypeError[] = [];\n\n        const predicate = node.case.predicate;\n        const consequent = node.case.consequent;\n        const otherwise = node.otherwise;\n\n        // add stuff to the assertMap\n\n        // First typecheck the inner nodes\n        const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap, assertMap);\n        const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap, assertMap);\n        const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap, assertMap);\n        errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n        node.outputType.valueType = consequent.outputType.valueType;\n\n        // DEFUALT status = maybe-undefined\n\n        let consDef = false;\n        let otherDef = false;\n        let localAsserts: string[] = [];\n\n        if (otherwise.outputType.status == 'Definitely') {\n          otherDef = true;\n        }\n\n        // consequent in MU and we have a binary predicate\n        if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'BinaryOperation') {\n          // Cases: both bool *******************************\n          //        bool, function (and vice versa) *********\n          //        bool, binary op (and vice versa) IN PROGRESS\n          //        function, binary op (and vice versa)\n          //        both function ***************************\n          //        both binary op\n\n          // no need for bool, bool\n          \n          consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n\n          // consDef = doBinOp(predicate, consequent, dependsMap, assertMap);\n\n        }\n\n\n        // propagate maybe-undefined type, or change to definitely\n        // if the predicate is not a function, we cannot error check its type\n        if (consequent.outputType.status == 'Maybe-Undefined' && predicate.nodeType == 'Function') {\n          // we can only errorr check with IsDefined function\n          // IsDefined has only one argument\n          if (predicate.name == 'IsDefined') {\n            handleAsserts(predicate, dependsMap, assertMap);\n            consDef = handleCheck(consequent, dependsMap, assertMap);\n          }\n        }\n\n        if (consequent?.outputType.status == 'Definitely') {\n          consDef = true;\n        }\n\n        if (consDef && otherDef) {\n          node.outputType.status = 'Definitely';\n        }\n\n        return errors;\n    }\n}\n\nclass MudCheckVariable implements MudChecker {\n    mudCheck(node: AST.VariableAssignmentNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]},\n            assertMap: string[]): TypeError[] {\n    let errors: TypeError[] = [];\n    // First typecheck the assignment node\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap, assertMap);\n    errors = errors.concat(assignmentErrors);\n\n    // Set variable assignment node output type to the same as it's assignment\n    node.outputType.status = node.assignment.outputType.status;\n    node.outputType.valueType = node.assignment.outputType.valueType;\n\n    return errors;\n  }\n}\n\nclass MudCheckIdentifier implements MudChecker {\n    mudCheck(node: AST.IdentifierNode, \n            nodes: AST.Node[], \n            registeredNodes: {[key: string]: AST.Node},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Maybe make assigmentId be valueId?\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    } else {\n      // If we found the assignment node, set the output type of the identifier\n      node.outputType.status = valueNode.outputType.status;\n      node.outputType.valueType = valueNode.outputType.valueType;\n    }\n\n    return errors;\n  }\n}\n\n// Dictionary of builtin functions that maps a function name to the type of its argument\nconst builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean'},\n  \"Inverse\": {inputType: 'number', resultType: 'number'},\n  \"Input\": {inputType: 'number', resultType: 'number'},\n  \"Sink\": {inputType: 'any', resultType: 'any'},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair'},\n  \"X\": {inputType: 'pair', resultType: 'number'},\n  \"Y\": {inputType: 'pair', resultType: 'number'}\n}\n\nconst mudCheckerMap: Partial<{[K in AST.NodeType]: MudChecker}> = {\n  'Number' : new MudCheckNumber(),\n  'Boolean' : new MudCheckBoolean(),\n  'BinaryOperation' : new MudCheckBinary(),\n  'Function' : new MudCheckFunction(),\n  'Choose': new MudCheckChoose(),\n  'VariableAssignment': new MudCheckVariable(),\n  'Identifier': new MudCheckIdentifier()\n}\n\nfunction handleAsserts(predicate: AST.Node,\n                      dependsMap: {[key: string]: string[]},\n                      assertMap: string[]): void {\n\n    // look up the bases of the predicate\n    let predBases = findBases(predicate, dependsMap);\n    // set outputType to Definitely if consBases are contained in predBases\n    // add to assertMap\n    for (let k = 0; k < predBases.length; k++) {\n      assertMap.push(predBases[k]);\n    }\n}\n\nfunction handleCheck(consequent: AST.Node,\n                    dependsMap: {[key: string]: string[]},\n                    assertMap: string[]): boolean {\n\n  let consBases = findBases(consequent, dependsMap);\n\n  let contained = true;\n    for (let i = 0; i < consBases.length; i++) {\n      if (!assertMap.find(e => e == consBases[i])) {\n        contained = false;\n      }\n    }\n\n    return contained;\n}\n\n/*\n\nfunction resolveBF(predicate: AST.Node,\n                  consequent: AST.Node,\n                  dependsMap: {[key: string]: string[]},\n                  assertMap: string[]): boolean {\n\n  // boolean, function\n  if (predicate.right.name == 'IsDefined') {\n    handleAsserts(predicate.right, dependsMap, assertMap);\n    return handleCheck(consequent, dependsMap, assertMap);\n  }\n  else {\n    return false;\n  }\n\n}\n\nfunction resolveFB(predicate: AST.Node,\n                  consequent: AST.Node,\n                  dependsMap: {[key: string]: string[]},\n                  assertMap: string[]): boolean {\n  // function, boolean\n  if (predicate.left.name == 'IsDefined') {\n    handleAsserts(predicate.left, dependsMap, assertMap);\n    return handleCheck(consequent, dependsMap, assertMap);\n  }\n  else {\n    return false;\n  }\n}\n\nfunction resolveFF(predicate: AST.Node,\n                  consequent: AST.Node,\n                  dependsMap: {[key: string]: string[]},\n                  assertMap: string[]): boolean {\n  // function, function\n  let consDefLeft = false;\n  let consDefRight = false;\n  let consDefBoth = false;\n  let localAsserts: string[] = [];\n\n  if (predicate.left.name == 'IsDefined') {\n    handleAsserts(predicate.left, dependsMap, localAsserts);\n    consDefLeft = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefLeft) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.right.name == 'IsDefined') {\n    handleAsserts(predicate.right, dependsMap, localAsserts);\n    consDefRight = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefRight) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.left.name == 'IsDefined' && predicate.right.name == 'IsDefined' && predicate.operator == '&') {\n    handleAsserts(predicate.left, dependsMap, localAsserts);\n    handleAsserts(predicate.right, dependsMap, localAsserts);\n    consDefBoth = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefBoth) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.operator == '&') {\n    return consDefLeft || consDefRight || consDefBoth;\n  }\n  else if (predicate.operator == '|') {\n    return consDefLeft && consDefRight;\n  }\n  else {\n    return false;\n  }\n}\n\nfunction resolveBBO(predicate: AST.Node,\n  consequent: AST.Node,\n  dependsMap: {[key: string]: string[]},\n  assertMap: string[]): boolean {\n  // boolean, binary operation\n  // recurse on the right\n  let consDefRight = doBinOp(predicate.right, consequent, dependsMap, assertMap);\n  if (predicate.left.value == false && predicate.operator == '|') {\n    return consDefRight;\n  }\n  if (predicate.left.value == true && predicate.operator == '&') {\n    return consDefRight;\n  }\n  else {\n    // this may change to true\n    return false;\n  }\n\n}\n\nfunction resolveBOB(predicate: AST.Node,\n  consequent: AST.Node,\n  dependsMap: {[key: string]: string[]},\n  assertMap: string[]): boolean {\n  // binary operation, boolean\n  let consDefLeft = doBinOp(predicate.left, consequent, dependsMap, assertMap);\n  if (predicate.right.value == false && predicate.operator == '|') {\n    return consDefLeft;\n  }\n  if (predicate.right.value == true && predicate.operator == '&') {\n    return consDefLeft;\n  }\n  else {\n    // this may change to true\n    return false;\n  }\n}\n\nfunction resolveBOF(predicate: AST.Node,\n  consequent: AST.Node,\n  dependsMap: {[key: string]: string[]},\n  assertMap: string[]): boolean {\n  // binary operation, function\n  // recurse on the left with local asserts\n  let consDefLeft = false;\n  let consDefRight = false;\n  let consDefBoth = false;\n  let localAsserts: string[] = [];\n\n  consDefLeft = doBinOp(predicate.left, consequent, dependsMap, localAsserts);\n  if (consDefLeft) {\n    assertMap = assertMap.concat(localAsserts);\n  }\n  localAsserts = [];\n\n  if (predicate.right.name == 'IsDefined') {\n    handleAsserts(predicate.right, dependsMap, localAsserts);\n    consDefRight = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefRight) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.right.name == 'IsDefined' && predicate.operator == '&') {\n    let temp = doBinOp(predicate.left, consequent, dependsMap, localAsserts);\n    handleAsserts(predicate.right, dependsMap, localAsserts);\n    consDefBoth = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefBoth) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.operator == '&') {\n    return consDefLeft || consDefRight || consDefBoth;\n  }\n  else if (predicate.operator == '|') {\n    return consDefLeft && consDefRight;\n  }\n  else {\n    return false;\n  }\n  \n}\n\nfunction resolveFBO(predicate: AST.Node,\n  consequent: AST.Node,\n  dependsMap: {[key: string]: string[]},\n  assertMap: string[]): boolean {\n  // function, binary operation\n  // recurse on the left with local asserts\n  let consDefLeft = false;\n  let consDefRight = false;\n  let consDefBoth = false;\n  let localAsserts: string[] = [];\n\n  consDefRight = doBinOp(predicate.right, consequent, dependsMap, localAsserts);\n  if (consDefRight) {\n    assertMap = assertMap.concat(localAsserts);\n  }\n  localAsserts = [];\n\n  if (predicate.left.name == 'IsDefined') {\n    handleAsserts(predicate.left, dependsMap, localAsserts);\n    consDefLeft = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefLeft) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.left.name == 'IsDefined' && predicate.operator == '&') {\n    let temp = doBinOp(predicate.right, consequent, dependsMap, localAsserts);\n    handleAsserts(predicate.left, dependsMap, localAsserts);\n    consDefBoth = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefBoth) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.operator == '&') {\n    return consDefLeft || consDefRight || consDefBoth;\n  }\n  else if (predicate.operator == '|') {\n    return consDefLeft && consDefRight;\n  }\n  else {\n    return false;\n  }\n}\n\nfunction resolveBOBO(predicate: AST.Node,\n  consequent: AST.Node,\n  dependsMap: {[key: string]: string[]},\n  assertMap: string[]): boolean {\n  // binary operation, binary operation\n  let consDefLeft = false;\n  let consDefRight = false;\n  let consDefBoth = false;\n  let localAsserts: string[] = [];\n\n  consDefRight = doBinOp(predicate.right, consequent, dependsMap, localAsserts);\n  if (consDefRight) {\n    assertMap = assertMap.concat(localAsserts);\n  }\n  localAsserts = [];\n\n  consDefLeft = doBinOp(predicate.left, consequent, dependsMap, localAsserts);\n  if (consDefLeft) {\n    assertMap = assertMap.concat(localAsserts);\n  }\n  localAsserts = [];\n\n  if (predicate.operator == '&') {\n    let temp = doBinOp(predicate.right, consequent, dependsMap, localAsserts);\n    let temp2 = doBinOp(predicate.left, consequent, dependsMap, localAsserts);\n    consDefBoth = handleCheck(consequent, dependsMap, localAsserts);\n    if (consDefBoth) {\n      assertMap = assertMap.concat(localAsserts);\n    }\n    localAsserts = [];\n  }\n\n  if (predicate.operator == '&') {\n    return consDefLeft || consDefRight || consDefBoth;\n  }\n  else if (predicate.operator == '|') {\n    return consDefLeft && consDefRight;\n  }\n  else {\n    return false;\n  }\n}\n\nfunction doBinOp(predicate: AST.Node,\n  consequent: AST.Node,\n  dependsMap: {[key: string]: string[]},\n  assertMap: string[]): boolean {\n  let consDef = false;\n  // function, boolean\n  if (predicate.left.nodeType == 'Function' && predicate.right.nodeType == 'Boolean') {\n    consDef = resolveFB(predicate, consequent, dependsMap, assertMap);\n  }\n\n  // boolean, function\n  if (predicate.left.nodeType == 'Boolean' && predicate.right.nodeType == 'Function') {\n    consDef = resolveBF(predicate, consequent, dependsMap, assertMap);\n  }\n\n  // function, function\n  if (predicate.left.nodeType == 'Function' && predicate.right.nodeType == 'Function') {\n    consDef = resolveFF(predicate, consequent, dependsMap, assertMap);\n\n  }\n\n  // bool, binary op\n  if (predicate.left.nodeType == 'Boolean' && predicate.right.nodeType == 'BinaryOperation') {\n    consDef = resolveBBO(predicate, consequent, dependsMap, assertMap);\n  }\n\n  // binary op, bool\n  if (predicate.left.nodeType == 'BinaryOperation' && predicate.right.nodeType == 'Boolean') {\n    consDef = resolveBOB(predicate, consequent, dependsMap, assertMap);\n  }\n\n  // function, binary op\n  if (predicate.left.nodeType == 'Function' && predicate.right.nodeType == 'BinaryOperation') {\n    consDef = resolveFBO(predicate, consequent, dependsMap, assertMap);\n  }\n\n  // binary op, function\n  if (predicate.left.nodeType == 'BinaryOperation' && predicate.right.nodeType == 'Function') {\n    consDef = resolveBOF(predicate, consequent, dependsMap, assertMap);\n  }\n\n  // binary op, binary op\n  if (predicate.left.nodeType == 'BinaryOperation' && predicate.right.nodeType == 'BinaryOperation') {\n    consDef = resolveBOBO(predicate, consequent, dependsMap, assertMap);\n  }\n\n  return consDef;\n}\n*/","import {StreamParser, StringStream} from \"@codemirror/stream-parser\"\nimport {Diagnostic} from \"@codemirror/lint\"\nimport {EditorView} from \"@codemirror/view\"\nimport {State, getDefaultToken} from './lexer'\nimport {ParseError} from './position'\nimport {typecheck} from './typechecker';\nimport {mudCheck} from './mudChecker';\nimport {parseResults} from './parseResults';\n\n/**\n * The extension for our language\n */\nexport const miniCL: StreamParser<State> = {\n  startState: function (): State {\n    return {line: 1, stack: ['default']};\n  },\n  token: function (stream: StringStream, state: State): string | undefined {\n    if (stream.eatSpace()) return null;\n    return token2tag(getDefaultToken(stream, state));\n  }\n};\n\n/**\n * The linter for our language\n */\n export const miniCLLinter = () => (view: EditorView): Diagnostic[] => {\n\n  // Get the result types\n  const results = view.state.field(parseResults);\n\n  // Error checking\n  let assertMap: string[] = [];\n  const mudErrors = mudCheck(results.nodes, results.registeredNodes, results.dependsMap, assertMap);\n  const typeErrors = typecheck(results.nodes, results.registeredNodes);\n\n  // Create a diagnostic for each kind of error\n  const parseDiagnostics = results.parseErrors.map(makeDiagnostic(view));\n  const typeDiagnostics = typeErrors.map(makeDiagnostic(view));\n  const mudDiagnostics = mudErrors.map(makeDiagnostic(view, 'warning'));\n\n  return parseDiagnostics.concat(typeDiagnostics).concat(mudDiagnostics);\n}\n\n/**\n * Create a diagnostic from an error\n */\nconst makeDiagnostic = (view: EditorView, severity: 'error' | 'info' | 'warning' = 'error') => \n  (error): Diagnostic => {\n    return {\n      from: firstLine(view, error) + error.position.first_column,\n      to: lastLine(view, error) + error.position.last_column,\n      message: error.message,\n      severity: severity\n    }\n}\n\n/**\n * @returns the line number for the start of the error\n */\nfunction firstLine(view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.first_line).from;\n}\n\n/**\n * @returns the line number for the end of the error\n */\nfunction lastLine (view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.last_line).from;    \n}\n\n/**\n * Convert our bespoke parser Token type to a token type that is recognized by CodeMirror\n */\nfunction token2tag(token: string): string | undefined {\n  switch (token) {\n    case 'NUMBER':\n      return 'number';\n\n    case 'TRUE':\n      return 'boolean';\n\n    case 'FALSE':\n      return 'boolean';\n\n    case '(':\n    case ')':\n      return 'bracket';\n\n    case '+':\n    case '-':\n    case '*':\n    case '/':\n    case '|':\n    case '&':\n    case '=':\n      return 'operator';\n\n    case 'COMMENT':\n      return 'comment';\n\n    case 'CHOOSE1':\n    case 'CHOOSE2':\n      return 'choose';\n\n    case 'FUNCTION':\n      return 'function';\n\n    case 'IDENTIFIER':\n      return 'variable';\n\n    case 'ERROR':\n      return 'error';\n\n    default:\n      return undefined;\n  }\n}\n","import * as d3Hierarchy from 'd3-hierarchy';\nimport * as d3Select from 'd3-selection';\nimport * as d3shape from 'd3-shape';\nimport * as AST from './ast';\n\nexport function visualize(nodes: AST.Node[]): void {\n\n    // Placement and size of tree\n    const margin = {top: 20, right: 90, bottom: 20, left: 90};\n    const height = 300 - margin.top - margin.bottom;\n    const width  = 500 - margin.left - margin.right;\n  \n    // Make the svg\n    d3Select.select('#viz').selectAll('svg').remove();\n    const viz = d3Select.select('#viz').append('svg');\n  \n    // Remove existing visualizations\n    viz.selectAll('*').remove();\n  \n    // Add a new visualization\n    viz.attr('width', width + margin.left + margin.right)\n       .attr('height', height + margin.top + margin.bottom);\n\n    const root: Node = {nodeType: 'Program', children: nodes}\n\n    // Visualize all the statements\n    // for (var statement of nodes) {\n\n      // Create the tree and layout\n      const treemap = d3Hierarchy.tree()\n        .size([height, width])\n        .separation(() => 1);\n      const treelayout = d3Hierarchy.hierarchy(root, getChildren);\n      const tree = treemap(treelayout);\n  \n      // Add a new graph element for this statement\n      const g = viz.append('g')\n                  //  .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n                   .attr('transform', `translate(${margin.left}, ${margin.top})`)\n                   .attr(\"font-family\", \"sans-serif\")\n                   .attr(\"font-size\", 12)\n               \n      // Edge updates\n      const link = g.selectAll('path.link').data(tree.links());\n\n      // Edge entry\n      const linkEnter = link.enter().append('path', 'g');\n        \n      // general edge attributes\n      linkEnter.attr('class', 'link')\n               .attr('fill', 'none')\n               .attr(\"stroke-opacity\", 0.4)\n               .attr('stroke', '#555')\n               .attr(\"stroke-width\", 1.5)\n               .attr('d', connection);\n\n        \n      // Node updates\n      const node = g.selectAll('g.node').data(tree.descendants());\n\n      // Node entry\n      const nodeEnter = node.enter().append('g');\n\n      // general node attributes\n      nodeEnter.attr('class', 'node')\n               .attr('transform', d => `translate(${d.y}, ${d.x})`);\n\n      nodeEnter.append('circle')\n               .attr(\"fill\", getFill)\n               .attr('r', '2.5')\n               .attr('stroke-width', 10);\n\n      // add text\n      nodeEnter.append('text')\n                // .attr('dy', '-10px')\n                .attr(\"dy\", \"0.31em\")\n                .attr(\"x\", d => d.children ? -8 : 8)\n                .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n                .attr('fill', d => isUndefined(d) ? '#fc6666' : 'black')\n                .style(\"fill-opacity\", 1)\n                .call(getTextBox)\n                .datum(d => d.data)\n                .text(getText)\n          .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n    \n      // Highlight undefined -- not working\n      // Inspired in part by https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\n      nodeEnter.filter((d,i) => isUndefined(d))\n        .call(yep)\n        .insert('rect', 'text')\n        .attr(\"x\", function(d){return d.bbox.x})\n        .attr(\"y\", function(d){return d.bbox.y})\n        .attr(\"width\", function(d){return d.bbox.width})\n        .attr(\"height\", function(d){return d.bbox.height}) \n        .attr('fill', 'black')             \n    // }\n}\n\n// From https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\nfunction getTextBox(selection) {\n  selection.each(function(d){d.bbox = this.getBBox();})\n}\n\nfunction yep(selection) {\n  // console.log(selection.nodes().map((d)=>d.bbox));\n}\n\n\nconst connection = d3shape.linkHorizontal().x(d => d.y).y(d => d.x)\n\nfunction getChildren(node: AST.Node): AST.Node[] {\n  var children: AST.Node[] = [];\n  switch (node.nodeType) {\n    case 'Program':\n      children = node.children;\n      break;\n    case 'Function':\n      children = node.args;\n      break;\n    case 'Choose':\n      children = [node.case.predicate, node.case.consequent, node.otherwise];\n      break;\n    case 'BinaryOperation':\n      children = [node.left, node.right];\n      break;\n    case 'VariableAssignment':\n      children = [node.assignment];\n      break;\n    default:\n      children = [];\n    }\n\n  return children;\n}\n\nfunction getText(node) {\n  var text = \"\";\n  switch (node.nodeType) {\n    case 'Program':\n      text = '';\n      break;\n    case 'Function':\n      text = node.name;\n      break;\n    case 'Choose':\n      text = \"choose\";\n      break;\n    case 'BinaryOperation':\n      text = node.operator;\n      break;\n    case 'VariableAssignment':\n      text = node.name;\n      break;\n    case 'Identifier':\n      text = node.name;\n      break;\n    case 'Number':  \n      text = node.value.toString();\n      break;\n    case 'Boolean':\n      text = node.value.toString();\n      break;\n    default:\n      text = \"\";\n  }\n\n  return text;\n}\n\nfunction getFill(node): string {\n  if (isUndefined(node)) {\n    return '#fc6666'\n  }\n  if (node.children) {\n    return '#555'\n  } else {\n    return '#999'\n  }\n}\n\nfunction isUndefined(d) {\n  return d.data.outputType?.status === 'Maybe-Undefined'\n}","import {Transaction} from \"@codemirror/state\"\nimport {json, jsonParseLinter} from \"@codemirror/lang-json\"\nimport {foldAll} from \"@codemirror/fold\"\nimport { visualize } from \"./visualization\"\nimport {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {linter} from \"@codemirror/lint\"\nimport { parseResults } from \"./parseResults\"\n\n/**\n * Given a transaction, update the developer tools\n */\n export function updateDevTools(tr: Transaction) {\n  const results = tr.state.field(parseResults)\n\n  // Display JSON for AST\n  const astJSON = JSON.stringify(results.nodes, null, 2)\n  replaceContents(astViewer, astJSON);\n\n  // Display JSON for depends map\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\n  replaceContents(dependsViewer, dependsJSON);\n\n  // Draw the AST\n  visualize(results.nodes);\n}\n\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\nfunction newJSONViewerState(): EditorState {\n  return EditorState.create({\n    extensions: [\n      basicSetup,\n      json(),\n      linter(jsonParseLinter()),\n      EditorView.editable.of(false),\n    ],\n  })\n}\n\n// JSON viewer for AST\nlet astViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\"),\n});\n\n// JSON viewer for depends map\nlet dependsViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#depends-json\"),\n});\n\n/**\n * Replace the entire contents of an editor\n */\nfunction replaceContents(editor: EditorView, contents: string) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  foldAll(editor);  // By default, fold all levels\n}\n","import {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {Transaction} from \"@codemirror/state\"\nimport {linter} from \"@codemirror/lint\"\nimport {miniCL, miniCLLinter} from \"./miniCL\"\nimport {StreamLanguage} from \"@codemirror/stream-parser\"\nimport {parseResults} from \"./parseResults\"\nimport {updateDevTools} from \"./devTools\"\nimport \"./styles.css\"\nimport \"./desmos_icons.css\"\n\n// Create the CodeMirror miniCL editor and add it to the document.\nlet miniCLEditor = new EditorView({\n  state: EditorState.create({\n    extensions: [\n      basicSetup,                     // https://codemirror.net/6/docs/ref/#basic-setup\n      StreamLanguage.define(miniCL),  // syntax coloring for miniCL\n      parseResults,                   // field that holds the results of parsing\n      linter(miniCLLinter())          // error-checking for miniCL\n    ],\n  }),\n  dispatch: updateOutput,\n  parent: document.querySelector(\"#miniCL-editor\")\n})\n\n// When the content changes, update the editor and the dev tools\nfunction updateOutput(tr: Transaction) {\n  miniCLEditor.update([tr]);\n  updateDevTools(tr);\n}\n"]}