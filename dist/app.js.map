{"version":3,"sources":["src/lexer.ts","src/typechecker.ts","src/findBase.ts","src/mudChecker.ts","src/position.ts","src/tokenstream.ts","src/parselet.ts","src/parser.ts","src/parseResults.ts","src/miniCL.ts","src/visualization.ts","src/devTools.ts","src/index.ts"],"names":["text","tokens","state","line","stack","split","stream","stream_parser_1","string","eol","token","getToken","emitToken","makeEmit","fullToken","undefined","push","start","pos","Error","length","getDefaultToken","type","first_column","last_column","current","eatSpace","match","next","nodes","registeredNodes","aNodes","totalErrors","forEach","node","errors","aNode","typecheckNode","concat","aTree","checkerMap","nodeType","check","constructor","message","position","newNode","value","outputType","status","valueType","asserts","constType","nodeId","lErrors","lANode","left","rErrors","rANode","right","TypeError","operator","aArgs","arg1Errors","arg1Node","args","arg2Errors","arg2Node","functionName","name","argType","exports","inputType","resultType","predicate","case","consequent","otherwise","predErrors","predNode","consErrors","consNode","otherErrors","otherNode","assignmentErrors","assignmentNode","assignment","valueNode","assignmentId","CheckNumber","CheckBoolean","CheckBinary","CheckFunction","CheckChoose","CheckVariable","CheckIdentifier","dependsMap","baseMap","findBase","baseList","leftList","findBases","rightList","typechecker_1","i","consBases","otherBases","BaseNumber","BaseBoolean","BaseBinary","BaseFunction","BaseChoose","BaseVariableAssignment","BaseIdentifier","map","n","mudCheckNode","mudCheckerMap","mudCheck","intersection","leftAsserts","rightAsserts","find","e","allAsserts","bases","findBase_1","result","evaluate","consDef","otherDef","handleCheck","MudCheckNumber","MudCheckBoolean","MudCheckBinary","MudCheckFunction","MudCheckChoose","MudCheckVariable","MudCheckIdentifier","contained","consAsserts","consConsContained","consOtherContained","first_line","last_line","end","toString","lexer_1","filter","t","consume","peek","last","expectToken","expectedType","actual","position_1","parse","_parser","_tokens","varMap","id","parseFloat","parser","_token","exp","tokenType","associativity","ConsequentParselet","bindingPower","arg1","arg2","varParselet","VariableAssignmentParselet","tokenstream_1","Parser","bindingPowers","bindingClasses","Object","keys","consequentMap","currentBindingPower","initialParselet","initialMap","consequentParselet","AbstractParser","NUMBER","NumberParselet","TRUE","BooleanParselet","FALSE","ParenParselet","FUNCTION","FunctionParselet","CHOOSE1","ChooseParselet","IDENTIFIER","IdentifierParselet","BinaryOperatorParselet","classes","state_1","define","create","emptyParseResults","update","tr","docChanged","parseProgram","contents","doc","ast","parser_1","parseErrors","startState","token2tag","view","results","field","parseResults_1","typeErrors","analyzedNodes","mudErrors","mudChecker_1","parseDiagnostics","makeDiagnostic","typeDiagnostics","mudDiagnostics","severity","error","from","firstLine","to","lastLine","margin","top","bottom","height","width","select","selectAll","remove","viz","append","attr","root","children","treemap","tree","size","separation","treelayout","hierarchy","getChildren","g","link","data","links","linkEnter","enter","connection","descendants","nodeEnter","d","y","x","getFill","isUndefined","style","call","getTextBox","datum","getText","clone","lower","yep","insert","bbox","selection","each","getBBox","linkHorizontal","astJSON","JSON","stringify","replaceContents","astViewer","dependsJSON","dependsViewer","visualization_1","basic_setup_1","extensions","lang_json_1","lint_1","editable","of","newJSONViewerState","parent","document","querySelector","editor","changes","fold_1","miniCLEditor","miniCL_1","dispatch","updateOutput","devTools_1"],"mappings":"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","file":"","sourcesContent":["import {StringStream} from \"@codemirror/stream-parser\"\n\nexport function getTokens(text: string): Token[] {\n  const tokens: Token[] = [];\n  const state: State = {line: 1, stack: ['default']};\n\n  for (const line of text.split('\\n')) {\n    const stream = new StringStream();\n    stream.string = line;\n    while (!stream.eol()) {\n      const token = getToken(stream, state);\n      const emitToken = makeEmit(stream, state);\n      const fullToken = emitToken(token as TokenType);\n      if (token != undefined) {\n        tokens.push(fullToken);\n      }\n\n      if (stream.start == stream.pos) {\n        throw new Error(\n          `getToken failed to advance stream at position ${\n            stream.pos\n          } in string ${stream.string}`,\n        );\n      }\n      stream.start = stream.pos;\n    }\n\n    state.line += 1;\n  }\n\n  return tokens;\n}\n\nexport function getToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  //Built for codeMirror streams API\n  //State is a stack of states\n  switch (state.stack[state.stack.length - 1]) {\n    default:\n      return getDefaultToken(stream, state);\n  }\n}\n\nfunction makeEmit(stream: StringStream, state: State) {\n  return function emitToken(type: TokenType): Token {\n    return {\n      type,\n      first_column: stream.start,\n      last_column: stream.pos,\n      line: state.line,\n      text: stream.current(),\n    };\n  };\n}\n\nexport function getDefaultToken(\n  stream: StringStream,\n  state: State,\n): string | undefined {\n  // const emitToken = makeEmit(stream, state);\n  if (stream.eatSpace()) {\n    // skip whitespace\n    return undefined;\n  }\n  \n  // parse both negative and positive numbers\n  if (stream.match(/-?[0-9]+(\\.[0-9]+)?/)) {\n    return 'NUMBER';\n  }\n\n  if (stream.match(/\\+/)) {\n    return '+';\n  }\n\n  // NOTE: when subtracting a positive number, make sure to use parentheses around it\n  // e.g. 1-(2) will work but 1-2 won't\n  if (stream.match(/\\-/)) {\n    return '-';\n  }\n\n  if (stream.match(/\\*/)) {\n    return '*';\n  }\n\n  if (stream.match(/\\//)) {\n    return '/';\n  }\n\n  if (stream.match(/\\|/)) {\n    return '|';\n  }\n\n  if (stream.match(/\\&/)) {\n    return '&';\n  }\n\n  if (stream.match(/\\(/)) {\n    return '(';\n  }\n\n  if (stream.match(/\\)/)) {\n    return ')';\n  }\n\n  if (stream.match(/\\=/)) {\n    return '=';\n  }\n\n  if (stream.match(/True/)) {\n    return 'TRUE';\n  }\n\n  if (stream.match(/False/)) {\n    return 'FALSE';\n  }\n\n  if (stream.match(/#/)) {\n    if (!stream.match(/\\n/)) {\n      // comment lasts till end of line\n      stream.match(/.*/); // if no eol encountered, comment lasts till end of file\n    }\n    return 'COMMENT';\n  }\n\n  // keyword WHEN begins a choose node\n  if (stream.match(/WHEN/)) {\n    return 'CHOOSE1';\n  }\n\n  // keyword OTHERWISE is used in a choose node\n  if (stream.match(/OTHERWISE/)) {\n    return 'CHOOSE2';\n  }\n\n  // functions start with a capital letter and do not contain numbers\n  if (stream.match(/[A-Z]([a-z|A-Z])*/)) {\n    return 'FUNCTION';\n  }\n\n  // The form of a valid identifier is: a lower-case alphabetic character,\n  // followed by zero or more alpha characters.\n  if (stream.match(/[a-z]([a-z|A-Z])*/)) {\n    return 'IDENTIFIER';\n  }\n  \n  stream.next();\n  return 'ERROR';\n}\n\nexport type BinaryOperationTokenType =\n  | '+'\n  | '-'\n  | '*'\n  | '/'\n  | '|' // this is an or\n  | '&' // this is an and\n\nexport type TokenType =\n  | BinaryOperationTokenType\n  | 'NUM'\n  | 'TRUE'\n  | 'FALSE'\n  | '('\n  | ')'\n  | 'COMMENT'\n  | 'ERROR'\n  | 'FUNCTION'\n  | 'IDENTIFIER'\n  | 'CHOOSE1'\n  | 'CHOOSE2'\n  | '='\n\nexport interface Token<T extends TokenType = TokenType> {\n  type: T;\n  text: string;\n  line: number;\n  first_column: number;\n  last_column: number;\n}\n\ntype Mode = 'default';\n\nexport interface State {\n  stack: Mode[];\n  line: number;\n}\n","import {Position} from './position';\nimport * as AST from './ast';\nimport * as AnalyzedTree from './analyzedTree';\n\nexport function typecheck(nodes: AST.Node[], registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n                          {errors: TypeError[], aTree: AnalyzedTree.AnalyzedNode[]} {\n  const aNodes: AnalyzedTree.AnalyzedNode[] = [];\n  let totalErrors: TypeError[] = [];\n\n  nodes.forEach(node => {\n    let {errors, aNode} = typecheckNode(node, registeredNodes);\n    aNodes.push(aNode);\n    totalErrors = totalErrors.concat(errors);\n  });\n\n  return {errors: totalErrors, aTree: aNodes};\n}\n\nfunction typecheckNode(node: AST.Node, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n                        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n  return checkerMap[node.nodeType].check(node, registeredNodes);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface TypeChecker {\n  check(node: AST.Node, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode};\n}\n\n// A number requires no type checking\nclass CheckNumber implements TypeChecker {\n  check(node: AST.NumberNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let newNode = {\n      nodeType: node.nodeType,\n      value: node.value,\n      outputType: {\n        status: 'Definitely' as 'Definitely',\n        valueType: node.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: [], aNode: newNode};\n  }\n}\n\n// A boolean requires no type checking\nclass CheckBoolean implements TypeChecker {\n  check(node: AST.BooleanNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let newNode = {\n      nodeType: node.nodeType,\n      value: node.value,\n      outputType: {\n        status: 'Definitely' as 'Definitely',\n        valueType: node.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: [], aNode: newNode};\n  }\n}\n\nclass CheckBinary implements TypeChecker {\n  check(node: AST.BinaryOperationNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    const { errors: lErrors, aNode: lANode } = typecheckNode(node.left, registeredNodes);\n    const { errors: rErrors, aNode: rANode } = typecheckNode(node.right, registeredNodes);\n    const totalErrors = lErrors.concat(rErrors);\n    \n    // Check if left and right are the same type (both numbers or both booleans)\n    if (lANode.outputType.valueType != rANode.outputType.valueType) {\n      totalErrors.push(new TypeError(\"incompatible types for binary operator\", node.pos));\n    }\n    // Check if incorrect combination of operator and operands\n    else if (rANode.outputType.valueType == 'boolean' && (node.operator != \"|\" && node.operator != '&')) {\n      totalErrors.push(new TypeError(\"incompatible operation for boolean operands\", node.pos));\n    }\n    else if (rANode.outputType.valueType == 'number' && (node.operator == \"|\" || node.operator == '&')) {\n      totalErrors.push(new TypeError(\"incompatible operation for number operands\", node.pos));\n    }\n\n\n    let newNode = {\n      nodeType: node.nodeType,\n      operator: node.operator,\n      left: lANode,\n      right: rANode,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        // Since we've already checked the left and right are the same type\n        // we can set the overall value type to the left\n        valueType: lANode.outputType.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: [], aNode: newNode};\n  }\n}\n\nclass CheckFunction implements TypeChecker {\n  check(node: AST.FunctionNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n    let aArgs: AnalyzedTree.AnalyzedNode[] = [];\n\n    // First typecheck the argument(s)\n    const { errors: arg1Errors, aNode: arg1Node } = typecheckNode(node.args[0], registeredNodes);\n    totalErrors = totalErrors.concat(arg1Errors);\n    aArgs.push(arg1Node);\n    if (node.args.length > 1) {\n      const { errors: arg2Errors, aNode: arg2Node } = typecheckNode(node.args[1], registeredNodes);\n      totalErrors = totalErrors.concat(arg2Errors);\n      aArgs.push(arg2Node);\n      // Both arguments must have the same type\n      if (aArgs[0].outputType.valueType != aArgs[1].outputType.valueType) {\n        totalErrors.push(new TypeError(\"arguments must have same type\", node.args[0].pos));\n      }\n    }\n\n    const functionName = node.name\n    const argType = builtins[functionName].inputType;\n\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: functionName,\n      args: aArgs,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        valueType: builtins[functionName].resultType, // Refer to the builtins dictionary below\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    // If this is a builtin function, check it has the correct argument types\n    // otherwise throw an error (we don't know what this function is)\n    if (argType) {\n      // Assume both arguments are the same type (see error produced above)\n      if (argType != 'any' && newNode.args[0].outputType.valueType != argType) {\n        totalErrors.push(new TypeError(\"incompatible argument type for \" + functionName, node.pos));\n      }\n      \n    } else {\n      totalErrors.push(new TypeError(\"unknown function\", node.pos));\n    }\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\nclass CheckChoose implements TypeChecker {\n  check(node: AST.ChooseNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n\n    // First typecheck the inner nodes\n    const { errors: predErrors, aNode: predNode } = typecheckNode(predicate, registeredNodes);\n    const { errors: consErrors, aNode: consNode } = typecheckNode(consequent, registeredNodes);\n    const { errors: otherErrors, aNode: otherNode } = typecheckNode(otherwise, registeredNodes);\n    totalErrors = totalErrors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n    // Check that the return types are the same for both consequent and otherwise\n    if (consNode.outputType.valueType != otherNode.outputType.valueType) {\n      totalErrors.push(new TypeError(\"Return types are not the same for both cases\", consequent.pos));\n      totalErrors.push(new TypeError(\"Return types are not the same for both cases\", otherwise.pos));\n    }\n\n    // Check that the predicate returns a boolean\n    if (predNode.outputType.valueType != 'boolean') {\n      totalErrors.push(new TypeError(\"Predicate must return a boolean\", predicate.pos));\n    }\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predNode, consequent: consNode },\n      otherwise: otherNode,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        // Since we've already checked the consequent and otherwise statements are the same type\n        // we can set the overall value type to the consequent\n        valueType: consNode.outputType.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\nclass CheckVariable implements TypeChecker {\n  check(node: AST.VariableAssignmentNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n\n    // First typecheck the assignment node\n    const { errors: assignmentErrors, aNode: assignmentNode } = typecheckNode(node.assignment, registeredNodes);\n    totalErrors = totalErrors.concat(assignmentErrors);\n\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: node.name,\n      assignment: assignmentNode,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        valueType: assignmentNode.outputType.valueType,\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\nclass CheckIdentifier implements TypeChecker {\n  check(node: AST.IdentifierNode, registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode}):\n        {errors: TypeError[], aNode: AnalyzedTree.AnalyzedNode} {\n    let totalErrors: TypeError[] = [];\n\n    // Grab the node the identifier was previously assigned to\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      totalErrors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    }\n\n    let newNode = {\n      nodeType: 'Identifier' as 'Identifier',\n      name: node.name,\n      assignmentId: node.assignmentId,\n      outputType: {\n        status: 'Maybe-Undefined' as 'Maybe-Undefined',\n        valueType: valueNode.outputType.valueType, // Shouldn't be problem anymore\n        asserts: [],\n        constType: 'Constant' as 'Constant'\n      },\n      pos: node.pos,\n      nodeId: node.nodeId\n    };\n\n    registeredNodes[newNode.nodeId] = newNode;\n\n    return {errors: totalErrors, aNode: newNode};\n  }\n}\n\n// Dictionary of builtin functions that gives the necessary information for a given function name \nexport const builtins : {[name: string]: {inputType: AST.ValueType, resultType: AST.ValueType, status: string, constType: string} } = {\n  \"IsDefined\": {inputType: 'any', resultType: 'boolean', status: \"Definitely\", constType: \"Constant\"},\n  \"Inverse\": {inputType: 'number', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"InputN\": {inputType: 'number', resultType: 'number', status: \"Maybe-Undefined\", constType: \"Non-Constant\"},\n  \"Sink\": {inputType: 'any', resultType: 'any', status: \"Variable\", constType: \"Constant\"},\n  \"ParseOrderedPair\": {inputType: 'number', resultType: 'pair', status: \"Variable\", constType: \"Constant\"},\n  \"X\": {inputType: 'pair', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"Y\": {inputType: 'pair', resultType: 'number', status: \"Variable\", constType: \"Constant\"},\n  \"Not\": {inputType: 'boolean', resultType: 'boolean', status: \"Definitely\", constType: \"Constant\"},\n  \"InputB\": {inputType: 'boolean', resultType: 'boolean', status: \"Maybe-Undefined\", constType: \"Non-Constant\"},\n  \"Sqrt\": {inputType: 'number', resultType: 'number', status: \"Variable\", constType: \"Constant\"}\n}\n\nconst checkerMap: Partial<{[K in AST.NodeType]: TypeChecker}> = {\n  'Number' : new CheckNumber(),\n  'Boolean' : new CheckBoolean(),\n  'BinaryOperation' : new CheckBinary(),\n  'Function' : new CheckFunction(),\n  'Choose': new CheckChoose(),\n  'VariableAssignment': new CheckVariable(),\n  'Identifier': new CheckIdentifier()\n}","import * as AST from './ast';\nimport {builtins} from './typechecker';\nimport * as AnalyzedTree from './analyzedTree';\n\n/*\n    The findBases function, given an AST node and the current dependsMap, determines\n    the \"bases\" of that node and returns them in a list of nodeIds.\n\n    Bases are nodes that introduce the possibility of being undefined.\n    For example, the InputN() function represents student input, and therefore\n    introduces the possibility to be undefined.\n*/\n\nexport function findBases(node: AnalyzedTree.AnalyzedNode, dependsMap: {[key: string]: string[]}): string[] {\n    return baseMap[node.nodeType].findBase(node, dependsMap); \n}\n\nexport interface BaseFinder {\n  findBase(node: AnalyzedTree.AnalyzedNode, dependsMap: {[key: string]: string[]}): string[];\n}\n\n// Numbers are constant, and therefore cannot have bases\nclass BaseNumber implements BaseFinder {\n  findBase(node: AnalyzedTree.NumberNode): string[] {\n    return []\n  }\n}\n\n// Booleans are constant, and therefore cannot have bases\nclass BaseBoolean implements BaseFinder {\n    findBase(node: AnalyzedTree.BooleanNode): string[] {\n        return []\n    }\n}\n\n// Binary operations could have bases on either side of their operator\nclass BaseBinary implements BaseFinder {\n    findBase(node: AnalyzedTree.BinaryOperationNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n        // recursively call findBases on left and right\n        let leftList = findBases(node.left, dependsMap);\n        baseList = baseList.concat(leftList);\n        let rightList = findBases(node.right, dependsMap)\n        // combine bases from left and right\n        baseList = baseList.concat(rightList);\n        return baseList;\n    }\n}\n\n// In this proof of concept, functions are the only bases\n// They can produce an undefined value (e.g. Inverse(0)) or are inherently non-constant (e.g. InputN)\n// Otherwise, the base of the function is determined by its argument(s)\n// This means that the base is the id of the function node itself\nclass BaseFunction implements BaseFinder {\n    findBase(node: AnalyzedTree.FunctionNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n\n        if (node.outputType.status == 'Def-Undefined') {\n            // e.g. with Inverse(0)\n            baseList.push(node.nodeId);\n        } else if (builtins[node.name].status == 'Variable') {\n            // recursively call findBases on argument(s)\n            for (let i = 0; i < node.args.length; i++) {\n                baseList = baseList.concat(findBases(node.args[i], dependsMap));\n            }\n        } else if (builtins[node.name].constType == 'Non-Constant') {\n            // e.g. with InputN(2)\n            baseList.push(node.nodeId);\n        }\n\n        return baseList;\n    }\n}\n\n// The bases of choose nodes are determined by the bases of their consequent and their otherwise\nclass BaseChoose implements BaseFinder {\n    findBase(node: AnalyzedTree.ChooseNode, dependsMap: {[key: string]: string[]}): string[] {\n        let baseList: string[] = [];\n \n        let consBases = findBases(node.case.consequent, dependsMap);\n        baseList = baseList.concat(consBases);\n\n        let otherBases = findBases(node.otherwise, dependsMap);\n        baseList = baseList.concat(otherBases);\n\n        return baseList;\n    }\n}\n\n// Variable assignments are constant, and therefore cannot have bases\nclass BaseVariableAssignment implements BaseFinder {\n    findBase(node: AnalyzedTree.VariableAssignmentNode): string[] {\n        return []\n    }\n}\n\n// The bases of an identifier are stored in the dependsMap, which has a reference\n// to its assignment.\nclass BaseIdentifier implements BaseFinder {\n    findBase(node: AnalyzedTree.IdentifierNode, dependsMap: {[key: string]: string[]}): string[] {\n        // follow the chain in the dependsMap\n        return dependsMap[node.assignmentId];\n    }\n}\n\nconst baseMap: Partial<{[K in AST.NodeType]: BaseFinder}> = {\n  'Number' : new BaseNumber(),\n  'Boolean' : new BaseBoolean(),\n  'BinaryOperation' : new BaseBinary(),\n  'Function' : new BaseFunction(),\n  'Choose': new BaseChoose(),\n  'VariableAssignment': new BaseVariableAssignment(),\n  'Identifier': new BaseIdentifier()\n}","import {Position} from './position';\nimport * as AST from './ast';\nimport {findBases} from './findBase';\nimport {builtins} from './typechecker';\nimport * as AnalyzedTree from './analyzedTree';\n\n/*\n  The function mudCheck manipulates the status of each node's outputType.\n  It produces type errors based on that status.\n  For example, it will produce a warning when the author tries to use \n  a maybe-undefined node in a Sink function, which is user-facing.\n  It also produces a warning when the author tries to compute a \n  definitely undefined operation (e.g. Inverse(0)).\n*/\n\nexport function mudCheck(nodes: AnalyzedTree.AnalyzedNode[], \n                        registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n                        dependsMap: {[key: string]: string[]}): TypeError[] {\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));\n  return ([] as TypeError[]).concat(...errors);\n}\n\nfunction mudCheckNode(node: AnalyzedTree.AnalyzedNode, \n                    nodes: AnalyzedTree.AnalyzedNode[], \n                    registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n                    dependsMap: {[key: string]: string[]}): TypeError[] {\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);\n}\n\nexport class TypeError {\n  constructor(public message: string, public position: Position) {}\n}\n\nexport interface MudChecker {\n  mudCheck(node: AnalyzedTree.AnalyzedNode, \n          nodes: AnalyzedTree.AnalyzedNode[], \n          registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n          dependsMap: {[key: string]: string[]}): TypeError[];\n}\n\n// Numbers are always defined.\nclass MudCheckNumber implements MudChecker {\n  mudCheck(node: AnalyzedTree.NumberNode): TypeError[] {\n    return [];\n  }\n}\n\n// Booleans are always defined.\nclass MudCheckBoolean implements MudChecker {\n    mudCheck(node: AnalyzedTree.BooleanNode): TypeError[] {\n    return [];\n  }\n}\n\n// Binary operations must take into account their operands' statuses when determining their own.\nclass MudCheckBinary implements MudChecker {\n    mudCheck(node: AnalyzedTree.BinaryOperationNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        \n        // recursively mud-check the left and right operands\n        const errors: TypeError[] = mudCheckNode(node.left, nodes, registeredNodes, dependsMap)\n        .concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));\n\n        // Update the output type of the node, based on the outputType of its operands\n        if (node.right.outputType.status == 'Def-Undefined' || node.left.outputType.status == 'Def-Undefined') {\n            node.outputType.status = 'Def-Undefined';\n        }\n        else if (node.right.outputType.status == 'Maybe-Undefined' || node.left.outputType.status == 'Maybe-Undefined') {\n            node.outputType.status = 'Maybe-Undefined';\n        } else {\n            node.outputType.status = 'Definitely'\n        }\n\n        // Each ORed binary operation will assert the intersection of its operands' assertions\n        if (node.operator == '|') {\n          let intersection = [];\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          for (let i = 0; i < leftAsserts.length; i++) {\n            if (rightAsserts.find(e => e == leftAsserts[i])) {\n              intersection.push(leftAsserts[i]);\n            }\n          }\n          node.outputType.asserts = intersection;\n        }\n        // Each ANDed binary operation will assert the union of its operands' assertions\n        else {\n          let leftAsserts = node.left.outputType.asserts;\n          let rightAsserts = node.right.outputType.asserts;\n          let allAsserts = leftAsserts.concat(rightAsserts);\n\n          node.outputType.asserts = allAsserts;\n        }\n\n        return errors;\n    }\n}\n\n// The status of a function is determined by its argument and/or its status as defined\n// in the builtins dictionary.\nclass MudCheckFunction implements MudChecker {\n    mudCheck(node: AnalyzedTree.FunctionNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        // First mud-check the argument(s)\n        const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);\n        errors = errors.concat(arg1Errors);\n        if (node.args.length > 1) {\n          const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);\n          errors = errors.concat(arg2Errors);\n        }\n\n        // IsDefined is the only function that asserts anything\n        // It asserts its argument\n        if (node.name == 'IsDefined') {\n          let bases = findBases(node.args[0], dependsMap);\n          node.outputType.asserts = node.outputType.asserts.concat(bases);\n        }\n\n        const functionName = node.name\n        \n        // If sink \"node\" takes in possibly undefined values, warn the author\n        if (functionName == 'Sink') {\n          // a sink has one argument\n          if (node.args[0].outputType.status != 'Definitely') {\n              errors.push(new TypeError(\"User facing content could be undefined.\", node.args[0].pos));\n          }\n        }\n\n        // The contstant-ness of a function is whatever is defined in builtins\n        node.outputType.constType = builtins[node.name].constType;\n        \n        // If the function is variable, then its status depends on its argument's status\n        if (builtins[functionName].status == \"Variable\") {\n\n          // If the argument is constant, we can use it to evaluate the oepration\n          if (node.args[0].outputType.constType == 'Constant') {\n\n            const result = evaluate(node);\n\n            // If the result is undefined, warn the author\n            if (result) {\n              node.outputType.status = \"Definitely\";\n            } else {\n              node.outputType.status = \"Def-Undefined\";\n              errors.push(new TypeError(\"The result of this operation is undefined.\", node.pos));\n            }\n          } else {\n            node.outputType.status = node.args[0]?.outputType?.status;\n          }\n\n        }\n        else {\n          node.outputType.status = builtins[functionName].status;\n        }\n\n        return errors;\n    }\n}\n\n// The status of a choose node is determined by the status of the consequent\n// given what the predicate asserts and the status of the otherwise statement\nclass MudCheckChoose implements MudChecker {\n    mudCheck(node: AnalyzedTree.ChooseNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n        let errors: TypeError[] = [];\n\n        const predicate = node.case.predicate;\n        const consequent = node.case.consequent;\n        const otherwise = node.otherwise;\n\n        // First typecheck the inner nodes\n        const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);\n        const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);\n        const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);\n        errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n\n        // DEFAULT status is maybe-undefined, hence default false values\n        let consDef = false;\n        let otherDef = false;\n\n        if (otherwise.outputType.status == 'Definitely') {\n          otherDef = true;\n        }\n\n        // Check the definitive status of the consequent using the predicates asserts\n        // NOTE: only binary operations and IsDefined functions have non-empty assert fields\n        consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n\n        if (consequent?.outputType.status == 'Definitely') {\n          consDef = true;\n        }\n\n        if (consDef && otherDef) {\n          node.outputType.status = 'Definitely';\n        }\n\n        return errors;\n    }\n}\n\n// The status of a variable assignment is determined by the status of its assignment\nclass MudCheckVariable implements MudChecker {\n    mudCheck(node: AnalyzedTree.VariableAssignmentNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // First mud-check the assignment node\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);\n    errors = errors.concat(assignmentErrors);\n\n    // Set variable assignment node output type to the same as its assignment\n    node.outputType.status = node.assignment.outputType.status;\n\n    // Update the dependsMap to hold the bases of this new variable\n    dependsMap[node.nodeId] = findBases(node.assignment, dependsMap);\n\n    return errors;\n  }\n}\n\n// The status of an identifier is determined by the status of its assignment,\n// given in registered nodes\nclass MudCheckIdentifier implements MudChecker {\n    mudCheck(node: AnalyzedTree.IdentifierNode, \n            nodes: AnalyzedTree.AnalyzedNode[], \n            registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode},\n            dependsMap: {[key: string]: string[]}): TypeError[] {\n    let errors: TypeError[] = [];\n\n    // Grab the node the identifier was previously assigned to\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n\n    // If this assignmentId is not found in the AST, throw an error\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    } else {\n      // If we found the assignment node, set the output type of the identifier\n      node.outputType.status = valueNode.outputType.status;\n    }\n\n    return errors;\n  }\n}\n\n\nconst mudCheckerMap: Partial<{[K in AST.NodeType]: MudChecker}> = {\n  'Number' : new MudCheckNumber(),\n  'Boolean' : new MudCheckBoolean(),\n  'BinaryOperation' : new MudCheckBinary(),\n  'Function' : new MudCheckFunction(),\n  'Choose': new MudCheckChoose(),\n  'VariableAssignment': new MudCheckVariable(),\n  'Identifier': new MudCheckIdentifier()\n}\n\n// Given the consequent to a choose node, return true if the given list of asserts\n// includes all of the bases of that consequent\nfunction handleCheck(consequent: AnalyzedTree.AnalyzedNode,\n                    dependsMap: {[key: string]: string[]},\n                    asserts: string[]): boolean {\n  let contained = true;\n\n  // If the given consequent is a choose node, recursively check the its consequent and otherwise statements\n  if (consequent?.nodeType == 'Choose') {\n    // We need to check each statement's bases separately in order to exclude\n    // the next predicate's asserts in the next otherwise\n    // while including the current asserts in both\n    let consAsserts = consequent.case.predicate.outputType.asserts;\n    let consConsContained = handleCheck(consequent.case.consequent, dependsMap, asserts.concat(consAsserts));\n    let consOtherContained = handleCheck(consequent.otherwise, dependsMap, asserts);\n\n    // If either the next consequent or otherwise statements aren't covered by their asserts,\n    // the current consequent is also not covered\n    if (!(consConsContained && consOtherContained)) {\n      contained = false;\n    }\n\n  } else {\n    let consBases = findBases(consequent, dependsMap);\n\n    // Ensure that every base is in the given asserts list\n    for (let i = 0; i < consBases.length; i++) {\n      if (!asserts.find(e => e == consBases[i])) {\n        contained = false;\n      }\n    }\n  }\n\n  return contained;\n}\n\n// This funciton simulates running the body of a miniCL function (like Inverse(x))\nfunction evaluate(node: AnalyzedTree.FunctionNode): boolean {\n  // 0 is the only input to Inverse that makes it undefined\n  if (node.name == \"Inverse\") {\n    if (node.args[0].value == 0) {\n      return false;\n    }\n  }\n  // A negative number is the only input to Sqrt that makes it undefined\n  if (node.name == \"Sqrt\") {\n    if (node.args[0].value < 0) {\n      return false;\n    }\n  }\n  // No other functions can have inputs that make them definitely undefined\n  return true;\n}\n","import { Token } from './lexer';\n\nexport type Position = {\n  first_line: number;\n  first_column: number;\n  last_line: number;\n  last_column: number;\n};\n\nexport function token2pos(token: Token): Position {\n  return {\n    first_line: token.line,\n    last_line: token.line,\n    first_column: token.first_column,\n    last_column: token.last_column\n  }\n}\n\nexport function join(start: Position, end: Position) {\n  return {\n    first_line: start.first_line,\n    last_line: end.last_line,\n    first_column: start.first_column,\n    last_column: end.last_column\n  };\n}\n\n// Returns a string that uniquely identifies a node's position\nexport function pos2string(pos: Position): string {\n  return pos.first_line.toString() + \".\" +\n         pos.first_column.toString() + \".\" +\n         pos.last_line.toString() + \".\" +\n         pos.last_column.toString();\n}\n\n// note, extending Error in the browser is problematic\n// https://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\nexport class ParseError {\n  constructor(public message: string, public position: Position) {}\n}\n","import {Token, TokenType, getTokens} from './lexer';\nimport {ParseError, token2pos} from './position';\n\nexport class TokenStream {\n  tokens: Token[];\n  pos: number = 0;\n\n  constructor(text: string) {\n    this.tokens = getTokens(text).filter(t => t.type != 'COMMENT');\n  }\n\n  consume(): Token | undefined {\n    const token = this.tokens[this.pos];\n    if (token) {\n      this.pos += 1;\n    }\n    return token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens[this.pos];\n  }\n\n  last(): Token {\n    return this.tokens[this.pos - 1];\n  }\n\n  expectToken<T extends TokenType>(expectedType: T): Token<T> {\n    const actual = this.consume();\n\n    if (!actual) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token but found none.`,\n        token2pos(this.last()),\n      );\n    }\n\n    if (actual.type != expectedType) {\n      throw new ParseError(\n        `Expected \"${expectedType}\" token type but found \"${actual.type}\".`,\n        token2pos(actual),\n      );\n    }\n\n    return actual as Token<T>;\n  }\n}\n","import { TokenStream } from './tokenstream';\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\nimport * as AST from './ast';\nimport { AbstractParser } from './parser';\nimport {token2pos, join, pos2string} from './position';\n\n// All parselets add their nodeType to the AST\nexport interface InitialParselet {\n  parse(parser: AbstractParser,\n        tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string}): AST.Node;\n}\n\n\nexport class NumberParselet implements InitialParselet {\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream,\n        token: Token,\n        varMap: {[key: string]: string}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    let newNode = {\n      nodeType: 'Number' as 'Number',\n      value: parseFloat(token.text),\n      valueType: 'number' as 'number',\n      pos: position,\n      nodeId: id\n    };\n    \n    return newNode;\n  }\n}\n\nexport class BooleanParselet implements InitialParselet {\n  constructor(private value: boolean) {}\n  parse(_parser: AbstractParser,\n        _tokens: TokenStream, token: Token,\n        varMap: {[key: string]: string}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    let newNode = {\n      nodeType: 'Boolean' as 'Boolean',\n      value: this.value,\n      valueType: 'boolean' as 'boolean',\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class ParenParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    _token: Token,\n    varMap: {[key: string]: string}) {\n\n    const exp = parser.parse(tokens, 0, varMap);\n    tokens.expectToken(')');\n\n    return exp;\n  }\n}\n\nexport abstract class ConsequentParselet {\n  constructor(\n    readonly tokenType: TokenType,\n    readonly associativity: 'left' | 'right'\n  ) {}\n  abstract parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string}): AST.Node;\n}\n\nexport class BinaryOperatorParselet extends ConsequentParselet {\n  constructor(\n    public tokenType: BinaryOperationTokenType,\n    associativity: 'left' | 'right'\n  ) {\n    super(tokenType, associativity);\n  }\n\n  parse(\n    parser: AbstractParser,\n    tokens: TokenStream,\n    left: AST.Node,\n    token: Token,\n    varMap: {[key: string]: string}): AST.Node {\n    const bindingPower = parser.bindingPower(token);\n\n    const right = parser.parse(\n      tokens,\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\n      varMap\n    );\n    const position = join(left.pos, token2pos(tokens.last()));\n    const id = pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class FunctionParselet implements InitialParselet {\n  \n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // All functions have at least one argument inside parens\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap);  // allow for one argument\n    let args = [arg1];\n    // ParseOrderedPair is the only function that takes two arguments\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap);  // allow for second argument\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n\n    let newNode = {\n      nodeType: 'Function' as 'Function',\n      name: token.text,\n      args: args,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class ChooseParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // Choose nodes include two nodes followed by the keyword \"OTHERWISE\" (CHOOSE2)\n    // which is followed by another node\n    const predicate = parser.parse(tokens, 0, varMap);\n    const consequent = parser.parse(tokens, 0, varMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap);\n\n    let newNode = {\n      nodeType: 'Choose' as 'Choose',\n      case: { predicate: predicate, consequent: consequent },\n      otherwise: otherwise,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class VariableAssignmentParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n\n    const position = token2pos(token);\n    const id = pos2string(position);\n    \n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap);\n\n    // Save the variable and its assignment in the variable map\n    varMap[token.text] = id;\n\n    let newNode = {\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      pos: position,\n      nodeId: id\n    };\n\n    return newNode;\n  }\n}\n\nexport class IdentifierParselet implements InitialParselet {\n  parse(parser: AbstractParser,\n    tokens: TokenStream,\n    token: Token,\n    varMap: {[key: string]: string}) {\n    \n    const position = token2pos(token);\n    const id = pos2string(position);\n\n    // Look up the node this identifier was assigned to\n    const assignmentId = varMap[token.text];\n\n    // An identifier must be previously assigned,\n    // otherwise we call the variable assignment parselet\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap);\n    }\n    else {\n      let newNode = {\n        nodeType: 'Identifier' as 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        pos: position,\n        nodeId: id\n      };\n      \n      return newNode;\n    }\n  }\n}\n","import * as Parselet from './parselet';\nimport {Token, TokenType} from './lexer';\nimport {TokenStream} from './tokenstream';\nimport {ParseError, token2pos} from './position';\nimport * as AST from './ast';\n\nexport function parse(text: string,\n                      varMap: {[key: string]: string}): \n                      {nodes: AST.Node[]; errors: ParseError[]} {\n  const nodes: AST.Node[] = [];\n\n  const tokens = new TokenStream(text);\n  const parser = new Parser();\n  while (tokens.peek()) {\n    try {\n      nodes.push(parser.parse(tokens, 0, varMap));\n    } catch (e) {\n      return {\n        nodes,\n        errors: [e],\n      };\n    }\n  }\n\n  return {nodes, errors: []};\n}\n\nexport abstract class AbstractParser {\n  public bindingPowers: {[tokenType in TokenType]: number};\n\n  protected abstract initialMap(): Partial<\n    {[K in TokenType]: Parselet.InitialParselet}\n  >;\n  protected abstract consequentMap(): Partial<\n    {[K in TokenType]: Parselet.ConsequentParselet}\n  >;\n  protected abstract bindingClasses(): TokenType[][];\n\n  constructor() {\n    this.bindingPowers = {} as any;\n\n    const bindingClasses = this.bindingClasses();\n    for (let i = 0; i < bindingClasses.length; i++) {\n      for (const tokenType of bindingClasses[i]) {\n        this.bindingPowers[tokenType] = 10 * i + 9;\n      }\n    }\n\n    for (const tokenType of Object.keys(this.consequentMap) as TokenType[]) {\n      if (this.bindingPowers[tokenType] == undefined) {\n        throw new Error(\n          `Token ${tokenType} defined in consequentMap has no associated binding power.\n          Make sure it is also listed in bindingClasses.`,\n        );\n      }\n    }\n  }\n\n  bindingPower(token: Token): number {\n    if (this.bindingPowers[token.type] != undefined) {\n      return this.bindingPowers[token.type];\n    } else {\n      throw new ParseError(\n        `Unexpected token type ${token.type}.`,\n        token2pos(token),\n      );\n    }\n  }\n\n  parse(tokens: TokenStream,\n        currentBindingPower: number,\n        varMap: {[key: string]: string}): AST.Node {\n    const token = tokens.consume();\n    if (!token) {\n      throw new ParseError(\n        `Unexpected end of tokens.`,\n        token2pos(tokens.last()),\n      );\n    }\n\n    const initialParselet = this.initialMap()[token.type];\n\n    if (!initialParselet) {\n      throw new ParseError(\n        `Unexpected token type ${token.type}`,\n        token2pos(token),\n      );\n    }\n\n    let left = initialParselet.parse(this, tokens, token, varMap);\n\n    while (true) {\n      const next = tokens.peek();\n      if (!next) {\n        break;\n      }\n\n      const consequentParselet = this.consequentMap()[next.type];\n\n      if (!consequentParselet) {\n        break;\n      }\n\n      if (currentBindingPower >= this.bindingPower(next)) {\n        break;\n      }\n\n      tokens.consume();\n      left = consequentParselet.parse(this, tokens, left, next, varMap);\n    }\n\n    return left;\n  }\n}\n\nexport class Parser extends AbstractParser {\n  initialMap() {\n    return {\n      NUMBER: new Parselet.NumberParselet(),\n      TRUE: new Parselet.BooleanParselet(true),\n      FALSE: new Parselet.BooleanParselet(false),\n      '(': new Parselet.ParenParselet(),\n      FUNCTION: new Parselet.FunctionParselet(),\n      CHOOSE1: new Parselet.ChooseParselet(),\n      IDENTIFIER: new Parselet.IdentifierParselet()\n    };\n  }\n\n  consequentMap() {\n    return {\n      '+': new Parselet.BinaryOperatorParselet('+', 'left'),\n      '-': new Parselet.BinaryOperatorParselet('-', 'left'),\n      '*': new Parselet.BinaryOperatorParselet('*', 'left'),\n      '/': new Parselet.BinaryOperatorParselet('/', 'left'),\n      '|': new Parselet.BinaryOperatorParselet('|', 'right'),\n      '&': new Parselet.BinaryOperatorParselet('&', 'right')\n    };\n  }\n\n  bindingClasses() {\n    const classes: TokenType[][] = [['+', '-'], ['*', '/'], ['|', '&']];\n    return classes;\n  }\n}\n","import {StateField} from \"@codemirror/state\"\nimport {Transaction} from \"@codemirror/state\"\nimport * as AST from './ast';\nimport {parse} from './parser';\nimport {ParseError} from './position';\n\n/**\n * A State field that holds the results of parsing\n */\nexport const parseResults: StateField<ParseResults> = StateField.define({\n  create() { return emptyParseResults },\n  update(value, tr) { return tr.docChanged ? parseProgram(tr) : value }\n})\n\n/**\n * Parse the program created from a transaction, returning a ParseResults object\n */\nfunction parseProgram(tr: Transaction) : ParseResults {\n  const contents = tr.state.doc.toString()\n\n  let varMap: {[key: string]: string} = {}\n  const ast = parse(contents, varMap)\n\n  return {\n    nodes: ast.nodes,\n    parseErrors: ast.errors,\n    varMap: varMap\n  }\n}\n\n/**\n * Type that describes the results of parsing\n */\nexport type ParseResults = {\n  nodes: AST.Node[];\n  parseErrors: ParseError[];\n  varMap: {[key: string]: string};\n}\n\n/**\n * Can be used as the initial results of parsing\n */\nconst emptyParseResults: ParseResults = {\n  nodes: [],\n  parseErrors: [],\n  varMap: {}\n}\n","import {StreamParser, StringStream} from \"@codemirror/stream-parser\"\nimport {Diagnostic} from \"@codemirror/lint\"\nimport {EditorView} from \"@codemirror/view\"\nimport {State, getDefaultToken} from './lexer'\nimport {ParseError} from './position'\nimport {typecheck} from './typechecker';\nimport {mudCheck} from './mudChecker';\nimport {parseResults} from './parseResults';\nimport * as AnalyzedTree from './analyzedTree';\n\n/**\n * The extension for our language\n */\nexport const miniCL: StreamParser<State> = {\n  startState: function (): State {\n    return {line: 1, stack: ['default']};\n  },\n  token: function (stream: StringStream, state: State): string | undefined {\n    if (stream.eatSpace()) return null;\n    return token2tag(getDefaultToken(stream, state));\n  }\n};\n\n/**\n * The linter for our language\n */\n export const miniCLLinter = () => (view: EditorView): Diagnostic[] => {\n\n  // Get the result types\n  const results = view.state.field(parseResults);\n\n  let dependsMap: {[key: string]: string[]} = {};\n  let registeredNodes: {[key: string]: AnalyzedTree.AnalyzedNode} = {}\n  // Error checking\n  const {errors: typeErrors, aTree: analyzedNodes} = typecheck(results.nodes, registeredNodes);\n  const mudErrors = mudCheck(analyzedNodes, registeredNodes, dependsMap);\n\n  // Create a diagnostic for each kind of error\n  const parseDiagnostics = results.parseErrors.map(makeDiagnostic(view));\n  const typeDiagnostics = typeErrors.map(makeDiagnostic(view));\n  const mudDiagnostics = mudErrors.map(makeDiagnostic(view, 'warning'));\n\n  return parseDiagnostics.concat(typeDiagnostics).concat(mudDiagnostics);\n}\n\n/**\n * Create a diagnostic from an error\n */\nconst makeDiagnostic = (view: EditorView, severity: 'error' | 'info' | 'warning' = 'error') => \n  (error): Diagnostic => {\n    return {\n      from: firstLine(view, error) + error.position.first_column,\n      to: lastLine(view, error) + error.position.last_column,\n      message: error.message,\n      severity: severity\n    }\n}\n\n/**\n * @returns the line number for the start of the error\n */\nfunction firstLine(view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.first_line).from;\n}\n\n/**\n * @returns the line number for the end of the error\n */\nfunction lastLine (view: EditorView, error: ParseError) {\n  return view.state.doc.line(error.position.last_line).from;    \n}\n\n/**\n * Convert our bespoke parser Token type to a token type that is recognized by CodeMirror\n */\nfunction token2tag(token: string): string | undefined {\n  switch (token) {\n    case 'NUMBER':\n      return 'number';\n\n    case 'TRUE':\n      return 'boolean';\n\n    case 'FALSE':\n      return 'boolean';\n\n    case '(':\n    case ')':\n      return 'bracket';\n\n    case '+':\n    case '-':\n    case '*':\n    case '/':\n    case '|':\n    case '&':\n    case '=':\n      return 'operator';\n\n    case 'COMMENT':\n      return 'comment';\n\n    case 'CHOOSE1':\n    case 'CHOOSE2':\n      return 'choose';\n\n    case 'FUNCTION':\n      return 'function';\n\n    case 'IDENTIFIER':\n      return 'variable';\n\n    case 'ERROR':\n      return 'error';\n\n    default:\n      return undefined;\n  }\n}\n","import * as d3Hierarchy from 'd3-hierarchy';\nimport * as d3Select from 'd3-selection';\nimport * as d3shape from 'd3-shape';\nimport * as AST from './ast';\n\nexport function visualize(nodes: AST.Node[]): void {\n\n    // Placement and size of tree\n    const margin = {top: 20, right: 90, bottom: 20, left: 90};\n    const height = 300 - margin.top - margin.bottom;\n    const width  = 500 - margin.left - margin.right;\n  \n    // Make the svg\n    d3Select.select('#viz').selectAll('svg').remove();\n    const viz = d3Select.select('#viz').append('svg');\n  \n    // Remove existing visualizations\n    viz.selectAll('*').remove();\n  \n    // Add a new visualization\n    viz.attr('width', width + margin.left + margin.right)\n       .attr('height', height + margin.top + margin.bottom);\n\n    const root: Node = {nodeType: 'Program', children: nodes}\n\n    // Visualize all the statements\n    // for (var statement of nodes) {\n\n      // Create the tree and layout\n      const treemap = d3Hierarchy.tree()\n        .size([height, width])\n        .separation(() => 1);\n      const treelayout = d3Hierarchy.hierarchy(root, getChildren);\n      const tree = treemap(treelayout);\n  \n      // Add a new graph element for this statement\n      const g = viz.append('g')\n                  //  .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n                   .attr('transform', `translate(${margin.left}, ${margin.top})`)\n                   .attr(\"font-family\", \"sans-serif\")\n                   .attr(\"font-size\", 12)\n               \n      // Edge updates\n      const link = g.selectAll('path.link').data(tree.links());\n\n      // Edge entry\n      const linkEnter = link.enter().append('path', 'g');\n        \n      // general edge attributes\n      linkEnter.attr('class', 'link')\n               .attr('fill', 'none')\n               .attr(\"stroke-opacity\", 0.4)\n               .attr('stroke', '#555')\n               .attr(\"stroke-width\", 1.5)\n               .attr('d', connection);\n\n        \n      // Node updates\n      const node = g.selectAll('g.node').data(tree.descendants());\n\n      // Node entry\n      const nodeEnter = node.enter().append('g');\n\n      // general node attributes\n      nodeEnter.attr('class', 'node')\n               .attr('transform', d => `translate(${d.y}, ${d.x})`);\n\n      nodeEnter.append('circle')\n               .attr(\"fill\", getFill)\n               .attr('r', '2.5')\n               .attr('stroke-width', 10);\n\n      // add text\n      nodeEnter.append('text')\n                // .attr('dy', '-10px')\n                .attr(\"dy\", \"0.31em\")\n                .attr(\"x\", d => d.children ? -8 : 8)\n                .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n                .attr('fill', d => isUndefined(d) ? '#fc6666' : 'black')\n                .style(\"fill-opacity\", 1)\n                .call(getTextBox)\n                .datum(d => d.data)\n                .text(getText)\n          .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n    \n      // Highlight undefined -- not working\n      // Inspired in part by https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\n      nodeEnter.filter((d,i) => isUndefined(d))\n        .call(yep)\n        .insert('rect', 'text')\n        .attr(\"x\", function(d){return d.bbox.x})\n        .attr(\"y\", function(d){return d.bbox.y})\n        .attr(\"width\", function(d){return d.bbox.width})\n        .attr(\"height\", function(d){return d.bbox.height}) \n        .attr('fill', 'black')             \n    // }\n}\n\n// From https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\nfunction getTextBox(selection) {\n  selection.each(function(d){d.bbox = this.getBBox();})\n}\n\nfunction yep(selection) {\n  // console.log(selection.nodes().map((d)=>d.bbox));\n}\n\n\nconst connection = d3shape.linkHorizontal().x(d => d.y).y(d => d.x)\n\nfunction getChildren(node: AST.Node): AST.Node[] {\n  var children: AST.Node[] = [];\n  switch (node.nodeType) {\n    case 'Program':\n      children = node.children;\n      break;\n    case 'Function':\n      children = node.args;\n      break;\n    case 'Choose':\n      children = [node.case.predicate, node.case.consequent, node.otherwise];\n      break;\n    case 'BinaryOperation':\n      children = [node.left, node.right];\n      break;\n    case 'VariableAssignment':\n      children = [node.assignment];\n      break;\n    default:\n      children = [];\n    }\n\n  return children;\n}\n\nfunction getText(node) {\n  var text = \"\";\n  switch (node.nodeType) {\n    case 'Program':\n      text = '';\n      break;\n    case 'Function':\n      text = node.name;\n      break;\n    case 'Choose':\n      text = \"choose\";\n      break;\n    case 'BinaryOperation':\n      text = node.operator;\n      break;\n    case 'VariableAssignment':\n      text = node.name;\n      break;\n    case 'Identifier':\n      text = node.name;\n      break;\n    case 'Number':  \n      text = node.value.toString();\n      break;\n    case 'Boolean':\n      text = node.value.toString();\n      break;\n    default:\n      text = \"\";\n  }\n\n  return text;\n}\n\nfunction getFill(node): string {\n  if (isUndefined(node)) {\n    return '#fc6666'\n  }\n  if (node.children) {\n    return '#555'\n  } else {\n    return '#999'\n  }\n}\n\nfunction isUndefined(d) {\n  return d.data.outputType?.status === 'Maybe-Undefined'\n}","import {Transaction} from \"@codemirror/state\"\nimport {json, jsonParseLinter} from \"@codemirror/lang-json\"\nimport {foldAll} from \"@codemirror/fold\"\nimport { visualize } from \"./visualization\"\nimport {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {linter} from \"@codemirror/lint\"\nimport { parseResults } from \"./parseResults\"\n\n/**\n * Given a transaction, update the developer tools\n */\n export function updateDevTools(tr: Transaction) {\n  const results = tr.state.field(parseResults)\n\n  // Display JSON for AST\n  const astJSON = JSON.stringify(results.nodes, null, 2)\n  replaceContents(astViewer, astJSON);\n\n  // Display JSON for depends map\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\n  replaceContents(dependsViewer, dependsJSON);\n\n  // Draw the AST\n  visualize(results.nodes);\n}\n\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\nfunction newJSONViewerState(): EditorState {\n  return EditorState.create({\n    extensions: [\n      basicSetup,\n      json(),\n      linter(jsonParseLinter()),\n      EditorView.editable.of(false),\n    ],\n  })\n}\n\n// JSON viewer for AST\nlet astViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\"),\n});\n\n// JSON viewer for depends map\nlet dependsViewer = new EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#depends-json\"),\n});\n\n/**\n * Replace the entire contents of an editor\n */\nfunction replaceContents(editor: EditorView, contents: string) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  foldAll(editor);  // By default, fold all levels\n}\n","import {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {Transaction} from \"@codemirror/state\"\nimport {linter} from \"@codemirror/lint\"\nimport {miniCL, miniCLLinter} from \"./miniCL\"\nimport {StreamLanguage} from \"@codemirror/stream-parser\"\nimport {parseResults} from \"./parseResults\"\nimport {updateDevTools} from \"./devTools\"\nimport \"./styles.css\"\nimport \"./desmos_icons.css\"\n\n// Create the CodeMirror miniCL editor and add it to the document.\nlet miniCLEditor = new EditorView({\n  state: EditorState.create({\n    extensions: [\n      basicSetup,                     // https://codemirror.net/6/docs/ref/#basic-setup\n      StreamLanguage.define(miniCL),  // syntax coloring for miniCL\n      parseResults,                   // field that holds the results of parsing\n      linter(miniCLLinter())          // error-checking for miniCL\n    ],\n  }),\n  dispatch: updateOutput,\n  parent: document.querySelector(\"#miniCL-editor\")\n})\n\n// When the content changes, update the editor and the dev tools\nfunction updateOutput(tr: Transaction) {\n  miniCLEditor.update([tr]);\n  updateDevTools(tr);\n}\n"]}