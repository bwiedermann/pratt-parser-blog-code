{"contents":"var _1_, _2_;\nvar _3_, _4_;\nvar _5_, _6_;\nvar _7_, _8_;\nvar _9_, _10_;\nvar _11_, _12_;\nvar _13_;\nvar _14_;\nexports.__esModule = true;\nvar findBase_1 = __fusereq(42);\nvar typechecker_1 = __fusereq(14);\nfunction mudCheck(nodes, registeredNodes, dependsMap) {\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));\n  return [].concat(...errors);\n}\nexports.mudCheck = mudCheck;\nfunction mudCheckNode(node, nodes, registeredNodes, dependsMap) {\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);\n}\nclass TypeError {\n  constructor(message, position) {\n    this.message = message;\n    this.position = position;\n  }\n}\nexports.TypeError = TypeError;\nclass MudCheckNumber {\n  mudCheck(node) {\n    return [];\n  }\n}\nclass MudCheckBoolean {\n  mudCheck(node) {\n    return [];\n  }\n}\nclass MudCheckBinary {\n  mudCheck(node, nodes, registeredNodes, dependsMap) {\n    const errors = mudCheckNode(node.left, nodes, registeredNodes, dependsMap).concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));\n    if (((_2_ = (_1_ = node.right) === null || _1_ === void 0 ? void 0 : _1_.outputType) === null || _2_ === void 0 ? void 0 : _2_.status) == 'Def-Undefined' || ((_4_ = (_3_ = node.left) === null || _3_ === void 0 ? void 0 : _3_.outputType) === null || _4_ === void 0 ? void 0 : _4_.status) == 'Def-Undefined') {\n      node.outputType.status = 'Def-Undefined';\n    } else if (((_6_ = (_5_ = node.right) === null || _5_ === void 0 ? void 0 : _5_.outputType) === null || _6_ === void 0 ? void 0 : _6_.status) == 'Maybe-Undefined' || ((_8_ = (_7_ = node.left) === null || _7_ === void 0 ? void 0 : _7_.outputType) === null || _8_ === void 0 ? void 0 : _8_.status) == 'Maybe-Undefined') {\n      node.outputType.status = 'Maybe-Undefined';\n    } else {\n      node.outputType.status = 'Definitely';\n    }\n    if (node.operator == '|') {\n      let intersection = [];\n      let leftAsserts = node.left.outputType.asserts;\n      let rightAsserts = node.right.outputType.asserts;\n      for (let i = 0; i < leftAsserts.length; i++) {\n        if (rightAsserts.find(e => e == leftAsserts[i])) {\n          intersection.push(leftAsserts[i]);\n        }\n      }\n      node.outputType.asserts = intersection;\n    } else {\n      let leftAsserts = node.left.outputType.asserts;\n      let rightAsserts = node.right.outputType.asserts;\n      let allAsserts = leftAsserts.concat(rightAsserts);\n      node.outputType.asserts = allAsserts;\n    }\n    return errors;\n  }\n}\nclass MudCheckFunction {\n  mudCheck(node, nodes, registeredNodes, dependsMap) {\n    let errors = [];\n    const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);\n    errors = errors.concat(arg1Errors);\n    if (node.args.length > 1) {\n      const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);\n      errors = errors.concat(arg2Errors);\n    }\n    if (node.name == 'IsDefined') {\n      let bases = findBase_1.findBases(node.args[0], dependsMap);\n      node.outputType.asserts = node.outputType.asserts.concat(bases);\n    }\n    const functionName = node.name;\n    const returnType = typechecker_1.builtins[functionName].resultType;\n    if (functionName == 'Sink') {\n      if (((_10_ = (_9_ = node.args[0]) === null || _9_ === void 0 ? void 0 : _9_.outputType) === null || _10_ === void 0 ? void 0 : _10_.status) != 'Definitely') {\n        errors.push(new TypeError(\"User facing content could be undefined.\", node.args[0].pos));\n      }\n    }\n    node.outputType.constType = typechecker_1.builtins[node.name].constType;\n    if (typechecker_1.builtins[functionName].status == \"Variable\") {\n      if (node.args[0].outputType.constType == 'Constant') {\n        const result = evaluate(node);\n        dependsMap[node.nodeId] = findBase_1.findBases(node, dependsMap);\n        if (result) {\n          node.outputType.status = \"Definitely\";\n        } else {\n          node.outputType.status = \"Def-Undefined\";\n          errors.push(new TypeError(\"The result of this operation is undefined.\", node.pos));\n        }\n      } else {\n        node.outputType.status = (_12_ = (_11_ = node.args[0]) === null || _11_ === void 0 ? void 0 : _11_.outputType) === null || _12_ === void 0 ? void 0 : _12_.status;\n      }\n    } else {\n      node.outputType.status = typechecker_1.builtins[functionName].status;\n    }\n    return errors;\n  }\n}\nclass MudCheckChoose {\n  mudCheck(node, nodes, registeredNodes, dependsMap) {\n    let errors = [];\n    const predicate = node.case.predicate;\n    const consequent = node.case.consequent;\n    const otherwise = node.otherwise;\n    const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);\n    const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);\n    const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);\n    errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\n    let consDef = false;\n    let otherDef = false;\n    if (otherwise.outputType.status == 'Definitely') {\n      otherDef = true;\n    }\n    consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\n    if (((_13_ = consequent) === null || _13_ === void 0 ? void 0 : _13_.outputType.status) == 'Definitely') {\n      consDef = true;\n    }\n    if (consDef && otherDef) {\n      node.outputType.status = 'Definitely';\n    }\n    return errors;\n  }\n}\nclass MudCheckVariable {\n  mudCheck(node, nodes, registeredNodes, dependsMap) {\n    let errors = [];\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);\n    errors = errors.concat(assignmentErrors);\n    node.outputType.status = node.assignment.outputType.status;\n    dependsMap[node.nodeId] = findBase_1.findBases(node.assignment, dependsMap);\n    return errors;\n  }\n}\nclass MudCheckIdentifier {\n  mudCheck(node, nodes, registeredNodes, dependsMap) {\n    let errors = [];\n    let valueNode = registeredNodes[node.assignmentId].assignment;\n    if (valueNode == undefined) {\n      errors.push(new TypeError(\"This variable doesn't have a value\", node.pos));\n    } else {\n      node.outputType.status = valueNode.outputType.status;\n    }\n    return errors;\n  }\n}\nconst mudCheckerMap = {\n  'Number': new MudCheckNumber(),\n  'Boolean': new MudCheckBoolean(),\n  'BinaryOperation': new MudCheckBinary(),\n  'Function': new MudCheckFunction(),\n  'Choose': new MudCheckChoose(),\n  'VariableAssignment': new MudCheckVariable(),\n  'Identifier': new MudCheckIdentifier()\n};\nfunction handleCheck(consequent, dependsMap, asserts) {\n  let contained = true;\n  if (((_14_ = consequent) === null || _14_ === void 0 ? void 0 : _14_.nodeType) == 'Choose') {\n    let consAsserts = consequent.case.predicate.outputType.asserts;\n    let consConsContained = handleCheck(consequent.case.consequent, dependsMap, asserts.concat(consAsserts));\n    let consOtherContained = handleCheck(consequent.otherwise, dependsMap, asserts);\n    if (!(consConsContained && consOtherContained)) {\n      contained = false;\n    }\n  } else {\n    let consBases = findBase_1.findBases(consequent, dependsMap);\n    for (let i = 0; i < consBases.length; i++) {\n      if (!asserts.find(e => e == consBases[i])) {\n        contained = false;\n      }\n    }\n  }\n  return contained;\n}\nfunction evaluate(node) {\n  if (node.name == \"Inverse\") {\n    if (node.args[0].value == 0) {\n      return false;\n    }\n  }\n  if (node.name == \"Sqrt\") {\n    if (node.args[0].value < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n","sourceMap":"{\"version\":3,\"sources\":[\"src/mudChecker.ts\"],\"names\":[\"nodes\",\"registeredNodes\",\"dependsMap\",\"errors\",\"map\",\"n\",\"mudCheckNode\",\"concat\",\"node\",\"mudCheckerMap\",\"nodeType\",\"mudCheck\",\"constructor\",\"message\",\"position\",\"left\",\"right\",\"outputType\",\"status\",\"operator\",\"intersection\",\"leftAsserts\",\"asserts\",\"rightAsserts\",\"i\",\"length\",\"find\",\"e\",\"push\",\"allAsserts\",\"arg1Errors\",\"args\",\"arg2Errors\",\"name\",\"bases\",\"findBase_1\",\"functionName\",\"returnType\",\"typechecker_1\",\"resultType\",\"TypeError\",\"pos\",\"constType\",\"result\",\"evaluate\",\"nodeId\",\"predicate\",\"case\",\"consequent\",\"otherwise\",\"predErrors\",\"consErrors\",\"otherErrors\",\"consDef\",\"otherDef\",\"handleCheck\",\"assignmentErrors\",\"assignment\",\"valueNode\",\"assignmentId\",\"undefined\",\"MudCheckNumber\",\"MudCheckBoolean\",\"MudCheckBinary\",\"MudCheckFunction\",\"MudCheckChoose\",\"MudCheckVariable\",\"MudCheckIdentifier\",\"contained\",\"consAsserts\",\"consConsContained\",\"consOtherContained\",\"consBases\",\"value\"],\"mappings\":\"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\",\"sourcesContent\":[\"import {Position} from './position';\\nimport * as AST from './ast';\\nimport {equals} from './equals';\\nimport {findBases} from './findBase';\\nimport {builtins} from './typechecker';\\n\\nexport function mudCheck(nodes: AST.Node[], \\n                        registeredNodes: {[key: string]: AST.Node},\\n                        dependsMap: {[key: string]: string[]}): TypeError[] {\\n  const errors = nodes.map(n => mudCheckNode(n, nodes, registeredNodes, dependsMap));\\n  return ([] as TypeError[]).concat(...errors);\\n}\\n\\nfunction mudCheckNode(node: AST.Node, \\n                    nodes: AST.Node[], \\n                    registeredNodes: {[key: string]: AST.Node},\\n                    dependsMap: {[key: string]: string[]}): TypeError[] {\\n  return mudCheckerMap[node.nodeType].mudCheck(node, nodes, registeredNodes, dependsMap);\\n}\\n\\nexport class TypeError {\\n  constructor(public message: string, public position: Position) {}\\n}\\n\\nexport interface MudChecker {\\n  mudCheck(node: AST.Node, \\n          nodes: AST.Node[], \\n          registeredNodes: {[key: string]: AST.Node},\\n          dependsMap: {[key: string]: string[]}): TypeError[];\\n}\\n\\nclass MudCheckNumber implements MudChecker {\\n  mudCheck(node: AST.NumberNode): TypeError[] {\\n    return [];\\n  }\\n}\\n\\nclass MudCheckBoolean implements MudChecker {\\n    mudCheck(node: AST.BooleanNode): TypeError[] {\\n    return [];\\n  }\\n}\\n\\nclass MudCheckBinary implements MudChecker {\\n    mudCheck(node: AST.BinaryOperationNode, \\n            nodes: AST.Node[], \\n            registeredNodes: {[key: string]: AST.Node},\\n            dependsMap: {[key: string]: string[]}): TypeError[] {\\n        const errors: TypeError[] = mudCheckNode(node.left, nodes, registeredNodes, dependsMap)\\n        .concat(mudCheckNode(node.right, nodes, registeredNodes, dependsMap));\\n\\n        // If no type errors, update the output type of this node, based on the outputType of its inputs\\n        if (node.right?.outputType?.status == 'Def-Undefined' || node.left?.outputType?.status == 'Def-Undefined') {\\n          node.outputType.status = 'Def-Undefined';\\n        }\\n        else if (node.right?.outputType?.status == 'Maybe-Undefined' || node.left?.outputType?.status == 'Maybe-Undefined') {\\n            node.outputType.status = 'Maybe-Undefined';\\n        } else {\\n            node.outputType.status = 'Definitely'\\n        }\\n\\n        if (node.operator == '|') {\\n          let intersection = [];\\n          let leftAsserts = node.left.outputType.asserts;\\n          let rightAsserts = node.right.outputType.asserts;\\n          for (let i = 0; i < leftAsserts.length; i++) {\\n            if (rightAsserts.find(e => e == leftAsserts[i])) {\\n              intersection.push(leftAsserts[i]);\\n            }\\n          }\\n          node.outputType.asserts = intersection;\\n        }\\n        else {\\n          // if it's an and, we take all of the asserts\\n          let leftAsserts = node.left.outputType.asserts;\\n          let rightAsserts = node.right.outputType.asserts;\\n          let allAsserts = leftAsserts.concat(rightAsserts);\\n\\n          node.outputType.asserts = allAsserts;\\n        }\\n\\n        return errors;\\n    }\\n}\\n\\nclass MudCheckFunction implements MudChecker {\\n    mudCheck(node: AST.FunctionNode, \\n            nodes: AST.Node[], \\n            registeredNodes: {[key: string]: AST.Node},\\n            dependsMap: {[key: string]: string[]}): TypeError[] {\\n        let errors: TypeError[] = [];\\n\\n        // First typecheck the argument\\n        const arg1Errors = mudCheckNode(node.args[0], nodes, registeredNodes, dependsMap);\\n        errors = errors.concat(arg1Errors);\\n        if (node.args.length > 1) {\\n        const arg2Errors = mudCheckNode(node.args[1], nodes, registeredNodes, dependsMap);\\n        errors = errors.concat(arg2Errors);\\n        }\\n\\n        /***** MAYBE-UNDEFINED-NESS *****/\\n        if (node.name == 'IsDefined') {\\n          let bases = findBases(node.args[0], dependsMap);\\n          node.outputType.asserts = node.outputType.asserts.concat(bases);\\n        }\\n\\n        const functionName = node.name\\n        const returnType = builtins[functionName].resultType;\\n\\n        // only show error if in sink \\\"node\\\"\\n        if (functionName == 'Sink') {\\n          // if sink \\\"node\\\" takes in possibly undefined values, warn the author\\n          // a sink has one argument\\n          if (node.args[0]?.outputType?.status != 'Definitely') {\\n              errors.push(new TypeError(\\\"User facing content could be undefined.\\\", node.args[0].pos));\\n          }\\n        }\\n\\n        node.outputType.constType = builtins[node.name].constType;  /***** CONSTANT-NESS *****/\\n        \\n        if (builtins[functionName].status == \\\"Variable\\\") {\\n          // this is essentially doing what a constant type would do\\n          // if the argument is maybe-undefined, then the node is maybe-undefined\\n          // otherwise, the node is definitely\\n\\n          if (node.args[0].outputType.constType == 'Constant') {\\n            const result = evaluate(node);\\n\\n            // Check if in dependsMap\\n            // If so, replace ndoe reference in dependsMap with\\n            dependsMap[node.nodeId] = findBases(node, dependsMap)\\n\\n            if (result) {\\n              node.outputType.status = \\\"Definitely\\\";\\n            } else {\\n              node.outputType.status = \\\"Def-Undefined\\\";\\n              errors.push(new TypeError(\\\"The result of this operation is undefined.\\\", node.pos));\\n            }\\n          } else {\\n            node.outputType.status = node.args[0]?.outputType?.status;\\n          }\\n\\n        }\\n        else {\\n          node.outputType.status = builtins[functionName].status;\\n        }\\n\\n        return errors;\\n    }\\n}\\n\\nclass MudCheckChoose implements MudChecker {\\n    mudCheck(node: AST.ChooseNode, \\n            nodes: AST.Node[], \\n            registeredNodes: {[key: string]: AST.Node},\\n            dependsMap: {[key: string]: string[]}): TypeError[] {\\n        let errors: TypeError[] = [];\\n\\n        const predicate = node.case.predicate;\\n        const consequent = node.case.consequent;\\n        const otherwise = node.otherwise;\\n\\n        // add stuff to the assertMap\\n\\n        // First typecheck the inner nodes\\n        const predErrors = mudCheckNode(predicate, nodes, registeredNodes, dependsMap);\\n        const consErrors = mudCheckNode(consequent, nodes, registeredNodes, dependsMap);\\n        const otherErrors = mudCheckNode(otherwise, nodes, registeredNodes, dependsMap);\\n        errors = errors.concat(predErrors).concat(consErrors).concat(otherErrors);\\n\\n        // DEFUALT status = maybe-undefined\\n\\n        let consDef = false;\\n        let otherDef = false;\\n\\n        if (otherwise.outputType.status == 'Definitely') {\\n          otherDef = true;\\n        }\\n\\n        // Check the definitive status of the consequent using the predicates asserts\\n        // NOTE: only binary operations and IsDefined functions have non-empty assert fields\\n        consDef = handleCheck(consequent, dependsMap, predicate.outputType.asserts);\\n\\n        if (consequent?.outputType.status == 'Definitely') {\\n          consDef = true;\\n        }\\n\\n        if (consDef && otherDef) {\\n          node.outputType.status = 'Definitely';\\n        }\\n\\n        return errors;\\n    }\\n}\\n\\nclass MudCheckVariable implements MudChecker {\\n    mudCheck(node: AST.VariableAssignmentNode, \\n            nodes: AST.Node[], \\n            registeredNodes: {[key: string]: AST.Node},\\n            dependsMap: {[key: string]: string[]}): TypeError[] {\\n    let errors: TypeError[] = [];\\n    // First typecheck the assignment node\\n    const assignmentErrors = mudCheckNode(node.assignment, nodes, registeredNodes, dependsMap);\\n    errors = errors.concat(assignmentErrors);\\n\\n    // Set variable assignment node output type to the same as it's assignment\\n    node.outputType.status = node.assignment.outputType.status;\\n\\n    dependsMap[node.nodeId] = findBases(node.assignment, dependsMap); // NEW FUNCTION HERE\\n\\n    return errors;\\n  }\\n}\\n\\nclass MudCheckIdentifier implements MudChecker {\\n    mudCheck(node: AST.IdentifierNode, \\n            nodes: AST.Node[], \\n            registeredNodes: {[key: string]: AST.Node},\\n            dependsMap: {[key: string]: string[]}): TypeError[] {\\n    let errors: TypeError[] = [];\\n\\n    // Maybe make assigmentId be valueId?\\n    let valueNode = registeredNodes[node.assignmentId].assignment;\\n\\n    // If this assignmentId is not found in the AST, throw an error\\n    if (valueNode == undefined) {\\n      errors.push(new TypeError(\\\"This variable doesn't have a value\\\", node.pos));\\n    } else {\\n      // If we found the assignment node, set the output type of the identifier\\n      node.outputType.status = valueNode.outputType.status;\\n    }\\n\\n    return errors;\\n  }\\n}\\n\\n\\nconst mudCheckerMap: Partial<{[K in AST.NodeType]: MudChecker}> = {\\n  'Number' : new MudCheckNumber(),\\n  'Boolean' : new MudCheckBoolean(),\\n  'BinaryOperation' : new MudCheckBinary(),\\n  'Function' : new MudCheckFunction(),\\n  'Choose': new MudCheckChoose(),\\n  'VariableAssignment': new MudCheckVariable(),\\n  'Identifier': new MudCheckIdentifier()\\n}\\n\\nfunction handleCheck(consequent: AST.Node,\\n                    dependsMap: {[key: string]: string[]},\\n                    asserts: string[]): boolean {\\n  let contained = true;\\n\\n  if (consequent?.nodeType == 'Choose') {\\n    // we need to check its bases separately\\n    let consAsserts = consequent.case.predicate.outputType.asserts;\\n    let consConsContained = handleCheck(consequent.case.consequent, dependsMap, asserts.concat(consAsserts));\\n    let consOtherContained = handleCheck(consequent.otherwise, dependsMap, asserts);\\n\\n    if (!(consConsContained && consOtherContained)) {\\n      contained = false;\\n    }\\n\\n  }\\n  else {\\n    let consBases = findBases(consequent, dependsMap);\\n\\n    for (let i = 0; i < consBases.length; i++) {\\n      if (!asserts.find(e => e == consBases[i])) {\\n        contained = false;\\n      }\\n    }\\n  }\\n\\n  return contained;\\n}\\n\\n// This funciton simulates running the body of a miniCL function (like Inverse(x))\\nfunction evaluate(node: AST.FunctionNode): boolean {\\n  if (node.name == \\\"Inverse\\\") {\\n    if (node.args[0].value == 0) {\\n      return false;\\n    }\\n  }\\n  if (node.name == \\\"Sqrt\\\") {\\n    if (node.args[0].value < 0) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n\"]}"}