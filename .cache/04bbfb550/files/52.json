{"contents":"exports.__esModule = true;\nvar count_js_1 = __fusereq(128);\nvar count_js_1d = __fuse.dt(count_js_1);\nvar each_js_1 = __fusereq(129);\nvar each_js_1d = __fuse.dt(each_js_1);\nvar eachBefore_js_1 = __fusereq(130);\nvar eachBefore_js_1d = __fuse.dt(eachBefore_js_1);\nvar eachAfter_js_1 = __fusereq(131);\nvar eachAfter_js_1d = __fuse.dt(eachAfter_js_1);\nvar find_js_1 = __fusereq(132);\nvar find_js_1d = __fuse.dt(find_js_1);\nvar sum_js_1 = __fusereq(133);\nvar sum_js_1d = __fuse.dt(sum_js_1);\nvar sort_js_1 = __fusereq(134);\nvar sort_js_1d = __fuse.dt(sort_js_1);\nvar path_js_1 = __fusereq(135);\nvar path_js_1d = __fuse.dt(path_js_1);\nvar ancestors_js_1 = __fusereq(136);\nvar ancestors_js_1d = __fuse.dt(ancestors_js_1);\nvar descendants_js_1 = __fusereq(137);\nvar descendants_js_1d = __fuse.dt(descendants_js_1);\nvar leaves_js_1 = __fusereq(138);\nvar leaves_js_1d = __fuse.dt(leaves_js_1);\nvar links_js_1 = __fusereq(139);\nvar links_js_1d = __fuse.dt(links_js_1);\nvar iterator_js_1 = __fusereq(140);\nvar iterator_js_1d = __fuse.dt(iterator_js_1);\nfunction hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n  var root = new Node(data), node, nodes = [root], child, childs, i, n;\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n  return root.eachBefore(computeHeight);\n}\nexports.default = hierarchy;\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\nfunction objectChildren(d) {\n  return d.children;\n}\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\nfunction computeHeight(node) {\n  var height = 0;\n  do node.height = height; while ((node = node.parent) && node.height < ++height);\n}\nexports.computeHeight = computeHeight;\nfunction Node(data) {\n  this.data = data;\n  this.depth = this.height = 0;\n  this.parent = null;\n}\nexports.Node = Node;\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: count_js_1d.default,\n  each: each_js_1d.default,\n  eachAfter: eachAfter_js_1d.default,\n  eachBefore: eachBefore_js_1d.default,\n  find: find_js_1d.default,\n  sum: sum_js_1d.default,\n  sort: sort_js_1d.default,\n  path: path_js_1d.default,\n  ancestors: ancestors_js_1d.default,\n  descendants: descendants_js_1d.default,\n  leaves: leaves_js_1d.default,\n  links: links_js_1d.default,\n  copy: node_copy,\n  [Symbol.iterator]: iterator_js_1d.default\n};\n"}