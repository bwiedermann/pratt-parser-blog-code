{"contents":"exports.__esModule = true;\nvar dice_js_1 = __fusereq(61);\nvar dice_js_1d = __fuse.dt(dice_js_1);\nvar slice_js_1 = __fusereq(62);\nvar slice_js_1d = __fuse.dt(slice_js_1);\nexports.phi = (1 + Math.sqrt(5)) / 2;\nfunction squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;\n  while (i0 < n) {\n    (dx = x1 - x0, dy = y1 - y0);\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n      minRatio = newRatio;\n    }\n    rows.push(row = {\n      value: sumValue,\n      dice: dx < dy,\n      children: nodes.slice(i0, i1)\n    });\n    if (row.dice) dice_js_1d.default(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1); else slice_js_1d.default(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    (value -= sumValue, i0 = i1);\n  }\n  return rows;\n}\nexports.squarifyRatio = squarifyRatio;\nexports.default = (function custom(ratio) {\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n  squarify.ratio = function (x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n  return squarify;\n})(exports.phi);\n"}