{"contents":"exports.__esModule = true;\nvar lang_json_1 = __fusereq(36);\nvar fold_1 = __fusereq(20);\nvar visualization_1 = __fusereq(37);\nvar basic_setup_1 = __fusereq(3);\nvar lint_1 = __fusereq(4);\nvar parseResults_1 = __fusereq(7);\nfunction updateDevTools(tr) {\n  const results = tr.state.field(parseResults_1.parseResults);\n  const astJSON = JSON.stringify(results.nodes, null, 2);\n  replaceContents(astViewer, astJSON);\n  visualization_1.visualize(results.nodes);\n}\nexports.updateDevTools = updateDevTools;\nfunction newJSONViewerState() {\n  return basic_setup_1.EditorState.create({\n    extensions: [basic_setup_1.basicSetup, lang_json_1.json(), lint_1.linter(lang_json_1.jsonParseLinter()), basic_setup_1.EditorView.editable.of(false)]\n  });\n}\nlet astViewer = new basic_setup_1.EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\")\n});\nfunction replaceContents(editor, contents) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  fold_1.foldAll(editor);\n}\n","sourceMap":"{\"version\":3,\"sources\":[\"src/devTools.ts\"],\"names\":[\"tr\",\"results\",\"state\",\"field\",\"parseResults_1\",\"astJSON\",\"JSON\",\"stringify\",\"nodes\",\"replaceContents\",\"astViewer\",\"visualization_1\",\"basic_setup_1\",\"create\",\"extensions\",\"lang_json_1\",\"lint_1\",\"editable\",\"of\",\"newJSONViewerState\",\"parent\",\"document\",\"querySelector\",\"editor\",\"contents\",\"update\",\"changes\",\"from\",\"to\",\"doc\",\"length\",\"insert\",\"fold_1\"],\"mappings\":\";;;;;;;AAWQ,wBAAwBA;QACxBC,UAAUD,GAAGE,MAAMC,MAAMC;QAGzBC,UAAUC,KAAKC,UAAUN,QAAQO,OAAO,MAAM;EACpDC,gBAAgBC,WAAWL;EAG3BM,0BAAUV,QAAQO;;;AAIpB;SACSI,0BAAYC;IACjBC,aACEF,0BACAG,oBACAC,cAAOD,gCACPH,yBAAWK,SAASC,GAAG;;;IAMzBR,gBAAgBE;EAClBV,OAAOiB;EACPC,QAAQC,SAASC,cAAc;;AAOjC,yBAAyBC,QAAoBC;QACrCC,SAASF,OAAOrB,MAAMuB;IAC1BC;MACEC,MAAM;MACNC,IAAIL,OAAOrB,MAAM2B,IAAIC;MACrBC,QAAQP;;;EAGZD,OAAOE,QAAQA;EACfO,eAAQT\",\"sourcesContent\":[\"import {Transaction} from \\\"@codemirror/state\\\"\\nimport {json, jsonParseLinter} from \\\"@codemirror/lang-json\\\"\\nimport {foldAll} from \\\"@codemirror/fold\\\"\\nimport { visualize } from \\\"./visualization\\\"\\nimport {EditorState, EditorView, basicSetup} from \\\"@codemirror/basic-setup\\\"\\nimport {linter} from \\\"@codemirror/lint\\\"\\nimport { parseResults } from \\\"./parseResults\\\"\\n\\n/**\\n * Given a transaction, update the developer tools\\n */\\n export function updateDevTools(tr: Transaction) {\\n  const results = tr.state.field(parseResults)\\n\\n  // Display JSON for AST\\n  const astJSON = JSON.stringify(results.nodes, null, 2)\\n  replaceContents(astViewer, astJSON);\\n\\n  // Draw the AST\\n  visualize(results.nodes);\\n}\\n\\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\\nfunction newJSONViewerState(): EditorState {\\n  return EditorState.create({\\n    extensions: [\\n      basicSetup,\\n      json(),\\n      linter(jsonParseLinter()),\\n      EditorView.editable.of(false),\\n    ],\\n  })\\n}\\n\\n// JSON viewer for AST\\nlet astViewer = new EditorView({\\n  state: newJSONViewerState(),\\n  parent: document.querySelector(\\\"#ast-json\\\"),\\n});\\n\\n\\n/**\\n * Replace the entire contents of an editor\\n */\\nfunction replaceContents(editor: EditorView, contents: string) {\\n  const update = editor.state.update({\\n    changes: {\\n      from: 0,\\n      to: editor.state.doc.length,\\n      insert: contents\\n    }\\n  });\\n  editor.update([update]);\\n  foldAll(editor);  // By default, fold all levels\\n}\\n\"]}"}