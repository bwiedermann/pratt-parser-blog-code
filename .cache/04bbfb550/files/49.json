{"contents":"function token2pos(token) {\n  return {\n    first_line: token.line,\n    last_line: token.line,\n    first_column: token.first_column,\n    last_column: token.last_column\n  };\n}\nexports.token2pos = token2pos;\nfunction join(start, end) {\n  return {\n    first_line: start.first_line,\n    last_line: end.last_line,\n    first_column: start.first_column,\n    last_column: end.last_column\n  };\n}\nexports.join = join;\nfunction pos2string(pos) {\n  return pos.first_line.toString() + \".\" + pos.first_column.toString() + \".\" + pos.last_line.toString() + \".\" + pos.last_column.toString();\n}\nexports.pos2string = pos2string;\nclass ParseError {\n  constructor(message, position) {\n    this.message = message;\n    this.position = position;\n  }\n}\nexports.ParseError = ParseError;\n","sourceMap":"{\"version\":3,\"sources\":[\"src/position.ts\"],\"names\":[\"token\",\"first_line\",\"line\",\"last_line\",\"first_column\",\"last_column\",\"start\",\"end\",\"pos\",\"toString\",\"constructor\",\"message\",\"position\"],\"mappings\":\"AASO,mBAAmBA;;IAEtBC,YAAYD,MAAME;IAClBC,WAAWH,MAAME;IACjBE,cAAcJ,MAAMI;IACpBC,aAAaL,MAAMK;;;;AAIhB,cAAcC,OAAiBC;;IAElCN,YAAYK,MAAML;IAClBE,WAAWI,IAAIJ;IACfC,cAAcE,MAAMF;IACpBC,aAAaE,IAAIF;;;;AAKd,oBAAoBG;SAClBA,IAAIP,WAAWQ,aAAa,MAC5BD,IAAIJ,aAAaK,aAAa,MAC9BD,IAAIL,UAAUM,aAAa,MAC3BD,IAAIH,YAAYI;;;AAKlB;EACLC,YAAmBC,SAAwBC;SAAxBD;SAAwBC\",\"sourcesContent\":[\"import { Token } from './lexer';\\n\\nexport type Position = {\\n  first_line: number;\\n  first_column: number;\\n  last_line: number;\\n  last_column: number;\\n};\\n\\nexport function token2pos(token: Token): Position {\\n  return {\\n    first_line: token.line,\\n    last_line: token.line,\\n    first_column: token.first_column,\\n    last_column: token.last_column\\n  }\\n}\\n\\nexport function join(start: Position, end: Position) {\\n  return {\\n    first_line: start.first_line,\\n    last_line: end.last_line,\\n    first_column: start.first_column,\\n    last_column: end.last_column\\n  };\\n}\\n\\n// Returns a string that uniquely identifies a node's position\\nexport function pos2string(pos: Position): string {\\n  return pos.first_line.toString() + \\\".\\\" +\\n         pos.first_column.toString() + \\\".\\\" +\\n         pos.last_line.toString() + \\\".\\\" +\\n         pos.last_column.toString();\\n}\\n\\n// note, extending Error in the browser is problematic\\n// https://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\\nexport class ParseError {\\n  constructor(public message: string, public position: Position) {}\\n}\\n\"]}"}