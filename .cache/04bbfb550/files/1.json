{"contents":"exports.__esModule = true;\nvar basic_setup_1 = __fusereq(3);\nvar lint_1 = __fusereq(4);\nvar miniCL_1 = __fusereq(5);\nvar stream_parser_1 = __fusereq(6);\nvar parseResults_1 = __fusereq(7);\nvar devTools_1 = __fusereq(8);\n__fusereq(9);\n__fusereq(11);\nlet miniCLEditor = new basic_setup_1.EditorView({\n  state: basic_setup_1.EditorState.create({\n    extensions: [basic_setup_1.basicSetup, stream_parser_1.StreamLanguage.define(miniCL_1.miniCL), parseResults_1.parseResults, lint_1.linter(miniCL_1.miniCLLinter())]\n  }),\n  dispatch: updateOutput,\n  parent: document.querySelector(\"#miniCL-editor\")\n});\nfunction updateOutput(tr) {\n  miniCLEditor.update([tr]);\n  devTools_1.updateDevTools(tr);\n}\n","sourceMap":"{\"version\":3,\"sources\":[\"src/index.ts\"],\"names\":[\"miniCLEditor\",\"basic_setup_1\",\"state\",\"create\",\"extensions\",\"stream_parser_1\",\"define\",\"miniCL_1\",\"parseResults_1\",\"lint_1\",\"dispatch\",\"updateOutput\",\"parent\",\"document\",\"querySelector\",\"tr\",\"update\",\"devTools_1\"],\"mappings\":\";;;;;;;;;IAWIA,mBAAmBC;EACrBC,OAAOD,0BAAYE;IACjBC,aACEH,0BACAI,+BAAeC,OAAOC,kBACtBC,6BACAC,cAAOF;;EAGXG,UAAUC;EACVC,QAAQC,SAASC,cAAc;;AAIjC,sBAAsBC;EACpBf,aAAagB,QAAQD;EACrBE,0BAAeF\",\"sourcesContent\":[\"import {EditorState, EditorView, basicSetup} from \\\"@codemirror/basic-setup\\\"\\nimport {Transaction} from \\\"@codemirror/state\\\"\\nimport {linter} from \\\"@codemirror/lint\\\"\\nimport {miniCL, miniCLLinter} from \\\"./miniCL\\\"\\nimport {StreamLanguage} from \\\"@codemirror/stream-parser\\\"\\nimport {parseResults} from \\\"./parseResults\\\"\\nimport {updateDevTools} from \\\"./devTools\\\"\\nimport \\\"./styles.css\\\"\\nimport \\\"./desmos_icons.css\\\"\\n\\n// Create the CodeMirror miniCL editor and add it to the document.\\nlet miniCLEditor = new EditorView({\\n  state: EditorState.create({\\n    extensions: [\\n      basicSetup,                     // https://codemirror.net/6/docs/ref/#basic-setup\\n      StreamLanguage.define(miniCL),  // syntax coloring for miniCL\\n      parseResults,                   // field that holds the results of parsing\\n      linter(miniCLLinter())          // error-checking for miniCL\\n    ],\\n  }),\\n  dispatch: updateOutput,\\n  parent: document.querySelector(\\\"#miniCL-editor\\\")\\n})\\n\\n// When the content changes, update the editor and the dev tools\\nfunction updateOutput(tr: Transaction) {\\n  miniCLEditor.update([tr]);\\n  updateDevTools(tr);\\n}\\n\"]}"}