{"contents":"exports.__esModule = true;\nvar round_js_1 = __fusereq(142);\nvar round_js_1d = __fuse.dt(round_js_1);\nvar dice_js_1 = __fusereq(61);\nvar dice_js_1d = __fuse.dt(dice_js_1);\nfunction __DefaultExport__() {\n  var dx = 1, dy = 1, padding = 0, round = false;\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 = root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(round_js_1d.default);\n    return root;\n  }\n  function positionNode(dy, n) {\n    return function (node) {\n      if (node.children) {\n        dice_js_1d.default(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n  partition.round = function (x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n  partition.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n  partition.padding = function (x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n  return partition;\n}\nexports.default = __DefaultExport__;\n"}