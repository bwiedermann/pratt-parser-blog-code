{"contents":"var _1_, _2_;\nexports.__esModule = true;\nvar position_1 = __fusereq(49);\nvar findBase_1 = __fusereq(42);\nclass NumberParselet {\n  parse(_parser, _tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'Number',\n      value: parseFloat(token.text),\n      outputType: {\n        status: 'Definitely',\n        valueType: 'number',\n        asserts: []\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.NumberParselet = NumberParselet;\nclass BooleanParselet {\n  constructor(value) {\n    this.value = value;\n  }\n  parse(_parser, _tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'Boolean',\n      value: this.value,\n      outputType: {\n        status: 'Definitely',\n        valueType: 'boolean',\n        asserts: []\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.BooleanParselet = BooleanParselet;\nclass ParenParselet {\n  parse(parser, tokens, _token, varMap, registeredNodes, dependsMap) {\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken(')');\n    return exp;\n  }\n}\nexports.ParenParselet = ParenParselet;\nclass ConsequentParselet {\n  constructor(tokenType, associativity) {\n    this.tokenType = tokenType;\n    this.associativity = associativity;\n  }\n}\nexports.ConsequentParselet = ConsequentParselet;\nclass BinaryOperatorParselet extends ConsequentParselet {\n  constructor(tokenType, associativity) {\n    super(tokenType, associativity);\n    this.tokenType = tokenType;\n  }\n  parse(parser, tokens, left, token, varMap, registeredNodes, dependsMap) {\n    const bindingPower = parser.bindingPower(token);\n    const right = parser.parse(tokens, this.associativity == 'left' ? bindingPower : bindingPower - 1, varMap, registeredNodes, dependsMap);\n    const position = position_1.join(left.pos, position_1.token2pos(tokens.last()));\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      outputType: undefined,\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.BinaryOperatorParselet = BinaryOperatorParselet;\nclass FunctionParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    let args = [arg1];\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n    let newNode = {\n      nodeType: 'Function',\n      name: token.text,\n      args: args,\n      outputType: {\n        status: 'Maybe-Undefined',\n        valueType: undefined,\n        asserts: []\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.FunctionParselet = FunctionParselet;\nclass ChooseParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    let newNode = {\n      nodeType: 'Choose',\n      case: {\n        predicate: predicate,\n        consequent: consequent\n      },\n      otherwise: otherwise,\n      outputType: {\n        status: 'Maybe-Undefined',\n        valueType: undefined,\n        asserts: []\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.ChooseParselet = ChooseParselet;\nclass VariableAssignmentParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    varMap[token.text] = id;\n    let newNode = {\n      nodeType: 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      outputType: {\n        status: \"Maybe-Undefined\",\n        valueType: (_2_ = (_1_ = assignment) === null || _1_ === void 0 ? void 0 : _1_.outputType) === null || _2_ === void 0 ? void 0 : _2_.valueType,\n        asserts: []\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    dependsMap[id] = findBase_1.findBases(assignment, dependsMap);\n    return newNode;\n  }\n}\nexports.VariableAssignmentParselet = VariableAssignmentParselet;\nclass IdentifierParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    const assignmentId = varMap[token.text];\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);\n    } else {\n      let newNode = {\n        nodeType: 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        outputType: {\n          status: \"Maybe-Undefined\",\n          valueType: undefined,\n          asserts: []\n        },\n        pos: position,\n        nodeId: id\n      };\n      registeredNodes[id] = newNode;\n      return newNode;\n    }\n  }\n}\nexports.IdentifierParselet = IdentifierParselet;\n","sourceMap":"{\"version\":3,\"sources\":[\"src/parselet.ts\"],\"names\":[\"parse\",\"_parser\",\"_tokens\",\"token\",\"varMap\",\"registeredNodes\",\"dependsMap\",\"position\",\"position_1\",\"id\",\"newNode\",\"nodeType\",\"value\",\"parseFloat\",\"text\",\"outputType\",\"status\",\"valueType\",\"asserts\",\"pos\",\"nodeId\",\"constructor\",\"parser\",\"tokens\",\"_token\",\"exp\",\"expectToken\",\"tokenType\",\"associativity\",\"ConsequentParselet\",\"left\",\"bindingPower\",\"right\",\"last\",\"operator\",\"undefined\",\"arg1\",\"args\",\"arg2\",\"push\",\"name\",\"predicate\",\"consequent\",\"otherwise\",\"case\",\"assignment\",\"findBase_1\",\"assignmentId\",\"varParselet\",\"VariableAssignmentParselet\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { TokenStream } from './tokenstream';\\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\\nimport * as AST from './ast';\\nimport { AbstractParser } from './parser';\\nimport {ParseError, token2pos, join, pos2string} from './position';\\nimport {findBases} from './findBase';\\n\\nexport interface InitialParselet {\\n  parse(parser: AbstractParser,\\n        tokens: TokenStream, token: Token,\\n        varMap: {[key: string]: string},\\n        registeredNodes: {[key: string]: AST.Node},\\n        dependsMap: {[key: string]: string[]}): AST.Node;\\n}\\n\\n\\nexport class NumberParselet implements InitialParselet {\\n  parse(_parser: AbstractParser,\\n        _tokens: TokenStream,\\n        token: Token,\\n        varMap: {[key: string]: string},\\n        registeredNodes: {[key: string]: AST.Node},\\n        dependsMap: {[key: string]: string[]}) {\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n    // add node to the map\\n    let newNode = {\\n      nodeType: 'Number' as 'Number',\\n      value: parseFloat(token.text),\\n      outputType: { status: 'Definitely' as 'Definitely',\\n                    valueType: 'number' as 'number',\\n                    asserts: [] },\\n      pos: position,\\n      nodeId: id\\n    };\\n    registeredNodes[id] = newNode;\\n    return newNode;\\n  }\\n}\\n\\nexport class BooleanParselet implements InitialParselet {\\n  constructor(private value: boolean) {}\\n  parse(_parser: AbstractParser,\\n        _tokens: TokenStream, token: Token,\\n        varMap: {[key: string]: string},\\n        registeredNodes: {[key: string]: AST.Node},\\n        dependsMap: {[key: string]: string[]}) {\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n    let newNode = {\\n      nodeType: 'Boolean' as 'Boolean',\\n      value: this.value,\\n      outputType: { status: 'Definitely' as 'Definitely',\\n                    valueType: 'boolean' as 'boolean',\\n                    asserts: [] },\\n      pos: position,\\n      nodeId: id\\n    };\\n    registeredNodes[id] = newNode;\\n    return newNode;\\n  }\\n}\\n\\nexport class ParenParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    _token: Token,\\n    varMap: {[key: string]: string},\\n    registeredNodes: {[key: string]: AST.Node},\\n    dependsMap: {[key: string]: string[]}) {\\n\\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\n    tokens.expectToken(')');\\n\\n    return exp;\\n  }\\n}\\n\\nexport abstract class ConsequentParselet {\\n  constructor(\\n    readonly tokenType: TokenType,\\n    readonly associativity: 'left' | 'right'\\n  ) {}\\n  abstract parse(\\n    parser: AbstractParser,\\n    tokens: TokenStream,\\n    left: AST.Node,\\n    token: Token,\\n    varMap: {[key: string]: string},\\n    registeredNodes: {[key: string]: AST.Node},\\n    dependsMap: {[key: string]: string[]}\\n  ): AST.Node;\\n}\\n\\nexport class BinaryOperatorParselet extends ConsequentParselet {\\n  constructor(\\n    public tokenType: BinaryOperationTokenType,\\n    associativity: 'left' | 'right'\\n  ) {\\n    super(tokenType, associativity);\\n  }\\n\\n  parse(\\n    parser: AbstractParser,\\n    tokens: TokenStream,\\n    left: AST.Node,\\n    token: Token,\\n    varMap: {[key: string]: string},\\n    registeredNodes: {[key: string]: AST.Node},\\n    dependsMap: {[key: string]: string[]}\\n  ): AST.Node {\\n    const bindingPower = parser.bindingPower(token);\\n\\n    const right = parser.parse(\\n      tokens,\\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\\n      varMap,\\n      registeredNodes,\\n      dependsMap\\n    );\\n    const position = join(left.pos, token2pos(tokens.last()));\\n    const id = pos2string(position);\\n    let newNode = {\\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\\n      operator: this.tokenType,\\n      left,\\n      right,\\n      outputType: undefined,\\n      pos: position,\\n      nodeId: id\\n    };\\n    registeredNodes[id] = newNode;\\n\\n    return newNode;\\n  }\\n}\\n\\n// Parse function calls\\n// Limitation: Functions are allowed to take exactly one argument\\nexport class FunctionParselet implements InitialParselet {\\n  \\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string},\\n    registeredNodes: {[key: string]: AST.Node},\\n    dependsMap: {[key: string]: string[]}) {\\n\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n    tokens.expectToken('(');\\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for one argument\\n    let args = [arg1];\\n    if (token.text == \\\"ParseOrderedPair\\\") {\\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for second argument\\n      args.push(arg2);\\n    }\\n    tokens.expectToken(')');\\n    let newNode = {\\n      nodeType: 'Function' as 'Function',\\n      name: token.text,\\n      args: args,\\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\\n                    valueType: undefined,\\n                    asserts: [] },\\n      pos: position,\\n      nodeId: id\\n    };\\n    registeredNodes[id] = newNode;\\n    return newNode;\\n  }\\n}\\n\\nexport class ChooseParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string},\\n    registeredNodes: {[key: string]: AST.Node},\\n    dependsMap: {[key: string]: string[]}) {\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n\\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\n    tokens.expectToken('CHOOSE2');\\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\n\\n    let newNode = {\\n      nodeType: 'Choose' as 'Choose',\\n      case: { predicate: predicate, consequent: consequent },\\n      otherwise: otherwise,\\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\\n                    valueType: undefined,\\n                    asserts: [] },\\n      pos: position,\\n      nodeId: id\\n    };\\n    registeredNodes[id] = newNode;\\n    return newNode;\\n  }\\n}\\n\\nexport class VariableAssignmentParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string},\\n    registeredNodes: {[key: string]: AST.Node},\\n    dependsMap: {[key: string]: string[]}) {\\n\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n    \\n    // deal with variable assignment\\n    tokens.expectToken('=');\\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\n\\n    // need to save the variable and its assignment in a lookup table\\n    varMap[token.text] = id;\\n    let newNode = {\\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\\n      name: token.text,\\n      assignment: assignment,\\n      outputType: { status: \\\"Maybe-Undefined\\\" as \\\"Maybe-Undefined\\\",\\n                    valueType: assignment?.outputType?.valueType,\\n                    asserts: [] },\\n      pos: position,\\n      nodeId: id\\n    };\\n    registeredNodes[id] = newNode;\\n    dependsMap[id] = findBases(assignment, dependsMap); // NEW FUNCTION HERE\\n\\n    return newNode;\\n  }\\n}\\n\\nexport class IdentifierParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string},\\n    registeredNodes: {[key: string]: AST.Node},\\n    dependsMap: {[key: string]: string[]}) {\\n    \\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n    // need to look up known variables in a lookup table (map?)\\n\\n    const assignmentId = varMap[token.text];\\n\\n    if (!assignmentId) {\\n      const varParselet = new VariableAssignmentParselet();\\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);\\n    }\\n    else {\\n      let newNode = {\\n        nodeType: 'Identifier' as 'Identifier',\\n        name: token.text,\\n        assignmentId: assignmentId,\\n        outputType: { status: \\\"Maybe-Undefined\\\" as \\\"Maybe-Undefined\\\",\\n                      valueType: undefined,\\n                      asserts: [] },\\n        pos: position,\\n        nodeId: id\\n      };\\n      registeredNodes[id] = newNode;\\n      return newNode;\\n    }\\n  }\\n}\\n\"]}"}