{"contents":"exports.__esModule = true;\nvar position_1 = __fusereq(49);\nvar typechecker_1 = __fusereq(14);\nclass NumberParselet {\n  parse(_parser, _tokens, token, varMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'Number',\n      value: parseFloat(token.text),\n      valueType: 'number',\n      pos: position,\n      nodeId: id\n    };\n    return newNode;\n  }\n}\nexports.NumberParselet = NumberParselet;\nclass BooleanParselet {\n  constructor(value) {\n    this.value = value;\n  }\n  parse(_parser, _tokens, token, varMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'Boolean',\n      value: this.value,\n      valueType: 'boolean',\n      pos: position,\n      nodeId: id\n    };\n    return newNode;\n  }\n}\nexports.BooleanParselet = BooleanParselet;\nclass ParenParselet {\n  parse(parser, tokens, _token, varMap) {\n    const exp = parser.parse(tokens, 0, varMap);\n    tokens.expectToken(')');\n    return exp;\n  }\n}\nexports.ParenParselet = ParenParselet;\nclass ConsequentParselet {\n  constructor(tokenType, associativity) {\n    this.tokenType = tokenType;\n    this.associativity = associativity;\n  }\n}\nexports.ConsequentParselet = ConsequentParselet;\nclass BinaryOperatorParselet extends ConsequentParselet {\n  constructor(tokenType, associativity) {\n    super(tokenType, associativity);\n    this.tokenType = tokenType;\n  }\n  parse(parser, tokens, left, token, varMap) {\n    const bindingPower = parser.bindingPower(token);\n    const right = parser.parse(tokens, this.associativity == 'left' ? bindingPower : bindingPower - 1, varMap);\n    const position = position_1.join(left.pos, position_1.token2pos(tokens.last()));\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      pos: position,\n      nodeId: id\n    };\n    return newNode;\n  }\n}\nexports.BinaryOperatorParselet = BinaryOperatorParselet;\nclass FunctionParselet {\n  parse(parser, tokens, token, varMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap);\n    let args = [arg1];\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap);\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n    if (!typechecker_1.builtins[token.text]) {\n      throw new position_1.ParseError(`Unknown Function`, position);\n    }\n    let newNode = {\n      nodeType: 'Function',\n      name: token.text,\n      args: args,\n      pos: position,\n      nodeId: id\n    };\n    return newNode;\n  }\n}\nexports.FunctionParselet = FunctionParselet;\nclass ChooseParselet {\n  parse(parser, tokens, token, varMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    const predicate = parser.parse(tokens, 0, varMap);\n    const consequent = parser.parse(tokens, 0, varMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap);\n    let newNode = {\n      nodeType: 'Choose',\n      case: {\n        predicate: predicate,\n        consequent: consequent\n      },\n      otherwise: otherwise,\n      pos: position,\n      nodeId: id\n    };\n    return newNode;\n  }\n}\nexports.ChooseParselet = ChooseParselet;\nclass VariableAssignmentParselet {\n  parse(parser, tokens, token, varMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap);\n    varMap[token.text] = id;\n    let newNode = {\n      nodeType: 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      pos: position,\n      nodeId: id\n    };\n    return newNode;\n  }\n}\nexports.VariableAssignmentParselet = VariableAssignmentParselet;\nclass IdentifierParselet {\n  parse(parser, tokens, token, varMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    const assignmentId = varMap[token.text];\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap);\n    } else {\n      let newNode = {\n        nodeType: 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        pos: position,\n        nodeId: id\n      };\n      return newNode;\n    }\n  }\n}\nexports.IdentifierParselet = IdentifierParselet;\n","sourceMap":"{\"version\":3,\"sources\":[\"src/parselet.ts\"],\"names\":[\"parse\",\"_parser\",\"_tokens\",\"token\",\"varMap\",\"position\",\"position_1\",\"id\",\"newNode\",\"nodeType\",\"value\",\"parseFloat\",\"text\",\"valueType\",\"pos\",\"nodeId\",\"constructor\",\"parser\",\"tokens\",\"_token\",\"exp\",\"expectToken\",\"tokenType\",\"associativity\",\"ConsequentParselet\",\"left\",\"bindingPower\",\"right\",\"last\",\"operator\",\"arg1\",\"args\",\"arg2\",\"push\",\"typechecker_1\",\"name\",\"predicate\",\"consequent\",\"otherwise\",\"case\",\"assignment\",\"assignmentId\",\"varParselet\",\"VariableAssignmentParselet\"],\"mappings\":\";;;AAeO;EACLA,MAAMC,SACAC,SACAC,OACAC;UACEC,WAAWC,qBAAUH;UACrBI,KAAKD,sBAAWD;QAElBG;MACFC,UAAU;MACVC,OAAOC,WAAWR,MAAMS;MACxBC,WAAW;MACXC,KAAKT;MACLU,QAAQR;;WAGHC;;;;AAIJ;EACLQ,YAAoBN;SAAAA;;EACpBV,MAAMC,SACAC,SAAsBC,OACtBC;UACEC,WAAWC,qBAAUH;UACrBI,KAAKD,sBAAWD;QAElBG;MACFC,UAAU;MACVC,OAAO,KAAKA;MACZG,WAAW;MACXC,KAAKT;MACLU,QAAQR;;WAGHC;;;;AAIJ;EACLR,MAAMiB,QACJC,QACAC,QACAf;UAEMgB,MAAMH,OAAOjB,MAAMkB,QAAQ,GAAGd;IACpCc,OAAOG,YAAY;WAEZD;;;;AAIJ;EACLJ,YACWM,WACAC;SADAD;SACAC;;;;AAUN,qCAAqCC;EAC1CR,YACSM,WACPC;IAEA,MAAMD,WAAWC;SAHVD;;EAMTtB,MACEiB,QACAC,QACAO,MACAtB,OACAC;UACMsB,eAAeT,OAAOS,aAAavB;UAEnCwB,QAAQV,OAAOjB,MACnBkB,QACA,KAAKK,iBAAiB,SAASG,eAAeA,eAAe,GAC7DtB;UAEIC,WAAWC,gBAAKmB,KAAKX,KAAKR,qBAAUY,OAAOU;UAC3CrB,KAAKD,sBAAWD;QAClBG;MACFC,UAAU;MACVoB,UAAU,KAAKP;MACfG;MACAE;MACAb,KAAKT;MACLU,QAAQR;;WAGHC;;;;AAIJ;EAELR,MAAMiB,QACJC,QACAf,OACAC;UAEMC,WAAWC,qBAAUH;UACrBI,KAAKD,sBAAWD;IAGtBa,OAAOG,YAAY;UACbS,OAAOb,OAAOjB,MAAMkB,QAAQ,GAAGd;QACjC2B,QAAQD;QAER3B,MAAMS,QAAQ;YACVoB,OAAOf,OAAOjB,MAAMkB,QAAQ,GAAGd;MACrC2B,KAAKE,KAAKD;;IAEZd,OAAOG,YAAY;SAIda,uBAAS/B,MAAMS;gBACRN,0CAERD;;QAIAG;MACFC,UAAU;MACV0B,MAAMhC,MAAMS;MACZmB,MAAMA;MACNjB,KAAKT;MACLU,QAAQR;;WAGHC;;;;AAIJ;EACLR,MAAMiB,QACJC,QACAf,OACAC;UACMC,WAAWC,qBAAUH;UACrBI,KAAKD,sBAAWD;UAIhB+B,YAAYnB,OAAOjB,MAAMkB,QAAQ,GAAGd;UACpCiC,aAAapB,OAAOjB,MAAMkB,QAAQ,GAAGd;IAC3Cc,OAAOG,YAAY;UACbiB,YAAYrB,OAAOjB,MAAMkB,QAAQ,GAAGd;QAEtCI;MACFC,UAAU;MACV8B;QAAQH,WAAWA;QAAWC,YAAYA;;MAC1CC,WAAWA;MACXxB,KAAKT;MACLU,QAAQR;;WAGHC;;;;AAIJ;EACLR,MAAMiB,QACJC,QACAf,OACAC;UAEMC,WAAWC,qBAAUH;UACrBI,KAAKD,sBAAWD;IAEtBa,OAAOG,YAAY;UACbmB,aAAavB,OAAOjB,MAAMkB,QAAQ,GAAGd;IAG3CA,OAAOD,MAAMS,QAAQL;QAEjBC;MACFC,UAAU;MACV0B,MAAMhC,MAAMS;MACZ4B,YAAYA;MACZ1B,KAAKT;MACLU,QAAQR;;WAGHC;;;;AAIJ;EACLR,MAAMiB,QACJC,QACAf,OACAC;UAEMC,WAAWC,qBAAUH;UACrBI,KAAKD,sBAAWD;UAGhBoC,eAAerC,OAAOD,MAAMS;SAI7B6B;YACGC,kBAAkBC;aACjBD,YAAY1C,MAAMiB,QAAQC,QAAQf,OAAOC;;UAG5CI;QACFC,UAAU;QACV0B,MAAMhC,MAAMS;QACZ6B,cAAcA;QACd3B,KAAKT;QACLU,QAAQR;;aAGHC\",\"sourcesContent\":[\"import { TokenStream } from './tokenstream';\\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\\nimport * as AST from './ast';\\nimport { AbstractParser } from './parser';\\nimport {ParseError, token2pos, join, pos2string} from './position';\\nimport {builtins} from './typechecker';\\n\\n// All parselets add their nodeType to the AST\\nexport interface InitialParselet {\\n  parse(parser: AbstractParser,\\n        tokens: TokenStream, token: Token,\\n        varMap: {[key: string]: string}): AST.Node;\\n}\\n\\n\\nexport class NumberParselet implements InitialParselet {\\n  parse(_parser: AbstractParser,\\n        _tokens: TokenStream,\\n        token: Token,\\n        varMap: {[key: string]: string}) {\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n\\n    let newNode = {\\n      nodeType: 'Number' as 'Number',\\n      value: parseFloat(token.text),\\n      valueType: 'number' as 'number',\\n      pos: position,\\n      nodeId: id\\n    };\\n    \\n    return newNode;\\n  }\\n}\\n\\nexport class BooleanParselet implements InitialParselet {\\n  constructor(private value: boolean) {}\\n  parse(_parser: AbstractParser,\\n        _tokens: TokenStream, token: Token,\\n        varMap: {[key: string]: string}) {\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n\\n    let newNode = {\\n      nodeType: 'Boolean' as 'Boolean',\\n      value: this.value,\\n      valueType: 'boolean' as 'boolean',\\n      pos: position,\\n      nodeId: id\\n    };\\n\\n    return newNode;\\n  }\\n}\\n\\nexport class ParenParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    _token: Token,\\n    varMap: {[key: string]: string}) {\\n\\n    const exp = parser.parse(tokens, 0, varMap);\\n    tokens.expectToken(')');\\n\\n    return exp;\\n  }\\n}\\n\\nexport abstract class ConsequentParselet {\\n  constructor(\\n    readonly tokenType: TokenType,\\n    readonly associativity: 'left' | 'right'\\n  ) {}\\n  abstract parse(\\n    parser: AbstractParser,\\n    tokens: TokenStream,\\n    left: AST.Node,\\n    token: Token,\\n    varMap: {[key: string]: string}): AST.Node;\\n}\\n\\nexport class BinaryOperatorParselet extends ConsequentParselet {\\n  constructor(\\n    public tokenType: BinaryOperationTokenType,\\n    associativity: 'left' | 'right'\\n  ) {\\n    super(tokenType, associativity);\\n  }\\n\\n  parse(\\n    parser: AbstractParser,\\n    tokens: TokenStream,\\n    left: AST.Node,\\n    token: Token,\\n    varMap: {[key: string]: string}): AST.Node {\\n    const bindingPower = parser.bindingPower(token);\\n\\n    const right = parser.parse(\\n      tokens,\\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\\n      varMap\\n    );\\n    const position = join(left.pos, token2pos(tokens.last()));\\n    const id = pos2string(position);\\n    let newNode = {\\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\\n      operator: this.tokenType,\\n      left,\\n      right,\\n      pos: position,\\n      nodeId: id\\n    };\\n\\n    return newNode;\\n  }\\n}\\n\\nexport class FunctionParselet implements InitialParselet {\\n  \\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string}) {\\n\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n\\n    // All functions have at least one argument inside parens\\n    tokens.expectToken('(');\\n    const arg1 = parser.parse(tokens, 0, varMap);  // allow for one argument\\n    let args = [arg1];\\n    // ParseOrderedPair is the only function that takes two arguments\\n    if (token.text == \\\"ParseOrderedPair\\\") {\\n      const arg2 = parser.parse(tokens, 0, varMap);  // allow for second argument\\n      args.push(arg2);\\n    }\\n    tokens.expectToken(')');\\n\\n    // If this is a builtin function, check it has the correct argument types\\n    // otherwise throw an error (we don't know what this function is)\\n    if (!builtins[token.text]) {\\n      throw new ParseError(\\n        `Unknown Function`,\\n        position,\\n      );\\n    }\\n\\n    let newNode = {\\n      nodeType: 'Function' as 'Function',\\n      name: token.text,\\n      args: args,\\n      pos: position,\\n      nodeId: id\\n    };\\n\\n    return newNode;\\n  }\\n}\\n\\nexport class ChooseParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string}) {\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n\\n    // Choose nodes include two nodes followed by the keyword \\\"OTHERWISE\\\" (CHOOSE2)\\n    // which is followed by another node\\n    const predicate = parser.parse(tokens, 0, varMap);\\n    const consequent = parser.parse(tokens, 0, varMap);\\n    tokens.expectToken('CHOOSE2');\\n    const otherwise = parser.parse(tokens, 0, varMap);\\n\\n    let newNode = {\\n      nodeType: 'Choose' as 'Choose',\\n      case: { predicate: predicate, consequent: consequent },\\n      otherwise: otherwise,\\n      pos: position,\\n      nodeId: id\\n    };\\n\\n    return newNode;\\n  }\\n}\\n\\nexport class VariableAssignmentParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string}) {\\n\\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n    \\n    tokens.expectToken('=');\\n    const assignment = parser.parse(tokens, 0, varMap);\\n\\n    // Save the variable and its assignment in the variable map\\n    varMap[token.text] = id;\\n\\n    let newNode = {\\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\\n      name: token.text,\\n      assignment: assignment,\\n      pos: position,\\n      nodeId: id\\n    };\\n\\n    return newNode;\\n  }\\n}\\n\\nexport class IdentifierParselet implements InitialParselet {\\n  parse(parser: AbstractParser,\\n    tokens: TokenStream,\\n    token: Token,\\n    varMap: {[key: string]: string}) {\\n    \\n    const position = token2pos(token);\\n    const id = pos2string(position);\\n\\n    // Look up the node this identifier was assigned to\\n    const assignmentId = varMap[token.text];\\n\\n    // An identifier must be previously assigned,\\n    // otherwise we call the variable assignment parselet\\n    if (!assignmentId) {\\n      const varParselet = new VariableAssignmentParselet();\\n      return varParselet.parse(parser, tokens, token, varMap);\\n    }\\n    else {\\n      let newNode = {\\n        nodeType: 'Identifier' as 'Identifier',\\n        name: token.text,\\n        assignmentId: assignmentId,\\n        pos: position,\\n        nodeId: id\\n      };\\n      \\n      return newNode;\\n    }\\n  }\\n}\\n\"]}"}