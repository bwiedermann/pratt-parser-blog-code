{"contents":"exports.__esModule = true;\nvar lang_json_1 = __fusereq(27);\nvar fold_1 = __fusereq(28);\nvar visualization_1 = __fusereq(29);\nvar basic_setup_1 = __fusereq(4);\nvar lint_1 = __fusereq(5);\nvar parseResults_1 = __fusereq(8);\nfunction updateDevTools(tr) {\n  const results = tr.state.field(parseResults_1.parseResults);\n  const astJSON = JSON.stringify(results.nodes, null, 2);\n  replaceContents(astViewer, astJSON);\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\n  replaceContents(dependsViewer, dependsJSON);\n  visualization_1.visualize(results.nodes);\n}\nexports.updateDevTools = updateDevTools;\nfunction newJSONViewerState() {\n  return basic_setup_1.EditorState.create({\n    extensions: [basic_setup_1.basicSetup, lang_json_1.json(), lint_1.linter(lang_json_1.jsonParseLinter()), basic_setup_1.EditorView.editable.of(false)]\n  });\n}\nlet astViewer = new basic_setup_1.EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#ast-json\")\n});\nlet dependsViewer = new basic_setup_1.EditorView({\n  state: newJSONViewerState(),\n  parent: document.querySelector(\"#depends-json\")\n});\nfunction replaceContents(editor, contents) {\n  const update = editor.state.update({\n    changes: {\n      from: 0,\n      to: editor.state.doc.length,\n      insert: contents\n    }\n  });\n  editor.update([update]);\n  fold_1.foldAll(editor);\n}\n","sourceMap":"{\"version\":3,\"sources\":[\"src/devTools.ts\"],\"names\":[\"tr\",\"results\",\"state\",\"field\",\"parseResults_1\",\"astJSON\",\"JSON\",\"stringify\",\"nodes\",\"replaceContents\",\"astViewer\",\"dependsJSON\",\"dependsMap\",\"dependsViewer\",\"visualization_1\",\"basic_setup_1\",\"create\",\"extensions\",\"lang_json_1\",\"lint_1\",\"editable\",\"of\",\"newJSONViewerState\",\"parent\",\"document\",\"querySelector\",\"editor\",\"contents\",\"update\",\"changes\",\"from\",\"to\",\"doc\",\"length\",\"insert\",\"fold_1\"],\"mappings\":\";;;;;;;AAWQ,wBAAwBA;QACxBC,UAAUD,GAAGE,MAAMC,MAAMC;QAGzBC,UAAUC,KAAKC,UAAUN,QAAQO,OAAO,MAAM;EACpDC,gBAAgBC,WAAWL;QAGrBM,cAAcL,KAAKC,UAAUN,QAAQW,YAAY,MAAM;EAC7DH,gBAAgBI,eAAeF;EAG/BG,0BAAUb,QAAQO;;;AAIpB;SACSO,0BAAYC;IACjBC,aACEF,0BACAG,oBACAC,cAAOD,gCACPH,yBAAWK,SAASC,GAAG;;;IAMzBX,gBAAgBK;EAClBb,OAAOoB;EACPC,QAAQC,SAASC,cAAc;;IAI7BZ,oBAAoBE;EACtBb,OAAOoB;EACPC,QAAQC,SAASC,cAAc;;AAMjC,yBAAyBC,QAAoBC;QACrCC,SAASF,OAAOxB,MAAM0B;IAC1BC;MACEC,MAAM;MACNC,IAAIL,OAAOxB,MAAM8B,IAAIC;MACrBC,QAAQP;;;EAGZD,OAAOE,QAAQA;EACfO,eAAQT\",\"sourcesContent\":[\"import {Transaction} from \\\"@codemirror/state\\\"\\r\\nimport {json, jsonParseLinter} from \\\"@codemirror/lang-json\\\"\\r\\nimport {foldAll} from \\\"@codemirror/fold\\\"\\r\\nimport { visualize } from \\\"./visualization\\\"\\r\\nimport {EditorState, EditorView, basicSetup} from \\\"@codemirror/basic-setup\\\"\\r\\nimport {linter} from \\\"@codemirror/lint\\\"\\r\\nimport { parseResults } from \\\"./parseResults\\\"\\r\\n\\r\\n/**\\r\\n * Given a transaction, update the developer tools\\r\\n */\\r\\n export function updateDevTools(tr: Transaction) {\\r\\n  const results = tr.state.field(parseResults)\\r\\n\\r\\n  // Display JSON for AST\\r\\n  const astJSON = JSON.stringify(results.nodes, null, 2)\\r\\n  replaceContents(astViewer, astJSON);\\r\\n\\r\\n  // Display JSON for depends map\\r\\n  const dependsJSON = JSON.stringify(results.dependsMap, null, 2);\\r\\n  replaceContents(dependsViewer, dependsJSON);\\r\\n\\r\\n  // Draw the AST\\r\\n  visualize(results.nodes);\\r\\n}\\r\\n\\r\\n// Configuration for a read-only JSON viewer with folding, line numbers, etc.\\r\\nfunction newJSONViewerState(): EditorState {\\r\\n  return EditorState.create({\\r\\n    extensions: [\\r\\n      basicSetup,\\r\\n      json(),\\r\\n      linter(jsonParseLinter()),\\r\\n      EditorView.editable.of(false),\\r\\n    ],\\r\\n  })\\r\\n}\\r\\n\\r\\n// JSON viewer for AST\\r\\nlet astViewer = new EditorView({\\r\\n  state: newJSONViewerState(),\\r\\n  parent: document.querySelector(\\\"#ast-json\\\"),\\r\\n});\\r\\n\\r\\n// JSON viewer for depends map\\r\\nlet dependsViewer = new EditorView({\\r\\n  state: newJSONViewerState(),\\r\\n  parent: document.querySelector(\\\"#depends-json\\\"),\\r\\n});\\r\\n\\r\\n/**\\r\\n * Replace the entire contents of an editor\\r\\n */\\r\\nfunction replaceContents(editor: EditorView, contents: string) {\\r\\n  const update = editor.state.update({\\r\\n    changes: {\\r\\n      from: 0,\\r\\n      to: editor.state.doc.length,\\r\\n      insert: contents\\r\\n    }\\r\\n  });\\r\\n  editor.update([update]);\\r\\n  foldAll(editor);  // By default, fold all levels\\r\\n}\\r\\n\"]}"}