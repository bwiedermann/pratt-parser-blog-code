{"contents":"var _1_;\nexports.__esModule = true;\nvar d3_hierarchy_1 = __fusereq(46);\nvar d3_selection_1 = __fusereq(47);\nvar d3_shape_1 = __fusereq(48);\nfunction visualize(nodes) {\n  const margin = {\n    top: 20,\n    right: 90,\n    bottom: 20,\n    left: 90\n  };\n  const height = 300 - margin.top - margin.bottom;\n  const width = 500 - margin.left - margin.right;\n  d3_selection_1.select('#viz').selectAll('svg').remove();\n  const viz = d3_selection_1.select('#viz').append('svg');\n  viz.selectAll('*').remove();\n  viz.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);\n  const root = {\n    nodeType: 'Program',\n    children: nodes\n  };\n  const treemap = d3_hierarchy_1.tree().size([height, width]).separation(() => 1);\n  const treelayout = d3_hierarchy_1.hierarchy(root, getChildren);\n  const tree = treemap(treelayout);\n  const g = viz.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`).attr(\"font-family\", \"sans-serif\").attr(\"font-size\", 12);\n  const link = g.selectAll('path.link').data(tree.links());\n  const linkEnter = link.enter().append('path', 'g');\n  linkEnter.attr('class', 'link').attr('fill', 'none').attr(\"stroke-opacity\", 0.4).attr('stroke', '#555').attr(\"stroke-width\", 1.5).attr('d', connection);\n  const node = g.selectAll('g.node').data(tree.descendants());\n  const nodeEnter = node.enter().append('g');\n  nodeEnter.attr('class', 'node').attr('transform', d => `translate(${d.y}, ${d.x})`);\n  nodeEnter.append('circle').attr(\"fill\", getFill).attr('r', '2.5').attr('stroke-width', 10);\n  nodeEnter.append('text').attr(\"dy\", \"0.31em\").attr(\"x\", d => d.children ? -8 : 8).attr(\"text-anchor\", d => d.children ? \"end\" : \"start\").attr('fill', d => isUndefined(d) ? '#fc6666' : 'black').style(\"fill-opacity\", 1).call(getTextBox).datum(d => d.data).text(getText).clone(true).lower().attr(\"stroke\", \"white\");\n  nodeEnter.filter((d, i) => isUndefined(d)).call(yep).insert('rect', 'text').attr(\"x\", function (d) {\n    return d.bbox.x;\n  }).attr(\"y\", function (d) {\n    return d.bbox.y;\n  }).attr(\"width\", function (d) {\n    return d.bbox.width;\n  }).attr(\"height\", function (d) {\n    return d.bbox.height;\n  }).attr('fill', 'black');\n}\nexports.visualize = visualize;\nfunction getTextBox(selection) {\n  selection.each(function (d) {\n    d.bbox = this.getBBox();\n  });\n}\nfunction yep(selection) {}\nconst connection = d3_shape_1.linkHorizontal().x(d => d.y).y(d => d.x);\nfunction getChildren(node) {\n  var children = [];\n  switch (node.nodeType) {\n    case 'Program':\n      node = node;\n      children = node.children;\n      break;\n    case 'Function':\n      node = node;\n      children = node.args;\n      break;\n    case 'Choose':\n      node = node;\n      children = [node.case.predicate, node.case.consequent, node.otherwise];\n      break;\n    case 'BinaryOperation':\n      node = node;\n      children = [node.left, node.right];\n      break;\n    case 'VariableAssignment':\n      node = node;\n      children = [node.assignment];\n      break;\n    default:\n      children = [];\n  }\n  return children;\n}\nfunction getText(node) {\n  var text = \"\";\n  switch (node.nodeType) {\n    case 'Program':\n      text = '';\n      break;\n    case 'Function':\n      node = node;\n      text = node.name;\n      break;\n    case 'Choose':\n      text = \"choose\";\n      break;\n    case 'BinaryOperation':\n      node = node;\n      text = node.operator;\n      break;\n    case 'VariableAssignment':\n      node = node;\n      text = node.name;\n      break;\n    case 'Identifier':\n      node = node;\n      text = node.name;\n      break;\n    case 'Number':\n      node = node;\n      text = node.value.toString();\n      break;\n    case 'Boolean':\n      node = node;\n      text = node.value.toString();\n      break;\n    default:\n      text = \"\";\n  }\n  return text;\n}\nfunction getFill(node) {\n  if (isUndefined(node)) {\n    return '#fc6666';\n  }\n  if (node.children) {\n    return '#555';\n  } else {\n    return '#999';\n  }\n}\nfunction isUndefined(d) {\n  return ((_1_ = d.data.outputType) === null || _1_ === void 0 ? void 0 : _1_.status) === 'Maybe-Undefined';\n}\n","sourceMap":"{\"version\":3,\"sources\":[\"src/visualization.ts\"],\"names\":[\"nodes\",\"margin\",\"top\",\"right\",\"bottom\",\"left\",\"height\",\"width\",\"select\",\"selectAll\",\"remove\",\"viz\",\"append\",\"attr\",\"root\",\"nodeType\",\"children\",\"treemap\",\"tree\",\"size\",\"separation\",\"treelayout\",\"hierarchy\",\"getChildren\",\"g\",\"link\",\"data\",\"links\",\"linkEnter\",\"enter\",\"connection\",\"node\",\"descendants\",\"nodeEnter\",\"d\",\"y\",\"x\",\"getFill\",\"isUndefined\",\"style\",\"call\",\"getTextBox\",\"datum\",\"text\",\"getText\",\"clone\",\"lower\",\"filter\",\"i\",\"yep\",\"insert\",\"bbox\",\"selection\",\"each\",\"getBBox\",\"linkHorizontal\",\"args\",\"case\",\"predicate\",\"consequent\",\"otherwise\",\"assignment\",\"name\",\"operator\",\"value\",\"toString\",\"outputType\",\"status\"],\"mappings\":\"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\",\"sourcesContent\":[\"import * as d3Hierarchy from 'd3-hierarchy';\\r\\nimport * as d3Select from 'd3-selection';\\r\\nimport * as d3shape from 'd3-shape';\\r\\nimport * as AST from './ast';\\r\\n\\r\\nexport function visualize(nodes: AST.Node[]): void {\\r\\n\\r\\n    // Placement and size of tree\\r\\n    const margin = {top: 20, right: 90, bottom: 20, left: 90};\\r\\n    const height = 300 - margin.top - margin.bottom;\\r\\n    const width  = 500 - margin.left - margin.right;\\r\\n  \\r\\n    // Make the svg\\r\\n    d3Select.select('#viz').selectAll('svg').remove();\\r\\n    const viz = d3Select.select('#viz').append('svg');\\r\\n  \\r\\n    // Remove existing visualizations\\r\\n    viz.selectAll('*').remove();\\r\\n  \\r\\n    // Add a new visualization\\r\\n    viz.attr('width', width + margin.left + margin.right)\\r\\n       .attr('height', height + margin.top + margin.bottom);\\r\\n\\r\\n    const root: Node = {nodeType: 'Program', children: nodes}\\r\\n\\r\\n    // Visualize all the statements\\r\\n    // for (var statement of nodes) {\\r\\n\\r\\n      // Create the tree and layout\\r\\n      const treemap = d3Hierarchy.tree()\\r\\n        .size([height, width])\\r\\n        .separation(() => 1);\\r\\n      const treelayout = d3Hierarchy.hierarchy(root, getChildren);\\r\\n      const tree = treemap(treelayout);\\r\\n  \\r\\n      // Add a new graph element for this statement\\r\\n      const g = viz.append('g')\\r\\n                  //  .attr(\\\"transform\\\", `translate(${root.dy / 3},${root.dx - x0})`);\\r\\n                   .attr('transform', `translate(${margin.left}, ${margin.top})`)\\r\\n                   .attr(\\\"font-family\\\", \\\"sans-serif\\\")\\r\\n                   .attr(\\\"font-size\\\", 12)\\r\\n               \\r\\n      // Edge updates\\r\\n      const link = g.selectAll('path.link').data(tree.links());\\r\\n\\r\\n      // Edge entry\\r\\n      const linkEnter = link.enter().append('path', 'g');\\r\\n        \\r\\n      // general edge attributes\\r\\n      linkEnter.attr('class', 'link')\\r\\n               .attr('fill', 'none')\\r\\n               .attr(\\\"stroke-opacity\\\", 0.4)\\r\\n               .attr('stroke', '#555')\\r\\n               .attr(\\\"stroke-width\\\", 1.5)\\r\\n               .attr('d', connection);\\r\\n\\r\\n        \\r\\n      // Node updates\\r\\n      const node = g.selectAll('g.node').data(tree.descendants());\\r\\n\\r\\n      // Node entry\\r\\n      const nodeEnter = node.enter().append('g');\\r\\n\\r\\n      // general node attributes\\r\\n      nodeEnter.attr('class', 'node')\\r\\n               .attr('transform', d => `translate(${d.y}, ${d.x})`);\\r\\n\\r\\n      nodeEnter.append('circle')\\r\\n               .attr(\\\"fill\\\", getFill)\\r\\n               .attr('r', '2.5')\\r\\n               .attr('stroke-width', 10);\\r\\n\\r\\n      // add text\\r\\n      nodeEnter.append('text')\\r\\n                // .attr('dy', '-10px')\\r\\n                .attr(\\\"dy\\\", \\\"0.31em\\\")\\r\\n                .attr(\\\"x\\\", d => d.children ? -8 : 8)\\r\\n                .attr(\\\"text-anchor\\\", d => d.children ? \\\"end\\\" : \\\"start\\\")\\r\\n                .attr('fill', d => isUndefined(d) ? '#fc6666' : 'black')\\r\\n                .style(\\\"fill-opacity\\\", 1)\\r\\n                .call(getTextBox)\\r\\n                .datum(d => d.data)\\r\\n                .text(getText)\\r\\n          .clone(true).lower()\\r\\n            .attr(\\\"stroke\\\", \\\"white\\\");\\r\\n    \\r\\n      // Highlight undefined -- not working\\r\\n      // Inspired in part by https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\\r\\n      nodeEnter.filter((d,i) => isUndefined(d))\\r\\n        .call(yep)\\r\\n        .insert('rect', 'text')\\r\\n        .attr(\\\"x\\\", function(d){return d.bbox.x})\\r\\n        .attr(\\\"y\\\", function(d){return d.bbox.y})\\r\\n        .attr(\\\"width\\\", function(d){return d.bbox.width})\\r\\n        .attr(\\\"height\\\", function(d){return d.bbox.height}) \\r\\n        .attr('fill', 'black')             \\r\\n    // }\\r\\n}\\r\\n\\r\\n// From https://stackoverflow.com/questions/32026194/how-to-add-a-background-color-to-d3-text-elements\\r\\nfunction getTextBox(selection : any) {\\r\\n  selection.each(function(d : any){d.bbox = this.getBBox();})\\r\\n}\\r\\n\\r\\nfunction yep(selection : any) {\\r\\n  // console.log(selection.nodes().map((d)=>d.bbox));\\r\\n}\\r\\n\\r\\n\\r\\nconst connection = d3shape.linkHorizontal().x(d => d.y).y(d => d.x)\\r\\n\\r\\nfunction getChildren(node: AST.Node): AST.Node[] {\\r\\n  var children: AST.Node[] = [];\\r\\n  switch (node!.nodeType) {\\r\\n    case 'Program':\\r\\n      node = node as AST.ProgramNode;\\r\\n      children = node!.children;\\r\\n      break;\\r\\n    case 'Function':\\r\\n      node = node as AST.FunctionNode;\\r\\n      children = node!.args;\\r\\n      break;\\r\\n    case 'Choose':\\r\\n      node = node as AST.ChooseNode;\\r\\n      children = [node!.case.predicate, node!.case.consequent, node!.otherwise];\\r\\n      break;\\r\\n    case 'BinaryOperation':\\r\\n      node = node as AST.BinaryOperationNode;\\r\\n      children = [node!.left, node.right];\\r\\n      break;\\r\\n    case 'VariableAssignment':\\r\\n      node = node as AST.VariableAssignmentNode;\\r\\n      children = [node!.assignment];\\r\\n      break;\\r\\n    default:\\r\\n      children = [];\\r\\n    }\\r\\n\\r\\n  return children;\\r\\n}\\r\\n\\r\\nfunction getText(node: AST.Node) {\\r\\n  var text = \\\"\\\";\\r\\n  switch (node!.nodeType) {\\r\\n    case 'Program':\\r\\n      text = '';\\r\\n      break;\\r\\n    case 'Function':\\r\\n      node = node as AST.FunctionNode;\\r\\n      text = node.name;\\r\\n      break;\\r\\n    case 'Choose':\\r\\n      text = \\\"choose\\\";\\r\\n      break;\\r\\n    case 'BinaryOperation':\\r\\n      node = node as AST.BinaryOperationNode;\\r\\n      text = node.operator;\\r\\n      break;\\r\\n    case 'VariableAssignment':\\r\\n      node = node as AST.VariableAssignmentNode;\\r\\n      text = node.name;\\r\\n      break;\\r\\n    case 'Identifier':\\r\\n      node = node as AST.IdentifierNode;\\r\\n      text = node.name;\\r\\n      break;\\r\\n    case 'Number':  \\r\\n      node = node as AST.NumberNode;\\r\\n      text = node.value.toString();\\r\\n      break;\\r\\n    case 'Boolean':\\r\\n      node = node as AST.BooleanNode;\\r\\n      text = node.value.toString();\\r\\n      break;\\r\\n    default:\\r\\n      text = \\\"\\\";\\r\\n  }\\r\\n\\r\\n  return text;\\r\\n}\\r\\n\\r\\nfunction getFill(node : AST.ProgramNode): string {\\r\\n  if (isUndefined(node)) {\\r\\n    return '#fc6666'\\r\\n  }\\r\\n  if (node.children) {\\r\\n    return '#555'\\r\\n  } else {\\r\\n    return '#999'\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction isUndefined(d : any) {\\r\\n  return d.data.outputType?.status === 'Maybe-Undefined'\\r\\n}\"]}"}