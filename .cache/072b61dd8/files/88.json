{"contents":"exports.__esModule = true;\nvar d3_path_1 = __fusereq(178);\nvar array_js_1 = __fusereq(179);\nvar constant_js_1 = __fusereq(180);\nvar constant_js_1d = __fuse.dt(constant_js_1);\nvar point_js_1 = __fusereq(181);\nvar pointRadial_js_1 = __fusereq(87);\nvar pointRadial_js_1d = __fuse.dt(pointRadial_js_1);\nfunction linkSource(d) {\n  return d.source;\n}\nfunction linkTarget(d) {\n  return d.target;\n}\nfunction link(curve) {\n  var source = linkSource, target = linkTarget, x = point_js_1.x, y = point_js_1.y, context = null;\n  function link() {\n    var buffer, argv = array_js_1.slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);\n    if (!context) context = buffer = d3_path_1.path();\n    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\n    if (buffer) return (context = null, buffer + \"\" || null);\n  }\n  link.source = function (_) {\n    return arguments.length ? (source = _, link) : source;\n  };\n  link.target = function (_) {\n    return arguments.length ? (target = _, link) : target;\n  };\n  link.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant_js_1d.default(+_), link) : x;\n  };\n  link.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant_js_1d.default(+_), link) : y;\n  };\n  link.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, link) : context;\n  };\n  return link;\n}\nfunction curveHorizontal(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\n}\nfunction curveVertical(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\n}\nfunction curveRadial(context, x0, y0, x1, y1) {\n  var p0 = pointRadial_js_1d.default(x0, y0), p1 = pointRadial_js_1d.default(x0, y0 = (y0 + y1) / 2), p2 = pointRadial_js_1d.default(x1, y0), p3 = pointRadial_js_1d.default(x1, y1);\n  context.moveTo(p0[0], p0[1]);\n  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\nfunction linkHorizontal() {\n  return link(curveHorizontal);\n}\nexports.linkHorizontal = linkHorizontal;\nfunction linkVertical() {\n  return link(curveVertical);\n}\nexports.linkVertical = linkVertical;\nfunction linkRadial() {\n  var l = link(curveRadial);\n  (l.angle = l.x, delete l.x);\n  (l.radius = l.y, delete l.y);\n  return l;\n}\nexports.linkRadial = linkRadial;\n"}