{"contents":"exports.__esModule = true;\nvar accessors_js_1 = __fusereq(125);\nvar index_js_1 = __fusereq(51);\nvar preroot = {\n  depth: -1\n}, ambiguous = {};\nfunction defaultId(d) {\n  return d.id;\n}\nfunction defaultParentId(d) {\n  return d.parentId;\n}\nfunction __DefaultExport__() {\n  var id = defaultId, parentId = defaultParentId;\n  function stratify(data) {\n    var nodes = Array.from(data), n = nodes.length, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = new Map();\n    for (i = 0; i < n; ++i) {\n      (d = nodes[i], node = nodes[i] = new index_js_1.Node(d));\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = node.id = nodeId;\n        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n      }\n      if ((nodeId = parentId(d, i, data)) != null && (nodeId += \"\")) {\n        node.parent = nodeId;\n      }\n    }\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (nodeId = node.parent) {\n        parent = nodeByKey.get(nodeId);\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node); else parent.children = [node];\n        node.parent = parent;\n      } else {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      }\n    }\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function (node) {\n      node.depth = node.parent.depth + 1;\n      --n;\n    }).eachBefore(index_js_1.computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n    return root;\n  }\n  stratify.id = function (x) {\n    return arguments.length ? (id = accessors_js_1.required(x), stratify) : id;\n  };\n  stratify.parentId = function (x) {\n    return arguments.length ? (parentId = accessors_js_1.required(x), stratify) : parentId;\n  };\n  return stratify;\n}\nexports.default = __DefaultExport__;\n"}