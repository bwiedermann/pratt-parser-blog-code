{"contents":"var _1_, _2_;\nexports.__esModule = true;\nvar position_1 = __fusereq(44);\nvar findBase_1 = __fusereq(49);\nclass NumberParselet {\n  parse(_parser, _tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'Number',\n      value: parseFloat(token.text),\n      outputType: {\n        status: 'Definitely',\n        valueType: 'number'\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.NumberParselet = NumberParselet;\nclass BooleanParselet {\n  constructor(value) {\n    this.value = value;\n  }\n  parse(_parser, _tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'Boolean',\n      value: this.value,\n      outputType: {\n        status: 'Definitely',\n        valueType: 'boolean'\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.BooleanParselet = BooleanParselet;\nclass ParenParselet {\n  parse(parser, tokens, _token, varMap, registeredNodes, dependsMap) {\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken(')');\n    return exp;\n  }\n}\nexports.ParenParselet = ParenParselet;\nclass ConsequentParselet {\n  constructor(tokenType, associativity) {\n    this.tokenType = tokenType;\n    this.associativity = associativity;\n  }\n}\nexports.ConsequentParselet = ConsequentParselet;\nclass BinaryOperatorParselet extends ConsequentParselet {\n  constructor(tokenType, associativity) {\n    super(tokenType, associativity);\n    this.tokenType = tokenType;\n  }\n  parse(parser, tokens, left, token, varMap, registeredNodes, dependsMap) {\n    const bindingPower = parser.bindingPower(token);\n    const right = parser.parse(tokens, this.associativity == 'left' ? bindingPower : bindingPower - 1, varMap, registeredNodes, dependsMap);\n    const position = position_1.join(left.pos, position_1.token2pos(tokens.last()));\n    const id = position_1.pos2string(position);\n    let newNode = {\n      nodeType: 'BinaryOperation',\n      operator: this.tokenType,\n      left,\n      right,\n      outputType: undefined,\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.BinaryOperatorParselet = BinaryOperatorParselet;\nclass FunctionParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    tokens.expectToken('(');\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    let args = [arg1];\n    if (token.text == \"ParseOrderedPair\") {\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n      args.push(arg2);\n    }\n    tokens.expectToken(')');\n    let newNode = {\n      nodeType: 'Function',\n      name: token.text,\n      args: args,\n      outputType: {\n        status: 'Maybe-Undefined',\n        valueType: undefined\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.FunctionParselet = FunctionParselet;\nclass ChooseParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    tokens.expectToken('CHOOSE2');\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    let newNode = {\n      nodeType: 'Choose',\n      case: {\n        predicate: predicate,\n        consequent: consequent\n      },\n      otherwise: otherwise,\n      outputType: {\n        status: 'Maybe-Undefined',\n        valueType: undefined\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    return newNode;\n  }\n}\nexports.ChooseParselet = ChooseParselet;\nclass VariableAssignmentParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    tokens.expectToken('=');\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\n    varMap[token.text] = id;\n    let newNode = {\n      nodeType: 'VariableAssignment',\n      name: token.text,\n      assignment: assignment,\n      outputType: {\n        status: \"Maybe-Undefined\",\n        valueType: (_2_ = (_1_ = assignment) === null || _1_ === void 0 ? void 0 : _1_.outputType) === null || _2_ === void 0 ? void 0 : _2_.valueType\n      },\n      pos: position,\n      nodeId: id\n    };\n    registeredNodes[id] = newNode;\n    dependsMap[id] = findBase_1.findBases(assignment, dependsMap);\n    return newNode;\n  }\n}\nexports.VariableAssignmentParselet = VariableAssignmentParselet;\nclass IdentifierParselet {\n  parse(parser, tokens, token, varMap, registeredNodes, dependsMap) {\n    const position = position_1.token2pos(token);\n    const id = position_1.pos2string(position);\n    const assignmentId = varMap[token.text];\n    if (!assignmentId) {\n      const varParselet = new VariableAssignmentParselet();\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);\n    } else {\n      let newNode = {\n        nodeType: 'Identifier',\n        name: token.text,\n        assignmentId: assignmentId,\n        outputType: {\n          status: \"Maybe-Undefined\",\n          valueType: undefined\n        },\n        pos: position,\n        nodeId: id\n      };\n      registeredNodes[id] = newNode;\n      return newNode;\n    }\n  }\n}\nexports.IdentifierParselet = IdentifierParselet;\n","sourceMap":"{\"version\":3,\"sources\":[\"src/parselet.ts\"],\"names\":[\"parse\",\"_parser\",\"_tokens\",\"token\",\"varMap\",\"registeredNodes\",\"dependsMap\",\"position\",\"position_1\",\"id\",\"newNode\",\"nodeType\",\"value\",\"parseFloat\",\"text\",\"outputType\",\"status\",\"valueType\",\"pos\",\"nodeId\",\"constructor\",\"parser\",\"tokens\",\"_token\",\"exp\",\"expectToken\",\"tokenType\",\"associativity\",\"ConsequentParselet\",\"left\",\"bindingPower\",\"right\",\"last\",\"operator\",\"undefined\",\"arg1\",\"args\",\"arg2\",\"push\",\"name\",\"predicate\",\"consequent\",\"otherwise\",\"case\",\"assignment\",\"findBase_1\",\"assignmentId\",\"varParselet\",\"VariableAssignmentParselet\"],\"mappings\":\";;;;AAgBO;EACLA,MAAMC,SACAC,SACAC,OACAC,QACAC,iBACAC;UACEC,WAAWC,qBAAUL;UACrBM,KAAKD,sBAAWD;QAElBG;MACFC,UAAU;MACVC,OAAOC,WAAWV,MAAMW;MACxBC;QAAcC,QAAQ;QACRC,WAAW;;MACzBC,KAAKX;MACLY,QAAQV;;IAEVJ,gBAAgBI,MAAMC;WACfA;;;;AAIJ;EACLU,YAAoBR;SAAAA;;EACpBZ,MAAMC,SACAC,SAAsBC,OACtBC,QACAC,iBACAC;UACEC,WAAWC,qBAAUL;UACrBM,KAAKD,sBAAWD;QAClBG;MACFC,UAAU;MACVC,OAAO,KAAKA;MACZG;QAAcC,QAAQ;QACRC,WAAW;;MACzBC,KAAKX;MACLY,QAAQV;;IAEVJ,gBAAgBI,MAAMC;WACfA;;;;AAIJ;EACLV,MAAMqB,QACJC,QACAC,QACAnB,QACAC,iBACAC;UAEMkB,MAAMH,OAAOrB,MAAMsB,QAAQ,GAAGlB,QAAQC,iBAAiBC;IAC7DgB,OAAOG,YAAY;WAEZD;;;;AAIJ;EACLJ,YACWM,WACAC;SADAD;SACAC;;;;AAaN,qCAAqCC;EAC1CR,YACSM,WACPC;IAEA,MAAMD,WAAWC;SAHVD;;EAMT1B,MACEqB,QACAC,QACAO,MACA1B,OACAC,QACAC,iBACAC;UAEMwB,eAAeT,OAAOS,aAAa3B;UAEnC4B,QAAQV,OAAOrB,MACnBsB,QACA,KAAKK,iBAAiB,SAASG,eAAeA,eAAe,GAC7D1B,QACAC,iBACAC;UAEIC,WAAWC,gBAAKqB,KAAKX,KAAKV,qBAAUc,OAAOU;UAC3CvB,KAAKD,sBAAWD;QAClBG;MACFC,UAAU;MACVsB,UAAU,KAAKP;MACfG;MACAE;MACAhB,YAAYmB;MACZhB,KAAKX;MACLY,QAAQV;;IAEVJ,gBAAgBI,MAAMC;WAEfA;;;;AAMJ;EAELV,MAAMqB,QACJC,QACAnB,OACAC,QACAC,iBACAC;UAEMC,WAAWC,qBAAUL;UACrBM,KAAKD,sBAAWD;IACtBe,OAAOG,YAAY;UACbU,OAAOd,OAAOrB,MAAMsB,QAAQ,GAAGlB,QAAQC,iBAAiBC;QAC1D8B,QAAQD;QACRhC,MAAMW,QAAQ;YACVuB,OAAOhB,OAAOrB,MAAMsB,QAAQ,GAAGlB,QAAQC,iBAAiBC;MAC9D8B,KAAKE,KAAKD;;IAEZf,OAAOG,YAAY;QACff;MACFC,UAAU;MACV4B,MAAMpC,MAAMW;MACZsB,MAAMA;MACNrB;QAAcC,QAAQ;QACRC,WAAWiB;;MACzBhB,KAAKX;MACLY,QAAQV;;IAEVJ,gBAAgBI,MAAMC;WACfA;;;;AAIJ;EACLV,MAAMqB,QACJC,QACAnB,OACAC,QACAC,iBACAC;UACMC,WAAWC,qBAAUL;UACrBM,KAAKD,sBAAWD;UAEhBiC,YAAYnB,OAAOrB,MAAMsB,QAAQ,GAAGlB,QAAQC,iBAAiBC;UAC7DmC,aAAapB,OAAOrB,MAAMsB,QAAQ,GAAGlB,QAAQC,iBAAiBC;IACpEgB,OAAOG,YAAY;UACbiB,YAAYrB,OAAOrB,MAAMsB,QAAQ,GAAGlB,QAAQC,iBAAiBC;QAE/DI;MACFC,UAAU;MACVgC;QAAQH,WAAWA;QAAWC,YAAYA;;MAC1CC,WAAWA;MACX3B;QAAcC,QAAQ;QACRC,WAAWiB;;MACzBhB,KAAKX;MACLY,QAAQV;;IAEVJ,gBAAgBI,MAAMC;WACfA;;;;AAIJ;EACLV,MAAMqB,QACJC,QACAnB,OACAC,QACAC,iBACAC;UAEMC,WAAWC,qBAAUL;UACrBM,KAAKD,sBAAWD;IAGtBe,OAAOG,YAAY;UACbmB,aAAavB,OAAOrB,MAAMsB,QAAQ,GAAGlB,QAAQC,iBAAiBC;IAGpEF,OAAOD,MAAMW,QAAQL;QACjBC;MACFC,UAAU;MACV4B,MAAMpC,MAAMW;MACZ8B,YAAYA;MACZ7B;QAAcC,QAAQ;QACRC,yBAAW2B,sDAAY7B,sDAAYE;;MACjDC,KAAKX;MACLY,QAAQV;;IAEVJ,gBAAgBI,MAAMC;IACtBJ,WAAWG,MAAMoC,qBAAUD,YAAYtC;WAEhCI;;;;AAIJ;EACLV,MAAMqB,QACJC,QACAnB,OACAC,QACAC,iBACAC;UAEMC,WAAWC,qBAAUL;UACrBM,KAAKD,sBAAWD;UAGhBuC,eAAe1C,OAAOD,MAAMW;SAE7BgC;YACGC,kBAAkBC;aACjBD,YAAY/C,MAAMqB,QAAQC,QAAQnB,OAAOC,QAAQC,iBAAiBC;;UAGrEI;QACFC,UAAU;QACV4B,MAAMpC,MAAMW;QACZgC,cAAcA;QACd/B;UAAcC,QAAQ;UACRC,WAAWiB;;QACzBhB,KAAKX;QACLY,QAAQV;;MAEVJ,gBAAgBI,MAAMC;aACfA\",\"sourcesContent\":[\"import { TokenStream } from './tokenstream';\\r\\nimport { Token, TokenType, BinaryOperationTokenType} from './lexer';\\r\\nimport * as AST from './ast';\\r\\nimport { AbstractParser } from './parser';\\r\\nimport {ParseError, token2pos, join, pos2string} from './position';\\r\\nimport {findBases} from './findBase';\\r\\n\\r\\nexport interface InitialParselet {\\r\\n  parse(parser: AbstractParser,\\r\\n        tokens: TokenStream, token: Token,\\r\\n        varMap: {[key: string]: string},\\r\\n        registeredNodes: {[key: string]: AST.Node},\\r\\n        dependsMap: {[key: string]: string[]}): AST.Node;\\r\\n}\\r\\n\\r\\n\\r\\nexport class NumberParselet implements InitialParselet {\\r\\n  parse(_parser: AbstractParser,\\r\\n        _tokens: TokenStream,\\r\\n        token: Token,\\r\\n        varMap: {[key: string]: string},\\r\\n        registeredNodes: {[key: string]: AST.Node},\\r\\n        dependsMap: {[key: string]: string[]}) {\\r\\n    const position = token2pos(token);\\r\\n    const id = pos2string(position);\\r\\n    // add node to the map\\r\\n    let newNode = {\\r\\n      nodeType: 'Number' as 'Number',\\r\\n      value: parseFloat(token.text),\\r\\n      outputType: { status: 'Definitely' as 'Definitely',\\r\\n                    valueType: 'number' as 'number' },\\r\\n      pos: position,\\r\\n      nodeId: id\\r\\n    };\\r\\n    registeredNodes[id] = newNode;\\r\\n    return newNode;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport class BooleanParselet implements InitialParselet {\\r\\n  constructor(private value: boolean) {}\\r\\n  parse(_parser: AbstractParser,\\r\\n        _tokens: TokenStream, token: Token,\\r\\n        varMap: {[key: string]: string},\\r\\n        registeredNodes: {[key: string]: AST.Node},\\r\\n        dependsMap: {[key: string]: string[]}) {\\r\\n    const position = token2pos(token);\\r\\n    const id = pos2string(position);\\r\\n    let newNode = {\\r\\n      nodeType: 'Boolean' as 'Boolean',\\r\\n      value: this.value,\\r\\n      outputType: { status: 'Definitely' as 'Definitely',\\r\\n                    valueType: 'boolean' as 'boolean' },\\r\\n      pos: position,\\r\\n      nodeId: id\\r\\n    };\\r\\n    registeredNodes[id] = newNode;\\r\\n    return newNode;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport class ParenParselet implements InitialParselet {\\r\\n  parse(parser: AbstractParser,\\r\\n    tokens: TokenStream,\\r\\n    _token: Token,\\r\\n    varMap: {[key: string]: string},\\r\\n    registeredNodes: {[key: string]: AST.Node},\\r\\n    dependsMap: {[key: string]: string[]}) {\\r\\n\\r\\n    const exp = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\r\\n    tokens.expectToken(')');\\r\\n\\r\\n    return exp;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport abstract class ConsequentParselet {\\r\\n  constructor(\\r\\n    readonly tokenType: TokenType,\\r\\n    readonly associativity: 'left' | 'right'\\r\\n  ) {}\\r\\n  abstract parse(\\r\\n    parser: AbstractParser,\\r\\n    tokens: TokenStream,\\r\\n    left: AST.Node,\\r\\n    token: Token,\\r\\n    varMap: {[key: string]: string},\\r\\n    registeredNodes: {[key: string]: AST.Node},\\r\\n    dependsMap: {[key: string]: string[]}\\r\\n  ): AST.Node;\\r\\n}\\r\\n\\r\\nexport class BinaryOperatorParselet extends ConsequentParselet {\\r\\n  constructor(\\r\\n    public tokenType: BinaryOperationTokenType,\\r\\n    associativity: 'left' | 'right'\\r\\n  ) {\\r\\n    super(tokenType, associativity);\\r\\n  }\\r\\n\\r\\n  parse(\\r\\n    parser: AbstractParser,\\r\\n    tokens: TokenStream,\\r\\n    left: AST.Node,\\r\\n    token: Token,\\r\\n    varMap: {[key: string]: string},\\r\\n    registeredNodes: {[key: string]: AST.Node},\\r\\n    dependsMap: {[key: string]: string[]}\\r\\n  ): AST.Node {\\r\\n    const bindingPower = parser.bindingPower(token);\\r\\n\\r\\n    const right = parser.parse(\\r\\n      tokens,\\r\\n      this.associativity == 'left' ? bindingPower : bindingPower - 1,\\r\\n      varMap,\\r\\n      registeredNodes,\\r\\n      dependsMap\\r\\n    );\\r\\n    const position = join(left.pos, token2pos(tokens.last()));\\r\\n    const id = pos2string(position);\\r\\n    let newNode = {\\r\\n      nodeType: 'BinaryOperation' as 'BinaryOperation',\\r\\n      operator: this.tokenType,\\r\\n      left,\\r\\n      right,\\r\\n      outputType: undefined,\\r\\n      pos: position,\\r\\n      nodeId: id\\r\\n    };\\r\\n    registeredNodes[id] = newNode;\\r\\n\\r\\n    return newNode;\\r\\n  }\\r\\n}\\r\\n\\r\\n// Parse function calls\\r\\n// Limitation: Functions are allowed to take exactly one argument\\r\\nexport class FunctionParselet implements InitialParselet {\\r\\n  \\r\\n  parse(parser: AbstractParser,\\r\\n    tokens: TokenStream,\\r\\n    token: Token,\\r\\n    varMap: {[key: string]: string},\\r\\n    registeredNodes: {[key: string]: AST.Node},\\r\\n    dependsMap: {[key: string]: string[]}) {\\r\\n\\r\\n    const position = token2pos(token);\\r\\n    const id = pos2string(position);\\r\\n    tokens.expectToken('(');\\r\\n    const arg1 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for one argument\\r\\n    let args = [arg1];\\r\\n    if (token.text == \\\"ParseOrderedPair\\\") {\\r\\n      const arg2 = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);  // allow for second argument\\r\\n      args.push(arg2);\\r\\n    }\\r\\n    tokens.expectToken(')');\\r\\n    let newNode = {\\r\\n      nodeType: 'Function' as 'Function',\\r\\n      name: token.text,\\r\\n      args: args,\\r\\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\\r\\n                    valueType: undefined },\\r\\n      pos: position,\\r\\n      nodeId: id\\r\\n    };\\r\\n    registeredNodes[id] = newNode;\\r\\n    return newNode;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport class ChooseParselet implements InitialParselet {\\r\\n  parse(parser: AbstractParser,\\r\\n    tokens: TokenStream,\\r\\n    token: Token,\\r\\n    varMap: {[key: string]: string},\\r\\n    registeredNodes: {[key: string]: AST.Node},\\r\\n    dependsMap: {[key: string]: string[]}) {\\r\\n    const position = token2pos(token);\\r\\n    const id = pos2string(position);\\r\\n\\r\\n    const predicate = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\r\\n    const consequent = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\r\\n    tokens.expectToken('CHOOSE2');\\r\\n    const otherwise = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\r\\n\\r\\n    let newNode = {\\r\\n      nodeType: 'Choose' as 'Choose',\\r\\n      case: { predicate: predicate, consequent: consequent },\\r\\n      otherwise: otherwise,\\r\\n      outputType: { status: 'Maybe-Undefined' as 'Maybe-Undefined',\\r\\n                    valueType: undefined },\\r\\n      pos: position,\\r\\n      nodeId: id\\r\\n    };\\r\\n    registeredNodes[id] = newNode;\\r\\n    return newNode;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport class VariableAssignmentParselet implements InitialParselet {\\r\\n  parse(parser: AbstractParser,\\r\\n    tokens: TokenStream,\\r\\n    token: Token,\\r\\n    varMap: {[key: string]: string},\\r\\n    registeredNodes: {[key: string]: AST.Node},\\r\\n    dependsMap: {[key: string]: string[]}) {\\r\\n\\r\\n    const position = token2pos(token);\\r\\n    const id = pos2string(position);\\r\\n    \\r\\n    // deal with variable assignment\\r\\n    tokens.expectToken('=');\\r\\n    const assignment = parser.parse(tokens, 0, varMap, registeredNodes, dependsMap);\\r\\n\\r\\n    // need to save the variable and its assignment in a lookup table\\r\\n    varMap[token.text] = id;\\r\\n    let newNode = {\\r\\n      nodeType: 'VariableAssignment' as 'VariableAssignment',\\r\\n      name: token.text,\\r\\n      assignment: assignment,\\r\\n      outputType: { status: \\\"Maybe-Undefined\\\" as \\\"Maybe-Undefined\\\",\\r\\n                    valueType: assignment?.outputType?.valueType },\\r\\n      pos: position,\\r\\n      nodeId: id\\r\\n    };\\r\\n    registeredNodes[id] = newNode;\\r\\n    dependsMap[id] = findBases(assignment, dependsMap); // NEW FUNCTION HERE\\r\\n\\r\\n    return newNode;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport class IdentifierParselet implements InitialParselet {\\r\\n  parse(parser: AbstractParser,\\r\\n    tokens: TokenStream,\\r\\n    token: Token,\\r\\n    varMap: {[key: string]: string},\\r\\n    registeredNodes: {[key: string]: AST.Node},\\r\\n    dependsMap: {[key: string]: string[]}) {\\r\\n    \\r\\n    const position = token2pos(token);\\r\\n    const id = pos2string(position);\\r\\n    // need to look up known variables in a lookup table (map?)\\r\\n\\r\\n    const assignmentId = varMap[token.text];\\r\\n\\r\\n    if (!assignmentId) {\\r\\n      const varParselet = new VariableAssignmentParselet();\\r\\n      return varParselet.parse(parser, tokens, token, varMap, registeredNodes, dependsMap);\\r\\n    }\\r\\n    else {\\r\\n      let newNode = {\\r\\n        nodeType: 'Identifier' as 'Identifier',\\r\\n        name: token.text,\\r\\n        assignmentId: assignmentId,\\r\\n        outputType: { status: \\\"Maybe-Undefined\\\" as \\\"Maybe-Undefined\\\",\\r\\n                      valueType: undefined },\\r\\n        pos: position,\\r\\n        nodeId: id\\r\\n      };\\r\\n      registeredNodes[id] = newNode;\\r\\n      return newNode;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"]}"}