{"contents":"exports.__esModule = true;\nvar view_1 = __fusereq(13);\nvar state_1 = __fusereq(14);\nvar tooltip_1 = __fusereq(27);\nvar panel_1 = __fusereq(28);\nvar crelt_1 = __fusereq(29);\nvar crelt_1d = __fuse.dt(crelt_1);\nclass SelectedDiagnostic {\n  constructor(from, to, diagnostic) {\n    this.from = from;\n    this.to = to;\n    this.diagnostic = diagnostic;\n  }\n}\nclass LintState {\n  constructor(diagnostics, panel, selected) {\n    this.diagnostics = diagnostics;\n    this.panel = panel;\n    this.selected = selected;\n  }\n}\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\n  let found = null;\n  diagnostics.between(after, 1e9, (from, to, {spec}) => {\n    if (diagnostic && spec.diagnostic != diagnostic) return;\n    found = new SelectedDiagnostic(from, to, spec.diagnostic);\n    return false;\n  });\n  return found;\n}\nfunction maybeEnableLint(state, effects) {\n  return state.field(lintState, false) ? effects : effects.concat(state_1.StateEffect.appendConfig.of([lintState, view_1.EditorView.decorations.compute([lintState], state => {\n    let {selected, panel} = state.field(lintState);\n    return !selected || !panel || selected.from == selected.to ? view_1.Decoration.none : view_1.Decoration.set([activeMark.range(selected.from, selected.to)]);\n  }), tooltip_1.hoverTooltip(lintTooltip), baseTheme]));\n}\nfunction setDiagnostics(state, diagnostics) {\n  return {\n    effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\n  };\n}\nconst setDiagnosticsEffect = state_1.StateEffect.define();\nconst togglePanel = state_1.StateEffect.define();\nconst movePanelSelection = state_1.StateEffect.define();\nconst lintState = state_1.StateField.define({\n  create() {\n    return new LintState(view_1.Decoration.none, null, null);\n  },\n  update(value, tr) {\n    if (tr.docChanged) {\n      let mapped = value.diagnostics.map(tr.changes), selected = null;\n      if (value.selected) {\n        let selPos = tr.changes.mapPos(value.selected.from, 1);\n        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\n      }\n      value = new LintState(mapped, value.panel, selected);\n    }\n    for (let effect of tr.effects) {\n      if (effect.is(setDiagnosticsEffect)) {\n        let ranges = view_1.Decoration.set(effect.value.map(d => {\n          return d.from < d.to ? view_1.Decoration.mark({\n            attributes: {\n              class: \"cm-lintRange cm-lintRange-\" + d.severity\n            },\n            diagnostic: d\n          }).range(d.from, d.to) : view_1.Decoration.widget({\n            widget: new DiagnosticWidget(d),\n            diagnostic: d\n          }).range(d.from);\n        }));\n        value = new LintState(ranges, value.panel, findDiagnostic(ranges));\n      } else if (effect.is(togglePanel)) {\n        value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\n      } else if (effect.is(movePanelSelection)) {\n        value = new LintState(value.diagnostics, value.panel, effect.value);\n      }\n    }\n    return value;\n  },\n  provide: f => [panel_1.showPanel.from(f, val => val.panel), view_1.EditorView.decorations.from(f, s => s.diagnostics)]\n});\nconst activeMark = view_1.Decoration.mark({\n  class: \"cm-lintRange cm-lintRange-active\"\n});\nfunction lintTooltip(view, pos, side) {\n  let {diagnostics} = view.state.field(lintState);\n  let found = [], stackStart = 2e8, stackEnd = 0;\n  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, {spec}) => {\n    if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {\n      found.push(spec.diagnostic);\n      stackStart = Math.min(from, stackStart);\n      stackEnd = Math.max(to, stackEnd);\n    }\n  });\n  if (!found.length) return null;\n  return {\n    pos: stackStart,\n    end: stackEnd,\n    above: view.state.doc.lineAt(stackStart).to < stackEnd,\n    create() {\n      return {\n        dom: crelt_1d.default(\"ul\", {\n          class: \"cm-tooltip-lint\"\n        }, found.map(d => renderDiagnostic(view, d, false)))\n      };\n    }\n  };\n}\nconst openLintPanel = view => {\n  let field = view.state.field(lintState, false);\n  if (!field || !field.panel) view.dispatch({\n    effects: maybeEnableLint(view.state, [togglePanel.of(true)])\n  });\n  let panel = panel_1.getPanel(view, LintPanel.open);\n  if (panel) panel.dom.querySelector(\".cm-panel-lint ul\").focus();\n  return true;\n};\nconst closeLintPanel = view => {\n  let field = view.state.field(lintState, false);\n  if (!field || !field.panel) return false;\n  view.dispatch({\n    effects: togglePanel.of(false)\n  });\n  return true;\n};\nconst nextDiagnostic = view => {\n  let field = view.state.field(lintState, false);\n  if (!field) return false;\n  let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\n  if (!next.value) {\n    next = field.diagnostics.iter(0);\n    if (!next.value || next.from == sel.from && next.to == sel.to) return false;\n  }\n  view.dispatch({\n    selection: {\n      anchor: next.from,\n      head: next.to\n    },\n    scrollIntoView: true\n  });\n  return true;\n};\nconst lintKeymap = [{\n  key: \"Mod-Shift-m\",\n  run: openLintPanel\n}, {\n  key: \"F8\",\n  run: nextDiagnostic\n}];\nconst LintDelay = 500;\nfunction linter(source) {\n  return view_1.ViewPlugin.fromClass(class {\n    constructor(view) {\n      this.view = view;\n      this.lintTime = Date.now() + LintDelay;\n      this.set = true;\n      this.run = this.run.bind(this);\n      setTimeout(this.run, LintDelay);\n    }\n    run() {\n      let now = Date.now();\n      if (now < this.lintTime - 10) {\n        setTimeout(this.run, this.lintTime - now);\n      } else {\n        this.set = false;\n        let {state} = this.view;\n        Promise.resolve(source(this.view)).then(annotations => {\n          var _a, _b;\n          if (this.view.state.doc == state.doc && (annotations.length || ((_b = (_a = this.view.state.field(lintState, false)) === null || _a === void 0 ? void 0 : _a.diagnostics) === null || _b === void 0 ? void 0 : _b.size))) this.view.dispatch(setDiagnostics(this.view.state, annotations));\n        }, error => {\n          view_1.logException(this.view.state, error);\n        });\n      }\n    }\n    update(update) {\n      if (update.docChanged) {\n        this.lintTime = Date.now() + LintDelay;\n        if (!this.set) {\n          this.set = true;\n          setTimeout(this.run, LintDelay);\n        }\n      }\n    }\n  });\n}\nfunction assignKeys(actions) {\n  let assigned = [];\n  if (actions) actions: for (let {name} of actions) {\n    for (let i = 0; i < name.length; i++) {\n      let ch = name[i];\n      if ((/[a-zA-Z]/).test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\n        assigned.push(ch);\n        continue actions;\n      }\n    }\n    assigned.push(\"\");\n  }\n  return assigned;\n}\nfunction renderDiagnostic(view, diagnostic, inPanel) {\n  var _a;\n  let keys = inPanel ? assignKeys(diagnostic.actions) : [];\n  return crelt_1d.default(\"li\", {\n    class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity\n  }, crelt_1d.default(\"span\", {\n    class: \"cm-diagnosticText\"\n  }, diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\n    let click = e => {\n      e.preventDefault();\n      let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\n      if (found) action.apply(view, found.from, found.to);\n    };\n    let {name} = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\n    let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), crelt_1d.default(\"u\", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];\n    return crelt_1d.default(\"button\", {\n      class: \"cm-diagnosticAction\",\n      onclick: click,\n      onmousedown: click,\n      \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\n    }, nameElt);\n  }), diagnostic.source && crelt_1d.default(\"div\", {\n    class: \"cm-diagnosticSource\"\n  }, diagnostic.source));\n}\nclass DiagnosticWidget extends view_1.WidgetType {\n  constructor(diagnostic) {\n    super();\n    this.diagnostic = diagnostic;\n  }\n  eq(other) {\n    return other.diagnostic == this.diagnostic;\n  }\n  toDOM() {\n    return crelt_1d.default(\"span\", {\n      class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity\n    });\n  }\n}\nclass PanelItem {\n  constructor(view, diagnostic) {\n    this.diagnostic = diagnostic;\n    this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\n    this.dom = renderDiagnostic(view, diagnostic, true);\n    this.dom.id = this.id;\n    this.dom.setAttribute(\"role\", \"option\");\n  }\n}\nclass LintPanel {\n  constructor(view) {\n    this.view = view;\n    this.items = [];\n    let onkeydown = event => {\n      if (event.keyCode == 27) {\n        closeLintPanel(this.view);\n        this.view.focus();\n      } else if (event.keyCode == 38 || event.keyCode == 33) {\n        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\n      } else if (event.keyCode == 40 || event.keyCode == 34) {\n        this.moveSelection((this.selectedIndex + 1) % this.items.length);\n      } else if (event.keyCode == 36) {\n        this.moveSelection(0);\n      } else if (event.keyCode == 35) {\n        this.moveSelection(this.items.length - 1);\n      } else if (event.keyCode == 13) {\n        this.view.focus();\n      } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.items.length) {\n        let {diagnostic} = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);\n        for (let i = 0; i < keys.length; i++) if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\n          let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\n          if (found) diagnostic.actions[i].apply(view, found.from, found.to);\n        }\n      } else {\n        return;\n      }\n      event.preventDefault();\n    };\n    let onclick = event => {\n      for (let i = 0; i < this.items.length; i++) {\n        if (this.items[i].dom.contains(event.target)) this.moveSelection(i);\n      }\n    };\n    this.list = crelt_1d.default(\"ul\", {\n      tabIndex: 0,\n      role: \"listbox\",\n      \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\n      onkeydown,\n      onclick\n    });\n    this.dom = crelt_1d.default(\"div\", {\n      class: \"cm-panel-lint\"\n    }, this.list, crelt_1d.default(\"button\", {\n      name: \"close\",\n      \"aria-label\": this.view.state.phrase(\"close\"),\n      onclick: () => closeLintPanel(this.view)\n    }, \"×\"));\n    this.update();\n  }\n  get selectedIndex() {\n    let selected = this.view.state.field(lintState).selected;\n    if (!selected) return -1;\n    for (let i = 0; i < this.items.length; i++) if (this.items[i].diagnostic == selected.diagnostic) return i;\n    return -1;\n  }\n  update() {\n    let {diagnostics, selected} = this.view.state.field(lintState);\n    let i = 0, needsSync = false, newSelectedItem = null;\n    diagnostics.between(0, this.view.state.doc.length, (_start, _end, {spec}) => {\n      let found = -1, item;\n      for (let j = i; j < this.items.length; j++) if (this.items[j].diagnostic == spec.diagnostic) {\n        found = j;\n        break;\n      }\n      if (found < 0) {\n        item = new PanelItem(this.view, spec.diagnostic);\n        this.items.splice(i, 0, item);\n        needsSync = true;\n      } else {\n        item = this.items[found];\n        if (found > i) {\n          this.items.splice(i, found - i);\n          needsSync = true;\n        }\n      }\n      if (selected && item.diagnostic == selected.diagnostic) {\n        if (!item.dom.hasAttribute(\"aria-selected\")) {\n          item.dom.setAttribute(\"aria-selected\", \"true\");\n          newSelectedItem = item;\n        }\n      } else if (item.dom.hasAttribute(\"aria-selected\")) {\n        item.dom.removeAttribute(\"aria-selected\");\n      }\n      i++;\n    });\n    while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\n      needsSync = true;\n      this.items.pop();\n    }\n    if (this.items.length == 0) {\n      this.items.push(new PanelItem(this.view, {\n        from: -1,\n        to: -1,\n        severity: \"info\",\n        message: this.view.state.phrase(\"No diagnostics\")\n      }));\n      needsSync = true;\n    }\n    if (newSelectedItem) {\n      this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\n      this.view.requestMeasure({\n        key: this,\n        read: () => ({\n          sel: newSelectedItem.dom.getBoundingClientRect(),\n          panel: this.list.getBoundingClientRect()\n        }),\n        write: ({sel, panel}) => {\n          if (sel.top < panel.top) this.list.scrollTop -= panel.top - sel.top; else if (sel.bottom > panel.bottom) this.list.scrollTop += sel.bottom - panel.bottom;\n        }\n      });\n    } else if (!this.items.length) {\n      this.list.removeAttribute(\"aria-activedescendant\");\n    }\n    if (needsSync) this.sync();\n  }\n  sync() {\n    let domPos = this.list.firstChild;\n    function rm() {\n      let prev = domPos;\n      domPos = prev.nextSibling;\n      prev.remove();\n    }\n    for (let item of this.items) {\n      if (item.dom.parentNode == this.list) {\n        while (domPos != item.dom) rm();\n        domPos = item.dom.nextSibling;\n      } else {\n        this.list.insertBefore(item.dom, domPos);\n      }\n    }\n    while (domPos) rm();\n    if (!this.list.firstChild) this.list.appendChild(renderDiagnostic(this.view, {\n      severity: \"info\",\n      message: this.view.state.phrase(\"No diagnostics\")\n    }, true));\n  }\n  moveSelection(selectedIndex) {\n    if (this.items.length == 0) return;\n    let field = this.view.state.field(lintState);\n    let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\n    if (!selection) return;\n    this.view.dispatch({\n      selection: {\n        anchor: selection.from,\n        head: selection.to\n      },\n      scrollIntoView: true,\n      effects: movePanelSelection.of(selection)\n    });\n  }\n  static open(view) {\n    return new LintPanel(view);\n  }\n}\nfunction underline(color) {\n  if (typeof btoa != \"function\") return \"none\";\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"6\" height=\"3\">\n    <path d=\"m0 3 l2 -2 l1 0 l2 2 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>\n  </svg>`;\n  return `url('data:image/svg+xml;base64,${btoa(svg)}')`;\n}\nconst baseTheme = view_1.EditorView.baseTheme({\n  \".cm-diagnostic\": {\n    padding: \"3px 6px 3px 8px\",\n    marginLeft: \"-1px\",\n    display: \"block\"\n  },\n  \".cm-diagnostic-error\": {\n    borderLeft: \"5px solid #d11\"\n  },\n  \".cm-diagnostic-warning\": {\n    borderLeft: \"5px solid orange\"\n  },\n  \".cm-diagnostic-info\": {\n    borderLeft: \"5px solid #999\"\n  },\n  \".cm-diagnosticAction\": {\n    font: \"inherit\",\n    border: \"none\",\n    padding: \"2px 4px\",\n    backgroundColor: \"#444\",\n    color: \"white\",\n    borderRadius: \"3px\",\n    marginLeft: \"8px\"\n  },\n  \".cm-diagnosticSource\": {\n    fontSize: \"70%\",\n    opacity: .7\n  },\n  \".cm-lintRange\": {\n    backgroundPosition: \"left bottom\",\n    backgroundRepeat: \"repeat-x\"\n  },\n  \".cm-lintRange-error\": {\n    backgroundImage: underline(\"#d11\")\n  },\n  \".cm-lintRange-warning\": {\n    backgroundImage: underline(\"orange\")\n  },\n  \".cm-lintRange-info\": {\n    backgroundImage: underline(\"#999\")\n  },\n  \".cm-lintRange-active\": {\n    backgroundColor: \"#ffdd9980\"\n  },\n  \".cm-lintPoint\": {\n    position: \"relative\",\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      bottom: 0,\n      left: \"-2px\",\n      borderLeft: \"3px solid transparent\",\n      borderRight: \"3px solid transparent\",\n      borderBottom: \"4px solid #d11\"\n    }\n  },\n  \".cm-lintPoint-warning\": {\n    \"&:after\": {\n      borderBottomColor: \"orange\"\n    }\n  },\n  \".cm-lintPoint-info\": {\n    \"&:after\": {\n      borderBottomColor: \"#999\"\n    }\n  },\n  \".cm-panel.cm-panel-lint\": {\n    position: \"relative\",\n    \"& ul\": {\n      maxHeight: \"100px\",\n      overflowY: \"auto\",\n      \"& [aria-selected]\": {\n        backgroundColor: \"#ddd\",\n        \"& u\": {\n          textDecoration: \"underline\"\n        }\n      },\n      \"&:focus [aria-selected]\": {\n        background_fallback: \"#bdf\",\n        backgroundColor: \"Highlight\",\n        color_fallback: \"white\",\n        color: \"HighlightText\"\n      },\n      \"& u\": {\n        textDecoration: \"none\"\n      },\n      padding: 0,\n      margin: 0\n    },\n    \"& [name=close]\": {\n      position: \"absolute\",\n      top: \"0\",\n      right: \"2px\",\n      background: \"inherit\",\n      border: \"none\",\n      font: \"inherit\",\n      padding: 0,\n      margin: 0\n    }\n  },\n  \".cm-tooltip.cm-tooltip-lint\": {\n    padding: 0,\n    margin: 0\n  }\n});\nexports.closeLintPanel = closeLintPanel;\nexports.lintKeymap = lintKeymap;\nexports.linter = linter;\nexports.nextDiagnostic = nextDiagnostic;\nexports.openLintPanel = openLintPanel;\nexports.setDiagnostics = setDiagnostics;\n"}